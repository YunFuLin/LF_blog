<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>requestAnimationFrame 执行时机</title>
      <link href="/LF_blog/notes/no-066.html"/>
      <url>/LF_blog/notes/no-066.html</url>
      
        <content type="html"><![CDATA[<h2 id="📌-1-requestAnimationFrame-执行时机："><a href="#📌-1-requestAnimationFrame-执行时机：" class="headerlink" title="📌 1. requestAnimationFrame 执行时机："></a>📌 <strong>1. requestAnimationFrame 执行时机：</strong></h2><h3 id="✅-执行在“渲染前”"><a href="#✅-执行在“渲染前”" class="headerlink" title="✅ 执行在“渲染前”"></a>✅ <strong>执行在“渲染前”</strong></h3><p>准确地说：<strong>它是在浏览器准备执行下一次渲染（repaint）之前执行的</strong>，也就是在 <strong>“渲染前的最后一个时刻”</strong>。</p><h3 id="🔄-一帧的流程大概是："><a href="#🔄-一帧的流程大概是：" class="headerlink" title="🔄 一帧的流程大概是："></a>🔄 一帧的流程大概是：</h3><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">上一帧结束 →执行 JS（包括 rAF 回调） →样式计算 →布局 →绘制（Painting） →下一帧开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以：</p><p><strong>requestAnimationFrame 的回调会在一次完整渲染周期的开始阶段执行（也就是渲染前）</strong>。</p><p>这就是为什么它适合做动画：你可以在它里边计算动画状态，浏览器接着就会用你更新后的状态去绘制。</p><h2 id="📌-2-requestIdleCallback-执行时机："><a href="#📌-2-requestIdleCallback-执行时机：" class="headerlink" title="📌 2. requestIdleCallback 执行时机："></a>📌 <strong>2. requestIdleCallback 执行时机：</strong></h2><h3 id="✅-执行在“主线程空闲”期间"><a href="#✅-执行在“主线程空闲”期间" class="headerlink" title="✅ 执行在“主线程空闲”期间"></a>✅ <strong>执行在“主线程空闲”期间</strong></h3><p>也就是说：</p><ul><li>浏览器 <strong>完成了一帧的渲染</strong></li><li>主线程暂时没有高优先级任务</li><li>有空余时间（比如 50ms 里还有 10ms 没用）</li></ul><p>就会执行你注册的 <code>requestIdleCallback</code> 的回调函数。</p><h3 id="🚧-有个限制："><a href="#🚧-有个限制：" class="headerlink" title="🚧 有个限制："></a>🚧 有个限制：</h3><ul><li><strong>它不保证每帧都执行</strong>（因为不一定有空闲时间）</li><li>可以设置 <code>timeout</code> 参数来强制在一定时间内执行（防止永远不执行）</li></ul><h3 id="❗-所以："><a href="#❗-所以：" class="headerlink" title="❗ 所以："></a>❗ 所以：</h3><p><strong>requestIdleCallback 是在“渲染之后”的空闲时间才执行的，不影响渲染性能。</strong></p><h2 id="📌-3-每一轮-Event-Loop-都会伴随渲染吗？"><a href="#📌-3-每一轮-Event-Loop-都会伴随渲染吗？" class="headerlink" title="📌 3. 每一轮 Event Loop 都会伴随渲染吗？"></a>📌 <strong>3. 每一轮 Event Loop 都会伴随渲染吗？</strong></h2><h3 id="❌-不一定！"><a href="#❌-不一定！" class="headerlink" title="❌ 不一定！"></a>❌ <strong>不一定！</strong></h3><p><strong>渲染（也就是 Repaint / Reflow）只会发生在有“视觉变更”的时候。</strong></p><p>浏览器默认是 60 帧/秒，也就是 <strong>每 16.6ms 才“最多”渲染一次</strong>。</p><p>如果一轮 Event Loop 没有 UI 变化（比如只是计算数据、发请求等），<strong>浏览器就会跳过这一帧的渲染</strong>，节省资源。</p><h2 id="✅-总结一句话记忆："><a href="#✅-总结一句话记忆：" class="headerlink" title="✅ 总结一句话记忆："></a>✅ 总结一句话记忆：</h2><table><thead><tr><th>项目</th><th>执行阶段</th><th>是否每帧都执行</th><th>用途</th></tr></thead><tbody><tr><td><code>requestAnimationFrame</code></td><td><strong>渲染前</strong></td><td>是（下一帧前）</td><td>动画更新</td></tr><tr><td><code>requestIdleCallback</code></td><td><strong>渲染后空闲时</strong></td><td>否（不一定）</td><td>后台任务</td></tr><tr><td>每轮 Event Loop 是否渲染</td><td>❌ 不一定</td><td>-</td><td>仅当有视觉变化时</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eventloop，requestIdlecallback 和 requestAnimationFrame的理解</title>
      <link href="/LF_blog/notes/no-065.html"/>
      <url>/LF_blog/notes/no-065.html</url>
      
        <content type="html"><![CDATA[<h2 id="🔁-一、Event-Loop（事件循环）"><a href="#🔁-一、Event-Loop（事件循环）" class="headerlink" title="🔁 一、Event Loop（事件循环）"></a>🔁 一、Event Loop（事件循环）</h2><h3 id="🌟-概念核心："><a href="#🌟-概念核心：" class="headerlink" title="🌟 概念核心："></a>🌟 概念核心：</h3><p>JS 是单线程的，但为了不阻塞主线程，它采用了 <strong>异步非阻塞的执行模型</strong>，即：<strong>Event Loop</strong>。</p><h3 id="👇-工作流程简要版："><a href="#👇-工作流程简要版：" class="headerlink" title="👇 工作流程简要版："></a>👇 工作流程简要版：</h3><ol><li><strong>Call Stack（调用栈）</strong>：同步代码进来就执行，执行完出栈。</li><li><strong>Web APIs</strong>：定时器、DOM 事件、XHR 等异步操作会交给浏览器处理。</li><li><strong>Callback Queue（任务队列）</strong>：<ul><li><strong>宏任务（Macro Task）</strong>：如 <code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>I/O</code>、<code>requestIdleCallback</code></li><li><strong>微任务（Micro Task）</strong>：如 <code>Promise.then</code>、<code>MutationObserver</code></li></ul></li><li>Event Loop 会不断循环：<ul><li>清空调用栈</li><li>执行所有微任务</li><li>执行一个宏任务</li><li>再次检查微任务</li><li>如此反复…</li></ul></li></ol><p>📌 <strong>一句话理解</strong>：Event Loop 是让异步代码按顺序执行的调度机制。</p><h2 id="🧘‍♂️-二、requestIdleCallback-callback"><a href="#🧘‍♂️-二、requestIdleCallback-callback" class="headerlink" title="🧘‍♂️ 二、requestIdleCallback(callback)"></a>🧘‍♂️ 二、requestIdleCallback(callback)</h2><h3 id="📍-作用："><a href="#📍-作用：" class="headerlink" title="📍 作用："></a>📍 作用：</h3><p>用于在浏览器空闲时执行一些不重要、可延迟的任务，比如预加载、统计分析、懒加载等。</p><h3 id="✅-特点："><a href="#✅-特点：" class="headerlink" title="✅ 特点："></a>✅ 特点：</h3><ul><li>会在主线程空闲时调用，不影响页面流畅度。</li><li><code>callback(deadline)</code>：<code>deadline.timeRemaining()</code> 表示当前剩余空闲时间，最大 50ms。</li><li>可以设置 <code>timeout</code> 防止永远不执行。</li></ul><h3 id="🎯-适合做什么？"><a href="#🎯-适合做什么？" class="headerlink" title="🎯 适合做什么？"></a>🎯 适合做什么？</h3><ul><li>页面加载完后，处理缓存、预加载资源、打点统计。</li><li>渲染不相关的长任务（可以切片）。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">deadline</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>deadline<span class="token punctuation">.</span><span class="token function">timeRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tasks<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">performTask</span><span class="token punctuation">(</span>tasks<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="🧊-三、requestAnimationFrame-callback"><a href="#🧊-三、requestAnimationFrame-callback" class="headerlink" title="🧊 三、requestAnimationFrame(callback)"></a>🧊 三、requestAnimationFrame(callback)</h2><h3 id="📍-作用：-1"><a href="#📍-作用：-1" class="headerlink" title="📍 作用："></a>📍 作用：</h3><p>让 JS 在下一帧渲染前执行，专用于视觉动画相关的逻辑。</p><h3 id="✅-特点：-1"><a href="#✅-特点：-1" class="headerlink" title="✅ 特点："></a>✅ 特点：</h3><ul><li>每秒最多执行一次，跟屏幕刷新率（一般是 60Hz）同步。</li><li>优化动画：在浏览器准备绘制之前运行 callback，不会掉帧。</li><li>会在下次“重绘”前被调用，适合更新 UI 的操作。</li></ul><h3 id="🎯-适合做什么？-1"><a href="#🎯-适合做什么？-1" class="headerlink" title="🎯 适合做什么？"></a>🎯 适合做什么？</h3><ul><li>平滑动画（移动元素、canvas 绘图）</li><li>渲染状态变化（比如滚动监听、进度条）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">drawSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类似递归动画循环</span><span class="token punctuation">}</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="🧠-总结对比："><a href="#🧠-总结对比：" class="headerlink" title="🧠 总结对比："></a>🧠 总结对比：</h2><table><thead><tr><th>API</th><th>触发时机</th><th>适合场景</th><th>优先级</th></tr></thead><tbody><tr><td>Event Loop</td><td>控制任务调度</td><td>所有异步执行逻辑</td><td>高（根本）</td></tr><tr><td>requestAnimationFrame</td><td>下一帧绘制前</td><td>UI 动画渲染</td><td>高（与屏幕刷新率同步）</td></tr><tr><td>requestIdleCallback</td><td>空闲时</td><td>后台逻辑、低优任务</td><td>低（不稳定）</td></tr></tbody></table><hr><h2 id="💡-实战经验："><a href="#💡-实战经验：" class="headerlink" title="💡 实战经验："></a>💡 实战经验：</h2><ul><li><strong>动画用 <strong><code>requestAnimationFrame</code></strong>，不要用 <strong><code>setTimeout(fn, 16)</code></strong>！</strong></li><li><strong>后台任务别卡主线程，适合用 <strong><code>requestIdleCallback</code></strong> 处理碎片化逻辑。</strong></li><li><strong>长任务要考虑切片执行 + 微任务调度防止掉帧。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用pnpm 的 monorepo架构多包管理</title>
      <link href="/LF_blog/notes/no-059.html"/>
      <url>/LF_blog/notes/no-059.html</url>
      
        <content type="html"><![CDATA[<p><strong>可以使用 <strong><code>pnpm</code></strong> 的 monorepo 架构来共享公共组件、方法和第三方依赖，且效果非常好！</strong><br>相比传统的 <code>npm</code> 和 <code>yarn</code>，<code>pnpm</code> 在 monorepo 场景下提供了<strong>更好的包管理性能和依赖去重</strong>，特别适合微前端架构。</p><h2 id="一、方案概述"><a href="#一、方案概述" class="headerlink" title="一、方案概述"></a>一、方案概述</h2><p><code>pnpm</code> monorepo 主要依赖 <code>workspace</code> 机制，把多个子应用和公共包统一管理在一个<strong>单一的仓库</strong>中。<br>主应用和子应用可以直接<strong>共享公共组件库、工具方法、第三方包</strong>，避免重复安装和版本冲突。</p><h2 id="二、如何实现？"><a href="#二、如何实现？" class="headerlink" title="二、如何实现？"></a>二、如何实现？</h2><h3 id="🔹-1-创建-pnpm-monorepo-项目"><a href="#🔹-1-创建-pnpm-monorepo-项目" class="headerlink" title="🔹 1. 创建 pnpm monorepo 项目"></a>🔹 1. 创建 <code>pnpm</code> monorepo 项目</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> microfrontend-monorepo <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> microfrontend-monorepo<span class="token function">pnpm</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>在 <code>package.json</code> 里启用 <code>workspaces</code>：</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"microfrontend-monorepo"</span><span class="token punctuation">,</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"workspaces"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"packages/*"</span><span class="token punctuation">,</span> <span class="token string">"apps/*"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>packages/</code> 👉 存放共享的公共组件库、工具库</li><li><code>apps/</code> 👉 存放主应用和子应用</li></ul><h3 id="🔹-2-添加共享的-packages"><a href="#🔹-2-添加共享的-packages" class="headerlink" title="🔹 2. 添加共享的 packages"></a>🔹 2. 添加共享的 <code>packages</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> packages/shared-ui packages/shared-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="📌-创建-shared-ui（共享组件库）"><a href="#📌-创建-shared-ui（共享组件库）" class="headerlink" title="📌 创建 shared-ui（共享组件库）"></a>📌 创建 <code>shared-ui</code>（共享组件库）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> packages/shared-ui<span class="token function">pnpm</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>安装 React 组件依赖（如果是 Vue 则用 <code>vue</code>）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">add</span> react react-dom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>创建 <code>index.tsx</code></strong></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// packages/shared-ui/src/Button.tsx</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> text <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> padding<span class="token operator">:</span> <span class="token string">"10px 20px"</span><span class="token punctuation">,</span> background<span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">"white"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>导出组件</strong></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// packages/shared-ui/index.ts</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./src/Button"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>添加 <code>package.json</code> 配置</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@micro/shared-ui"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.ts"</span><span class="token punctuation">,</span>  <span class="token property">"peerDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^18.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^18.0.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="📌-创建-shared-utils（共享工具库）"><a href="#📌-创建-shared-utils（共享工具库）" class="headerlink" title="📌 创建 shared-utils（共享工具库）"></a>📌 创建 <code>shared-utils</code>（共享工具库）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/shared-utils<span class="token function">pnpm</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>添加工具函数</strong></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// packages/shared-utils/index.ts</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">formatDate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>date<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>配置 <code>package.json</code></strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@micro/shared-utils"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.ts"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="🔹-3-创建-apps-目录（主应用和子应用）"><a href="#🔹-3-创建-apps-目录（主应用和子应用）" class="headerlink" title="🔹 3. 创建 apps 目录（主应用和子应用）"></a>🔹 3. 创建 <code>apps</code> 目录（主应用和子应用）</h3><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">mkdir -p apps/main-app apps/sub-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="📌-配置主应用"><a href="#📌-配置主应用" class="headerlink" title="📌 配置主应用"></a>📌 配置主应用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> apps/main-app<span class="token function">pnpm</span> init<span class="token function">pnpm</span> <span class="token function">add</span> react react-dom @micro/shared-ui @micro/shared-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>在 <code>App.tsx</code> 里使用共享组件和方法</strong></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@micro/shared-ui"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> formatDate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@micro/shared-utils"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">主应用</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点击我<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">当前时间：</span><span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="📌-配置子应用"><a href="#📌-配置子应用" class="headerlink" title="📌 配置子应用"></a>📌 配置子应用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/sub-app<span class="token function">pnpm</span> init<span class="token function">pnpm</span> <span class="token function">add</span> react react-dom @micro/shared-ui @micro/shared-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>子应用 <code>App.tsx</code></strong></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@micro/shared-ui"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">SubApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">子应用</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>我是子应用的按钮<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> SubApp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="🔹-4-在-pnpm-monorepo-里安装依赖"><a href="#🔹-4-在-pnpm-monorepo-里安装依赖" class="headerlink" title="🔹 4. 在 pnpm monorepo 里安装依赖"></a>🔹 4. 在 <code>pnpm</code> monorepo 里安装依赖</h3><p>回到项目根目录，运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>pnpm</code> 会自动<strong>去重依赖</strong>，所有 <code>packages</code> 和 <code>apps</code> 共享相同的 <code>node_modules</code>，提升构建速度。</p><hr><h2 id="三、启动主应用和子应用"><a href="#三、启动主应用和子应用" class="headerlink" title="三、启动主应用和子应用"></a>三、启动主应用和子应用</h2><h3 id="方式-1：独立运行（适合非微前端模式）"><a href="#方式-1：独立运行（适合非微前端模式）" class="headerlink" title="方式 1：独立运行（适合非微前端模式）"></a>方式 1：独立运行（适合非微前端模式）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> apps/main-app <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> start<span class="token builtin class-name">cd</span> apps/sub-app <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样主应用和子应用可以各自独立运行。</p><h3 id="方式-2：微前端整合（适合-qiankun、Module-Federation）"><a href="#方式-2：微前端整合（适合-qiankun、Module-Federation）" class="headerlink" title="方式 2：微前端整合（适合 qiankun、Module Federation）"></a>方式 2：微前端整合（适合 qiankun、Module Federation）</h3><h4 id="使用-qiankun-微前端框架"><a href="#使用-qiankun-微前端框架" class="headerlink" title="使用 qiankun 微前端框架"></a>使用 <code>qiankun</code> 微前端框架</h4><p><strong>主应用（<code>main-app</code>）</strong></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> registerMicroApps<span class="token punctuation">,</span> start <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"qiankun"</span><span class="token punctuation">;</span><span class="token function">registerMicroApps</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">"sub-app"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">"//localhost:3001"</span><span class="token punctuation">,</span>    container<span class="token operator">:</span> <span class="token string">"#subapp-container"</span><span class="token punctuation">,</span>    activeRule<span class="token operator">:</span> <span class="token string">"/subapp"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子应用（<code>sub-app</code>）</strong></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> SubApp <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"子应用 bootstrap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"子应用 mount"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SubApp</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"子应用 unmount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四、优势分析"><a href="#四、优势分析" class="headerlink" title="四、优势分析"></a>四、优势分析</h2><p>✅ <strong>共享组件库 &amp; 工具库</strong>：所有子应用共用 <code>@micro/shared-ui</code> 和 <code>@micro/shared-utils</code>，代码复用率高。<br>✅ <strong>自动依赖去重</strong>：<code>pnpm</code> 采用<strong>硬链接</strong>，不会重复安装 React、Ant Design 等第三方包。<br>✅ <strong>独立开发 &amp; 统一管理</strong>：子应用可以<strong>独立开发</strong>，但也能享受 monorepo 的<strong>依赖管理</strong>。<br>✅ <strong>微前端兼容性强</strong>：可以配合 <strong>qiankun</strong>、<strong>Module Federation</strong> <strong>Web Components</strong> 等方式实现微前端。</p><hr><h2 id="五、适合的场景"><a href="#五、适合的场景" class="headerlink" title="五、适合的场景"></a>五、适合的场景</h2><ul><li><strong>多子应用共享组件库、工具库</strong></li><li><strong>每个子应用可以独立运行，但也能合并成微前端</strong></li><li><strong>减少重复安装 React、Vue、Ant Design 等依赖</strong></li><li><strong>适用于 Vite、Webpack、Rollup 等现代构建工具</strong></li></ul><hr><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>如果你的微前端架构涉及多个 React/Vue 子应用，且希望共享公共组件、工具方法、第三方包，<strong>pnpm monorepo 是最佳选择！</strong></p><p>🔹 <strong>小规模团队</strong>：直接用 <code>pnpm workspaces</code> 管理依赖和共享组件。<br>🔹 <strong>大规模团队</strong>：结合 <code>qiankun</code> 或 <code>Module Federation</code>，实现动态加载、按需共享组件。</p><p>如果你们的项目需求更复杂，比如要<strong>动态加载不同版本的组件库</strong>，也可以进一步结合 <strong>Webpack Module Federation</strong> 进行优化。<br>你目前是想用哪种微前端框架（qiankun、Web Components、Module Federation）？我可以给你更具体的实现方案！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pnpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RBAC + 动态权限 + 用户分配权限</title>
      <link href="/LF_blog/notes/no-067.html"/>
      <url>/LF_blog/notes/no-067.html</url>
      
        <content type="html"><![CDATA[<h3 id="🧩-RBAC（基于角色）在这种场景下的问题："><a href="#🧩-RBAC（基于角色）在这种场景下的问题：" class="headerlink" title="🧩 RBAC（基于角色）在这种场景下的问题："></a>🧩 RBAC（基于角色）在这种场景下的问题：</h3><p>RBAC 模型结构简单（User → Role → Permission），但缺点是：</p><ul><li>不支持用户直接拥有权限；</li><li>不好表达“上下级授权”、“项目内的权限委托”；</li><li>权限变化需要变更角色绑定，流程不灵活。</li></ul><hr><h3 id="✅-推荐方案：RBAC-ABAC-混合模型"><a href="#✅-推荐方案：RBAC-ABAC-混合模型" class="headerlink" title="✅ 推荐方案：RBAC + ABAC 混合模型"></a>✅ 推荐方案：<strong>RBAC + ABAC 混合模型</strong></h3><h4 id="🌟-RBAC（静态权限管理）"><a href="#🌟-RBAC（静态权限管理）" class="headerlink" title="🌟 RBAC（静态权限管理）"></a>🌟 RBAC（静态权限管理）</h4><ul><li>用于处理大部分通用权限，比如「管理员」、「客服」这种固定权限；</li><li>适合初始化赋权阶段。</li></ul><h4 id="🌟-ABAC（Attribute-Based-Access-Control）基于属性的权限控制"><a href="#🌟-ABAC（Attribute-Based-Access-Control）基于属性的权限控制" class="headerlink" title="🌟 ABAC（Attribute-Based Access Control）基于属性的权限控制"></a>🌟 ABAC（Attribute-Based Access Control）基于属性的权限控制</h4><ul><li>权限是通过一系列“属性”来判断的，例如：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">用户</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token literal-property property">角色</span><span class="token operator">:</span> <span class="token string">"高级用户"</span><span class="token punctuation">,</span>    <span class="token literal-property property">部门</span><span class="token operator">:</span> <span class="token string">"销售部"</span><span class="token punctuation">,</span>    项目<span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">}</span><span class="token literal-property property">资源</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token literal-property property">类型</span><span class="token operator">:</span> <span class="token string">"工单"</span><span class="token punctuation">,</span>    所属项目<span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>系统会判断：用户属性 + 环境 + 资源属性 =&gt; 是否有权限操作。</p><ul><li><strong>适合动态、复杂场景</strong>：<ul><li>比如「你只能修改你自己创建的项目」</li><li>或「你是项目管理员，因此你可以给项目成员授权」</li><li>权限逻辑可以存数据库或权限表达式配置中心</li></ul></li></ul><hr><h3 id="✅-进阶：支持用户授权用户（Delegated-Authorization）"><a href="#✅-进阶：支持用户授权用户（Delegated-Authorization）" class="headerlink" title="✅ 进阶：支持用户授权用户（Delegated Authorization）"></a>✅ 进阶：支持用户授权用户（Delegated Authorization）</h3><p>这个就更细了，比如：</p><ul><li>A 用户是管理员，可以把权限 <code>P1</code> 授权给 B；</li><li>B 拥有 <code>P1</code> 但不能授权他人（除非被赋予授权权限）。</li></ul><p>📌 如何实现：</p><ul><li>数据库中记录“权限来源”：</li></ul><pre class="line-numbers language-less" data-language="less"><code class="language-less">user_id | permission_code | source_type | source_idB         edit_user        delegated      A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>控制是否允许“传递性授权”（防止无限传递）；</li><li>UI 上展示权限来源，便于追踪。</li></ul><hr><h3 id="✅-结合一下，一个健壮权限系统一般包含："><a href="#✅-结合一下，一个健壮权限系统一般包含：" class="headerlink" title="✅ 结合一下，一个健壮权限系统一般包含："></a>✅ 结合一下，一个健壮权限系统一般包含：</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>用户 → 角色 → 权限（RBAC）</td><td>通用权限、静态授权</td></tr><tr><td>用户 → 权限（单独授权）</td><td>特殊 case、动态调整</td></tr><tr><td>用户属性 + 资源属性 → 权限判断（ABAC）</td><td>条件判断、灵活表达</td></tr><tr><td>用户授权给用户（Delegated）</td><td>授权链、权限传递</td></tr></tbody></table><hr><h3 id="✅-最后说下技术实现建议："><a href="#✅-最后说下技术实现建议：" class="headerlink" title="✅ 最后说下技术实现建议："></a>✅ 最后说下技术实现建议：</h3><ul><li>权限中心：统一控制权限逻辑，不分散在业务代码中；</li><li>接口级鉴权：网关/服务端统一判断用户是否有权限；</li><li>前端权限：菜单级、按钮级、字段级等用权限码控制；</li><li>使用 DSL（领域特定语言）或权限表达式系统：让非开发人员也能配置权限逻辑。</li></ul><hr><p>权限系统常见是基于 RBAC 实现，但在用户权限需要动态变化、以及用户授权用户的场景下，单纯 RBAC 就不够用了。我更倾向使用“RBAC + ABAC + 授权链”的混合模型。</p><ul><li>静态角色用 RBAC 管理；</li><li>用户动态权限通过直接赋权（User → Permission）或 ABAC 属性判断控制；</li><li>授权链场景下可以记录权限来源，支持传递性控制。</li></ul><p>这样系统既有灵活性，也可追踪权限变更来源，适合复杂中后台系统。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端导出10万条数据（Web Worker）</title>
      <link href="/LF_blog/notes/no-063.html"/>
      <url>/LF_blog/notes/no-063.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h3><p>导出 excel，原本是让后端处理好，前端调接口，然后导出的，就很快。但出于种种原因，现在要完全靠前端处理，想都不用想，前端处理绝对卡爆！但非得前端处理（说我是大佬，肯定有办法 😛）。</p><p>也就是，现在的需求是：<strong>前端在无后端协助下，导出 excel 表。</strong></p><h3 id="二、传统玩法"><a href="#二、传统玩法" class="headerlink" title="二、传统玩法"></a>二、传统玩法</h3><h4 id="1-通过-blob-文件流导出（需要后端配合）"><a href="#1-通过-blob-文件流导出（需要后端配合）" class="headerlink" title="1. 通过 blob 文件流导出（需要后端配合）"></a>1. 通过 blob 文件流导出（需要后端配合）</h4><p>后端给前端 <code>blob</code> 数据，前端转换表格导出</p><blockquote><p>excel 表格文件都是后端生成的</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">xxxApi</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"application/  ms-excel"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">"表格.xlsx"</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span>href <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"导出成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"导出失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-前端生成（不需要后端配合）"><a href="#2-前端生成（不需要后端配合）" class="headerlink" title="2. 前端生成（不需要后端配合）"></a>2. 前端生成（不需要后端配合）</h4><p>① 安装 <code>xlsx</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pnpm install xlsx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>② 新建 <code>excelConfig.js</code> 文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">XLSX</span> <span class="token keyword">from</span> <span class="token string">"xlsx"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> exc <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> exc_data <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">aoa_to_sheet</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_append_sheet</span><span class="token punctuation">(</span>exc<span class="token punctuation">,</span> exc_data<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token constant">XLSX</span><span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>exc<span class="token punctuation">,</span> filename <span class="token operator">+</span> <span class="token string">"xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ <code>Vue3</code> 中使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"download"</span><span class="token operator">&gt;</span>下载表格<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script  setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> exportExcel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./excelConfig"</span>  <span class="token keyword">const</span> exc_data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'第一列'</span><span class="token punctuation">,</span> <span class="token string">'第二列'</span> <span class="token punctuation">,</span><span class="token string">'第三列'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span> <span class="token punctuation">,</span><span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'dd'</span><span class="token punctuation">,</span> <span class="token string">'ee'</span> <span class="token punctuation">,</span><span class="token string">'ff'</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token string">'vue3导出的表格'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>exc_data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④ <code>React</code> 中使用</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>exportExcel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./excelConfig'</span><span class="token keyword">const</span> exc_data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'第一列'</span><span class="token punctuation">,</span> <span class="token string">'第二列'</span> <span class="token punctuation">,</span><span class="token string">'第三列'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span> <span class="token punctuation">,</span><span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'dd'</span><span class="token punctuation">,</span> <span class="token string">'ee'</span> <span class="token punctuation">,</span><span class="token string">'ff'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token string">'react导出表格'</span><span class="token punctuation">,</span>exc_data<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">下载</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Index<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果</strong></p><img src="/LF_blog/notes/no-063/1.png" class=""><blockquote><p><strong><font style="color:#DF2A3F;">数据量小可以，但我们是 10 万条数据，这种方法太卡了</font></strong><br>纯前端加工成表格太卡，又不能后端参与，只能前端，那前端要是能新开个线程就好，恰好前端新方法WebWorker，可以开启子线程</p></blockquote><h3 id="三、使用-Web-Worker"><a href="#三、使用-Web-Worker" class="headerlink" title="三、使用 Web Worker"></a>三、使用 Web Worker</h3><h4 id="1-Web-Worker介绍"><a href="#1-Web-Worker介绍" class="headerlink" title="1. Web Worker介绍"></a>1. Web Worker介绍</h4><ol><li><font style="color:rgb(0, 127, 255);">Web Worker 允许在主线程之外再创建一个 worker 线程，</font><strong>在主线程执行任务的同时，worker 线程也可以在后台执行它自己的任务，互不干扰。</strong></li><li><font style="color:rgb(0, 127, 255);">主线程：调用 new Worker()构造函数，新建一个 worker 线程，构造函数的参数是一个 url，生成这个 url 的方法有两种：1 脚本文件（会有两个限制）；2 字符串形式（需要</font><strong>new Blob([data])</strong><font style="color:rgb(0, 127, 255);"> 将数据转成</font><strong>二进制</strong><font style="color:rgb(0, 127, 255);">，）。</font></li><li><font style="color:rgb(0, 127, 255);">子线程：</font><strong>self.onmessage 监听</strong><font style="color:rgb(0, 127, 255);">主线程传过来的信息，</font><strong>self.postMessage 发送</strong><font style="color:rgb(0, 127, 255);">信息给主线程，self.close()worker 线程关闭自身。</font><strong>worker 线程</strong><font style="color:rgb(0, 127, 255);">能够访问一个</font><strong>全局函数 importScripts()</strong><font style="color:rgb(0, 127, 255);"> 来引入脚本，该函数接受 0 个或者多个 URL 作为参数。</font></li><li><font style="color:rgb(0, 127, 255);">因为 worker 创造了另外一个线程，不在主线程上，浏览器给设定了一些</font><strong>限制</strong><font style="color:rgb(0, 127, 255);">（无法使用：window 对象、document 对象、</font><strong>DOM 对象</strong><font style="color:rgb(0, 127, 255);">、parent 对象；可以使用：浏览器：navigator 对象、URL：location 对象 只读、发送请求：XMLHttpRequest 对象、定时器：setTimeout/setInterva、应用缓存：Application Cache）</font></li><li><font style="color:rgb(0, 127, 255);">因为主线程与 worker 线程之间的通信是</font><strong>拷贝关系</strong><font style="color:rgb(0, 127, 255);">，当需要传递一个</font><strong>巨大</strong><font style="color:rgb(0, 127, 255);">的二进制文件给 worker 线程处理时，这时候使用拷贝的方式来传递数据，无疑会造成</font><strong>性能</strong><font style="color:rgb(0, 127, 255);">问题。（幸好Web Worker 在线程之间的通信支持以二进制形式数据进行通信。）</font></li></ol><h4 id="2-在-主线程-还是-子线程-加工成表格好？"><a href="#2-在-主线程-还是-子线程-加工成表格好？" class="headerlink" title="2. 在 主线程 还是 子线程 加工成表格好？"></a>2. 在 主线程 还是 子线程 加工成表格好？</h4><h5 id="2-1-在主线程加工成表格"><a href="#2-1-在主线程加工成表格" class="headerlink" title="2.1 在主线程加工成表格"></a>2.1 在主线程加工成表格</h5><p>10万数据8秒多，20万32秒。这还没对数据加工，实际数据是需要处理的。比如修改日期格式、给收益率这种加上百分号、再比如吧某些正负数值转换成盈/亏。数据量大 ，还放在主线程循环，恭喜你，可以收获一个几十秒，啥也干不了的页面。</p><blockquote><p>主线程加工成表格，等于没做优化</p></blockquote><h5 id="2-2-那在子线程中加工成表格"><a href="#2-2-那在子线程中加工成表格" class="headerlink" title="2.2 那在子线程中加工成表格"></a>2.2 那在子线程中加工成表格</h5><p>子线程中加工成表格，会出现新的问题，他们的源码里面用到了 <code>dom</code>，而子线程里获取不到 <code>dom</code>。</p><h4 id="3-在主线程还是子线程-导出好？"><a href="#3-在主线程还是子线程-导出好？" class="headerlink" title="3. 在主线程还是子线程 导出好？"></a>3. 在主线程还是子线程 导出好？</h4><p>如果在子线程处理数据 ，处理后传递给主线程。那就会出现，<br><font style="color:#DF2A3F;">子线程传递主线程的开销（序列化 json 开销大）， 大于你直接放在主线程处理的开销，属于是负优化了</font></p><blockquote><p><strong>Web Worker 提供了一种转移数据的方式，允许主线程把二进制数据直接转移给子线程</strong><font style="color:rgb(0, 127, 255);">。这种方式比原先拷贝的方式，有巨大的性能提升。只是要</font><strong>注意</strong><font style="color:rgb(0, 127, 255);">，</font>一旦数据转移到其他线程，原先线程就无法再使用这些二进制数据了<font style="color:rgb(0, 127, 255);">，这是为了防止出现多个线程同时修改数据的麻烦局面</font></p></blockquote><h4 id="4-最终解决方案"><a href="#4-最终解决方案" class="headerlink" title="4. 最终解决方案"></a>4. 最终解决方案</h4><blockquote><p>在子线程中，获取源数据、处理要导出的数据，处理完传递给主线程，主线程接收后保存为excel文件。</p></blockquote><ol><li><strong>在子线程（worker）中，获取源数据（worker 接收 init 初始化信号并且利用 XMLHttpRequest 发送请求获取数据）</strong></li><li><strong>子线程处理组装要导出的数据</strong>（<a href="https://blog.csdn.net/qq_43717065/article/details/119830413?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=119830413&amp;sharerefer=PC&amp;sharesource=weixin_41387351&amp;sharefrom=from_link">使用exceljs导出excel表格</a>）</li><li><strong>子线程把数据传递给主线程（使用二进制数据形式【<code>原因看上述Web Worker介绍第5点</code>】，在 <code>worker</code> 线程与主线程之间进行传输 经过 excel.js 转换后的数据）</strong></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 转二进制</span>    <span class="token literal-property property">xlsxBlob</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>wbout<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'application/octet-stream'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>主线程接收 worker 线程数据，保存为excel文件（使用 file-saver 保存文件）</strong></li></ol><p>项目当中使用的为 new Blob([string])来对导出的数据进行二进制形式转换，</p><p>恰巧 <strong>file-saver</strong> 也可以使用 <strong>Blob</strong> 二进制数据形式，进行对文件的导出</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> FileSaver <span class="token keyword">from</span> <span class="token string">'file-saver'</span>worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> msgType <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>type  <span class="token keyword">switch</span> <span class="token punctuation">(</span>msgType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'success'</span><span class="token operator">:</span>      FileSaver<span class="token punctuation">.</span><span class="token function">saveAs</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>xlsxBlob<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.xlsx</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>      <span class="token comment">// ...</span>         <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">break</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Worker </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控页面卡顿，判断用户的页面是否卡主</title>
      <link href="/LF_blog/interview/no-041.html"/>
      <url>/LF_blog/interview/no-041.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>开启耗时任务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter">duration <span class="token operator">=</span> <span class="token number">1000</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token parameter">list</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>duration <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'页面卡顿时间超过100ms'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">entryTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'longtask'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/LF_blog/interview/no-041/1.gif" class=""><blockquote><p>代码说明：</p><p>const observer = new PerformanceObserver(list =&gt; { … }): 这里创建了一个性能观察器 PerformanceObserver，用于观察页面性能。当观察到 “longtask” 类型的性能条目时，会执行后续的回调函数。</p><p>observer.observe({ entryTypes: [‘longtask’] }): 这行代码启动了观察器，指定了要观察的性能条目类型为 “longtask”。长任务（long tasks）通常指在 JavaScript 主线程上执行时间较长的任务，可能会导致页面卡顿。通过监听长任务的发生，可以及时发现页面性能问题，并进行相应的优化</p><p>for (const entry of list.getEntries()) { … }: 这是一个循环，用于迭代性能观察器收集到的性能条目列表。在每次迭代中，检查条目的持续时间是否超过100毫秒。如果超过，则通过 console.log() 输出一条日志，指示页面卡顿时间超过100毫秒。</p></blockquote><blockquote><p>除了观察 “longtask” 类型的任务外，PerformanceObserver 还可以观察其他类型的任务，例如：<br><br>“frame”: 监听每个帧的时间信息，可用于测量动画的帧率和性能。<br><br>“resource”: 监听资源加载情况，包括加载时间和大小等信息。<br><br>“navigation”: 监听页面导航事件，如页面加载和重定向。<br><br>“paint”: 监听绘制事件，如首次绘制时间和首次有效绘制时间。<br><br>“mark”: 监听自定义标记事件，可以在代码中添加标记来跟踪特定操作的性能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存泄漏排查和分析技巧详解</title>
      <link href="/LF_blog/notes/no-064.html"/>
      <url>/LF_blog/notes/no-064.html</url>
      
        <content type="html"><![CDATA[<p>分配给前端页面或应用程序的内存无法被 <strong><font style="color:#DF2A3F;">垃圾回收器</font></strong> 回收。这会导致内存使用量不断增加，最后可能导致应用程序崩溃或者变得超级缓慢</p><h3 id="一、原因"><a href="#一、原因" class="headerlink" title="一、原因"></a>一、原因</h3><blockquote><p>js 对未声明变量的处理方式是在全局对象上创建该变量的引用<br><br>使用 this 创建的变量（全局作用域下的 this 的指向 window）<br><br>对于必须要使用的全局变量，在使用完将其置为 <font style="color:rgb(255, 80, 44);">null</font> ，从而触发 GC 垃圾回收</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"小林犟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"小林犟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1. 闭包"></a>1. 闭包</h4><blockquote><p>一个函数能够访问并使用其定义时所在的词法作用域（即函数定义时的作用域），即使这个函数在定义时所在的作用域已经被销毁了，这个函数仍然可以访问到它定义时所访问的变量、函数和参数。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">generateClosure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">"大伟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">innerFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> innerFn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> closure <span class="token operator">=</span> <span class="token function">generateClosure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>在执行</strong> <strong><font style="color:#DF2A3F;">closure</font></strong> <strong>函数时，闭包中存储了</strong> <strong><font style="color:#DF2A3F;">generateClosure</font></strong> <strong>的词法作用域，因此</strong> <strong><font style="color:#DF2A3F;">innerFn</font></strong> <strong>能够访问和使用</strong> <strong><font style="color:#DF2A3F;">generateClosure</font></strong> <strong>的变量</strong> <strong><font style="color:#DF2A3F;">x</font></strong> <strong>。注意，当</strong> <strong><font style="color:#DF2A3F;">generateClosure</font></strong> <strong>函数完成执行并返回</strong> <strong><font style="color:#DF2A3F;">innerFn</font></strong> <strong>时，</strong> <strong><font style="color:#DF2A3F;">generateClosure</font></strong> <strong>的词法作用域并没有被销毁，因为</strong> <strong><font style="color:#DF2A3F;">innerFn</font></strong> <strong>持有了对它的引用。</strong></p></blockquote><h4 id="2-游离的-DOM-引用"><a href="#2-游离的-DOM-引用" class="headerlink" title="2. 游离的 DOM 引用"></a>2. 游离的 DOM 引用</h4><blockquote><p>在应用程序中频繁地创建和销毁 DOM 对象，就容易导致内存泄漏<br><br>游离的 DOM 引用 指已经不在文档中的 DOM 节点的引用，但是这些引用仍然被保存在 JavaScript 的变量、数组和对象中，因此这些 DOM 节点无法被垃圾回收器回收，从而导致内存泄漏</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于 el 变量存在，el及其子元素都不能被GC</span>  el <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 虽置空了 el 变量，但由于 child 变量引用 el 的子节点，所以 el 元素依然不能被GC</span>  child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 已无变量引用，此时el可以GC</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-事件监听器未移除"><a href="#3-事件监听器未移除" class="headerlink" title="3. 事件监听器未移除"></a>3. 事件监听器未移除</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doSomething<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doSomething<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// do something</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-定时器未清理"><a href="#4-定时器未清理" class="headerlink" title="4. 定时器未清理"></a>4. 定时器未清理</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每1秒输出一个数字，共输出10次</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、怎么排查内存"><a href="#二、怎么排查内存" class="headerlink" title="二、怎么排查内存"></a>二、怎么排查内存</h3><img src="/LF_blog/notes/no-064/1.png" class=""><img src="/LF_blog/notes/no-064/2.png" class=""><img src="/LF_blog/notes/no-064/3.png" class=""><blockquote><p>字段解释：</p><ul><li><code>Constructor</code> — 占用内存的资源类型</li><li><code>Distance</code> — 当前对象到根的引用层级距离</li><li><code>Shallow Size</code> — 对象所占内存（不包含内部引用的其它对象所占的内存）(单位：字节)</li><li><code>Retained Size</code> — 对象所占总内存（包含内部引用的其它对象所占的内存）(单位：字节)</li></ul></blockquote><p><strong><font style="color:#DF2A3F;">再次切回网页，继续操作几次，然后再次生成一个快照</font></strong></p><img src="/LF_blog/notes/no-064/4.png" class=""><img src="/LF_blog/notes/no-064/5.png" class=""><img src="/LF_blog/notes/no-064/6.png" class=""><img src="/LF_blog/notes/no-064/7.png" class=""><p><strong><font style="color:#DF2A3F;">下面我们到代码里找一个内存泄漏的问题</font></strong></p><img src="/LF_blog/notes/no-064/8.png" class=""><img src="/LF_blog/notes/no-064/9.png" class="">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片批量上传</title>
      <link href="/LF_blog/notes/no-061.html"/>
      <url>/LF_blog/notes/no-061.html</url>
      
        <content type="html"><![CDATA[<img src="/LF_blog/notes/no-061/1.png" class=""><h2 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h2><blockquote><p><strong>1. 电商平台</strong></p><ul><li>商家批量上传商品图片，如不同角度的商品展示图、规格图等。</li><li>在编辑商品时上传多张图片方便商品展示，提升用户体验。</li></ul><p><strong>2. 社交媒体和内容平台</strong></p><ul><li>用户上传多张照片、视频或文件分享个人动态或相册。</li><li>在图片分享和内容管理平台中，批量上传便于用户一次性上传多张图片，提升操作便&gt;捷性。</li></ul><p><strong>3. 内容管理系统（CMS）</strong></p><ul><li>站点管理者上传多媒体资源（图片、视频、文件等）以供网站使用。</li><li>批量上传可以帮助管理员高效地更新图片库和资源库。</li></ul><p><strong>4. 企业内部管理系统</strong></p><ul><li>批量上传员工证件照、身份证扫描件等，方便快速生成档案。</li><li>上传多个项目文件（如图纸、照片等）用于项目汇报、记录等需求。</li></ul><p><strong>5. 教育平台</strong></p><ul><li>教师上传多张课件图片、讲义或作业参考材料供学生参考。</li><li>学生上传多个作业文件，如笔记、照片、实验图片等。</li></ul><p><strong>6. 房地产、旅游等行业平台</strong></p><ul><li>房地产平台上传房源照片，如房间的各个角度、社区环境等。</li><li>旅游平台上传景点照片、活动照片等，展示更丰富的视觉内容。</li></ul></blockquote><h2 id="二、难点"><a href="#二、难点" class="headerlink" title="二、难点"></a>二、难点</h2><p>批量上传的目的是提高用户上传大量文件的效率，并通过适当的并发控制避免对服务器造成负担</p><blockquote><p><strong>1. 并发控制和性能优化</strong></p><ul><li><code>并发限制</code>：批量上传如果没有控制上传并发数量，容易引发请求暴增，导致服务&gt;器负载过高，可能造成服务器响应慢甚至宕机。</li><li><code>文件大小限制</code>：大图片文件的传输时间较长，会导致上传耗时过久，影响用户体&gt;验。需要对大文件进行压缩或分片处理。</li></ul><p><strong>2. 文件预处理</strong></p><ul><li><code>图片压缩</code>：在上传前对图片进行压缩，以减少上传时间和服务器存储空间。但压&gt;缩处理会占用前端资源，可能造成卡顿。</li><li><code>格式转换</code>：不同的图片格式可能需要在上传前进行转换（如将HEIC转换为&gt;JPEG），以提高兼容性，这通常需要使用Web Worker来避免阻塞UI线程。</li></ul><p><strong>3. 上传进度管理</strong></p><ul><li><code>进度展示</code>：用户体验中实时显示上传进度是非常重要的，特别是批量上传的场&gt;景。需要管理多个图片的进度，更新UI展示上传百分比或进度条。</li><li><code>断点续传</code>：如果上传中断（如网络不稳定或中途关闭页面），需支持断点续传，&gt;以确保用户不会因一次失败重新上传所有文件。</li></ul><p><strong>4. 错误处理与重试机制</strong></p><ul><li><code>失败重试</code>：上传过程中可能遇到网络波动、请求失败、文件格式不符合等问题。&gt;批量上传需要提供合理的重试机制或失败提示，让用户选择是否重新上传。</li><li><code>错误回调</code>：批量上传涉及多个文件时，每个文件可能会遇到不同的上传错误，需&gt;要有精细的错误回调来区分错误类型并进行相应处理。</li></ul></blockquote><h2 id="三、具体的代码"><a href="#三、具体的代码" class="headerlink" title="三、具体的代码"></a>三、具体的代码</h2><h3 id="第一点优化"><a href="#第一点优化" class="headerlink" title="第一点优化"></a><font style="color:#DF2A3F;">第一点优化</font></h3><ul><li><strong>并发限制</strong>：控制同时上传的图片数量，避免服务器压力过大。</li><li><strong>文件大小限制</strong>：在上传前检查文件大小，超出限制则阻止上传。</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;el-upload      ref="uploadRef"      :http-request="customHttpRequest"      :on-change="handleFileChange"      :before-upload="beforeUpload"      :file-list="fileList"      multiple      :limit="10"      :auto-upload="false"      &gt;      &lt;el-button type="primary"&gt;批量上传图片&lt;/el-button&gt;    &lt;/el-upload&gt;    &lt;div&gt;      &lt;el-button type="primary" @click="startUpload"&gt;开始上传&lt;/el-button&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;  import { ref } from 'vue';  import { ElButton, ElUpload, ElMessage } from 'element-plus';  const fileList = ref([]);  const maxConcurrentUploads = 3; // 最大并发上传数量  const maxSizeInMB = 2; // 文件大小限制，单位：MB  let uploadQueue = [];  let currentUploads = 0;  const handleFileChange = (file, files) =&gt; {    // 将文件加入到队列中    uploadQueue.push(file);  };  // 文件大小限制检查  const beforeUpload = (file) =&gt; {    const isUnderLimit = file.size / 1024 / 1024 &lt; maxSizeInMB;    if (!isUnderLimit) {      ElMessage.error(`文件 ${file.name} 超出大小限制（最大 ${maxSizeInMB} MB）`);    }    return isUnderLimit;  };  // 控制并发上传，限制同时上传数量  const customHttpRequest = (options) =&gt; {    if (currentUploads &gt;= maxConcurrentUploads) return;    currentUploads++;    const { file, onProgress, onSuccess, onError } = options;    // 创建XMLHttpRequest并配置上传进度    const xhr = new XMLHttpRequest();    xhr.open('POST', options.action, true);    xhr.upload.onprogress = (event) =&gt; {      if (event.lengthComputable) {        const progress = (event.loaded / event.total) * 100;        onProgress({ percent: progress });      }    };    xhr.onload = () =&gt; {      currentUploads--;      processQueue();      onSuccess(xhr.response);    };    xhr.onerror = () =&gt; {      currentUploads--;      processQueue();      onError(xhr.response);    };    const formData = new FormData();    formData.append('file', file);    xhr.send(formData);  };  // 处理队列，限制同时上传数量  const processQueue = () =&gt; {    while (uploadQueue.length &gt; 0 &amp;&amp; currentUploads &lt; maxConcurrentUploads) {      const file = uploadQueue.shift();      customHttpRequest({        action: 'https://your-upload-endpoint',        file,        onProgress: (event) =&gt; console.log('progress:', event.percent),        onSuccess: () =&gt; ElMessage.success(`文件 ${file.name} 上传成功`),        onError: () =&gt; ElMessage.error(`文件 ${file.name} 上传失败`),      });    }  };  // 开始上传  const startUpload = () =&gt; {    processQueue();  };&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><strong>文件大小检查</strong>：<code>beforeUpload</code>函数会在文件加入队列前判断文件大小是否超过<code>maxSizeInMB</code>限制，如果超出则阻止上传，并给出提示信息。</li><li><strong>并发上传限制</strong>：</li><li>定义了<code>maxConcurrentUploads</code>限制同时上传的文件数量。</li><li><code>uploadQueue</code>用于保存待上传的文件队列，<code>currentUploads</code>记录当前上传中的&gt;文件数量。</li><li><code>customHttpRequest</code>是自定义的上传请求，在每次上传完毕后递减&gt;<code>currentUploads</code>，并调用<code>processQueue</code>继续处理队列中的文件。</li><li><code>processQueue</code>函数会检查<code>uploadQueue</code>并发起新的上传请求，确保不会超过并发上传限制。</li></ul></blockquote><h3 id="第二点优化"><a href="#第二点优化" class="headerlink" title="第二点优化"></a><font style="color:#DF2A3F;">第二点优化</font></h3><p>使用<code>Web Worker</code>对图片文件在上传前进行<strong>压缩</strong>和<strong>格式转换</strong>。通过<code>Web Worker</code>来处理这些耗时操作，避免主线程阻塞，提升用户体验。</p><p>创建一个<code>Web Worker</code>文件 <code>imageWorker.js</code>，用于处理图片的压缩和格式转换操作。使用<code>Canvas</code> API实现图片压缩，并将图片格式转换为<code>JPEG</code>或<code>PNG</code>等常见格式。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// imageWorker.jsself.onmessage = async function (e) {  const { file, quality, targetFormat } = e.data;  const compressImage = async (file, quality, format) =&gt; {    return new Promise((resolve) =&gt; {      const img = new Image();      img.src = URL.createObjectURL(file);      img.onload = () =&gt; {        const canvas = document.createElement('canvas');        canvas.width = img.width;        canvas.height = img.height;        const ctx = canvas.getContext('2d');        ctx.drawImage(img, 0, 0, img.width, img.height);        // 设置格式和质量，转换图片        canvas.toBlob(          (blob) =&gt; {            const compressedFile = new File([blob], file.name, {              type: `image/${format}`,              lastModified: Date.now(),            });            resolve(compressedFile);          },          `image/${format}`,          quality        );      };    });  };  // 调用压缩方法  const processedFile = await compressImage(file, quality, targetFormat);  self.postMessage(processedFile);};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vue 组件中使用 Web Worker 进行图片预处理</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;el-upload      ref="uploadRef"      :http-request="customHttpRequest"      :on-change="handleFileChange"      :before-upload="beforeUpload"      :file-list="fileList"      multiple      :limit="10"      :auto-upload="false"    &gt;      &lt;el-button type="primary"&gt;批量上传图片&lt;/el-button&gt;    &lt;/el-upload&gt;    &lt;div&gt;      &lt;el-button type="primary" @click="startUpload"&gt;开始上传&lt;/el-button&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import { ref, onMounted, onUnmounted } from 'vue';import { ElMessage } from 'element-plus';const fileList = ref([]);const maxConcurrentUploads = 3; // 最大并发上传数let uploadQueue = [];let currentUploads = 0;let worker;const handleFileChange = (file, files) =&gt; {  uploadQueue.push(file);};// 初始化 Web WorkeronMounted(() =&gt; {  worker = new Worker(new URL('./imageWorker.js', import.meta.url));});onUnmounted(() =&gt; {  if (worker) worker.terminate();});// 图片预处理，压缩和格式转换const beforeUpload = (file) =&gt; {  return new Promise((resolve) =&gt; {    worker.postMessage({      file,      quality: 0.7, // 图片压缩质量，0到1之间      targetFormat: 'jpeg', // 目标格式，可以是 'jpeg' 或 'png'    });    // 监听 Web Worker 返回的压缩文件    worker.onmessage = (e) =&gt; {      const processedFile = e.data;      resolve(processedFile); // 返回压缩后的文件    };  });};// 自定义上传请求，限制并发数量const customHttpRequest = (options) =&gt; {  if (currentUploads &gt;= maxConcurrentUploads) return;  currentUploads++;  const { file, onProgress, onSuccess, onError } = options;  const xhr = new XMLHttpRequest();  xhr.open('POST', options.action, true);  xhr.upload.onprogress = (event) =&gt; {    if (event.lengthComputable) {      const progress = (event.loaded / event.total) * 100;      onProgress({ percent: progress });    }  };  xhr.onload = () =&gt; {    currentUploads--;    processQueue();    onSuccess(xhr.response);  };  xhr.onerror = () =&gt; {    currentUploads--;    processQueue();    onError(xhr.response);  };  const formData = new FormData();  formData.append('file', file);  xhr.send(formData);};// 处理队列，限制同时上传数量const processQueue = () =&gt; {  while (uploadQueue.length &gt; 0 &amp;&amp; currentUploads &lt; maxConcurrentUploads) {    const file = uploadQueue.shift();    customHttpRequest({      action: 'https://your-upload-endpoint',      file,      onProgress: (event) =&gt; console.log('progress:', event.percent),      onSuccess: () =&gt; ElMessage.success(`文件 ${file.name} 上传成功`),      onError: () =&gt; ElMessage.error(`文件 ${file.name} 上传失败`),    });  }};// 开始上传const startUpload = () =&gt; {  processQueue();};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><strong>Web Worker压缩和格式转换</strong>：<code>imageWorker.js</code>文件中，使用<code>Canvas</code> API&gt;压缩图片并转换格式，通过<code>postMessage</code>返回处理后的文件。</li><li><code>compressImage</code>函数将图片绘制到<code>Canvas</code>上，并将其转换为指定的格式和质量。</li><li><strong>Vue组件中使用 Web Worker</strong>：</li><li>在<code>beforeUpload</code>钩子中，图片会传入<code>Web Worker</code>进行预处理（压缩和格式转&gt;换）。</li><li><code>worker.onmessage</code>监听预处理完成后的文件，并将其加入到上传队列。</li><li><strong>自定义上传和并发控制</strong>：通过<code>customHttpRequest</code>和<code>processQueue</code>方法，&gt;控制同时上传的数量，确保不会超出<code>maxConcurrentUploads</code>的限制。</li></ul></blockquote><h3 id="第三点优化"><a href="#第三点优化" class="headerlink" title="第三点优化"></a><font style="color:#DF2A3F;">第三点优化</font></h3><p>实现<strong>上传进度管理的UI展示</strong>、<strong>断点续传</strong>和<strong>多文件进度管理</strong>，我们可以做以下几项优化：</p><ol><li><strong>上传进度展示：</strong><font style="color:#DF2A3F;">为每张图片添加进度条，实时显示上传进度。</font></li><li><strong>断点续传：</strong><font style="color:#DF2A3F;">对已上传的数据做断点标记，当上传中断时可以从中断的部分继续上传。</font></li><li><strong>多文件进度管理：</strong><font style="color:#DF2A3F;">管理每个文件的上传进度状态，并在UI上展示。</font></li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;el-upload      ref="uploadRef"      :http-request="customHttpRequest"      :on-change="handleFileChange"      :before-upload="beforeUpload"      :file-list="fileList"      multiple      :auto-upload="false"    &gt;      &lt;el-button type="primary"&gt;批量上传图片&lt;/el-button&gt;    &lt;/el-upload&gt;    &lt;div&gt;      &lt;el-button type="primary" @click="startUpload"&gt;开始上传&lt;/el-button&gt;    &lt;/div&gt;    &lt;div v-for="(file, index) in uploadStatus" :key="file.uid" class="upload-item"&gt;      &lt;span&gt;{{ file.name }}&lt;/span&gt;      &lt;el-progress :percentage="file.progress" v-if="file.status === 'uploading'" /&gt;      &lt;span v-if="file.status === 'completed'"&gt;上传完成&lt;/span&gt;      &lt;span v-if="file.status === 'failed'"&gt;上传失败&lt;/span&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import { ref, onMounted, onUnmounted } from 'vue';import { ElMessage } from 'element-plus';const fileList = ref([]);const uploadStatus = ref([]);const maxConcurrentUploads = 3; // 最大并发上传数let uploadQueue = [];let currentUploads = 0;let worker;const handleFileChange = (file) =&gt; {  uploadQueue.push(file);  uploadStatus.value.push({    uid: file.uid,    name: file.name,    progress: 0,    status: 'pending',  });};// 文件预处理，压缩和格式转换const beforeUpload = (file) =&gt; {  return new Promise((resolve) =&gt; {    worker.postMessage({      file,      quality: 0.7,      targetFormat: 'jpeg',    });    worker.onmessage = (e) =&gt; {      const processedFile = e.data;      resolve(processedFile);    };  });};// 自定义上传请求，限制并发数量，支持断点续传const customHttpRequest = (options) =&gt; {  if (currentUploads &gt;= maxConcurrentUploads) return;  currentUploads++;  const { file, onProgress, onSuccess, onError } = options;  const storedProgress = localStorage.getItem(`upload-progress-${file.uid}`) || 0;  let uploadedBytes = parseInt(storedProgress, 10);  // 上传进度更新  const updateProgress = (event) =&gt; {    const progress = ((uploadedBytes + event.loaded) / file.size) * 100;    const fileStatus = uploadStatus.value.find((item) =&gt; item.uid === file.uid);    if (fileStatus) fileStatus.progress = progress;    onProgress({ percent: progress });    localStorage.setItem(`upload-progress-${file.uid}`, uploadedBytes + event.loaded);  };  // 自定义分块上传实现断点续传  const chunkSize = 1024 * 1024; // 1MB的分块大小  const totalChunks = Math.ceil(file.size / chunkSize);  let currentChunk = Math.floor(uploadedBytes / chunkSize);  const uploadChunk = () =&gt; {    if (currentChunk &gt;= totalChunks) {      localStorage.removeItem(`upload-progress-${file.uid}`);      currentUploads--;      processQueue();      onSuccess();      const fileStatus = uploadStatus.value.find((item) =&gt; item.uid === file.uid);      if (fileStatus) fileStatus.status = 'completed';      return;    }    const start = currentChunk * chunkSize;    const end = Math.min(start + chunkSize, file.size);    const chunk = file.slice(start, end);    const formData = new FormData();    formData.append('file', chunk);    formData.append('filename', file.name);    formData.append('chunkNumber', currentChunk);    formData.append('totalChunks', totalChunks);    const xhr = new XMLHttpRequest();    xhr.open('POST', options.action, true);    xhr.upload.onprogress = updateProgress;    xhr.onload = () =&gt; {      uploadedBytes += chunk.size;      currentChunk++;      uploadChunk();    };    xhr.onerror = () =&gt; {      currentUploads--;      const fileStatus = uploadStatus.value.find((item) =&gt; item.uid === file.uid);      if (fileStatus) fileStatus.status = 'failed';      onError();    };    xhr.send(formData);  };  uploadChunk();};// 处理队列，限制同时上传数量const processQueue = () =&gt; {  while (uploadQueue.length &gt; 0 &amp;&amp; currentUploads &lt; maxConcurrentUploads) {    const file = uploadQueue.shift();    const fileStatus = uploadStatus.value.find((item) =&gt; item.uid === file.uid);    if (fileStatus) fileStatus.status = 'uploading';    customHttpRequest({      action: 'https://your-upload-endpoint',      file,      onProgress: (event) =&gt; console.log('progress:', event.percent),      onSuccess: () =&gt; ElMessage.success(`文件 ${file.name} 上传成功`),      onError: () =&gt; ElMessage.error(`文件 ${file.name} 上传失败`),    });  }};// 开始上传const startUpload = () =&gt; {  processQueue();};// 初始化 Web WorkeronMounted(() =&gt; {  worker = new Worker(new URL('./imageWorker.js', import.meta.url));});onUnmounted(() =&gt; {  if (worker) worker.terminate();});&lt;/script&gt;&lt;style&gt;.upload-item {  display: flex;  align-items: center;  margin-top: 10px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><strong>断点续传</strong>：我们将每个文件按1MB大小分块上传。<code>localStorage</code>中记录上传进&gt;度，当网络中断或页面关闭后，可以从最后一次成功上传的分块继续。</li><li><code>customHttpRequest</code>方法根据存储的进度决定从哪个分块开始上传。</li><li>每完成一块上传，更新<code>uploadedBytes</code>并保存到<code>localStorage</code>中，以便下次继&gt;续上传。</li><li><strong>上传进度管理</strong>：</li><li><code>uploadStatus</code>数组用于跟踪每个文件的上传状态和进度。</li><li>每次分块上传进度通过<code>onProgress</code>事件更新。</li><li>通过<code>el-progress</code>展示每个文件的上传进度，更新UI。</li><li><strong>错误处理</strong>：</li><li>如果某个分块上传失败，标记为<code>failed</code>并展示在UI中，用户可以选择手动重试。</li></ul></blockquote><h3 id="第四点优化"><a href="#第四点优化" class="headerlink" title="第四点优化"></a><font style="color:#DF2A3F;">第四点优化</font></h3><ul><li><strong>错误提示：</strong><font style="color:#DF2A3F;">为每个文件记录错误信息并展示在UI上。</font></li><li><strong>错误分类和重试：</strong><font style="color:#DF2A3F;">实现精细化的错误回调，通过<code>retryCount</code>控制每个文件的重试次数。如果超过最大重试次数，则提供手动重试选项。</font></li><li><strong>重试按钮：</strong><font style="color:#DF2A3F;">在上传失败的文件上显示“重试”按钮，让用户在手动点击时可以重新上传该文件。</font></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;el-upload      ref="uploadRef"      :http-request="customHttpRequest"      :on-change="handleFileChange"      :before-upload="beforeUpload"      :file-list="fileList"      multiple      :auto-upload="false"    &gt;      &lt;el-button type="primary"&gt;批量上传图片&lt;/el-button&gt;    &lt;/el-upload&gt;    &lt;div&gt;      &lt;el-button type="primary" @click="startUpload"&gt;开始上传&lt;/el-button&gt;    &lt;/div&gt;    &lt;div v-for="(file, index) in uploadStatus" :key="file.uid" class="upload-item"&gt;      &lt;span&gt;{{ file.name }}&lt;/span&gt;      &lt;el-progress :percentage="file.progress" v-if="file.status === 'uploading'" /&gt;      &lt;span v-if="file.status === 'completed'"&gt;上传完成&lt;/span&gt;      &lt;span v-if="file.status === 'failed'" class="error-message"&gt;        上传失败：{{ file.error }}&amp;nbsp;        &lt;el-button type="text" @click="retryUpload(file)"&gt;重试&lt;/el-button&gt;      &lt;/span&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import { ref, onMounted, onUnmounted } from 'vue';import { ElMessage } from 'element-plus';const fileList = ref([]);const uploadStatus = ref([]);const maxConcurrentUploads = 3;const maxRetries = 3; // 最大重试次数let uploadQueue = [];let currentUploads = 0;let worker;const handleFileChange = (file) =&gt; {  uploadQueue.push(file);  uploadStatus.value.push({    uid: file.uid,    name: file.name,    progress: 0,    status: 'pending',    error: null,    retryCount: 0,  });};const beforeUpload = (file) =&gt; {  return new Promise((resolve) =&gt; {    worker.postMessage({      file,      quality: 0.7,      targetFormat: 'jpeg',    });    worker.onmessage = (e) =&gt; {      const processedFile = e.data;      resolve(processedFile);    };  });};// 自定义上传请求，限制并发数量，支持断点续传和错误处理const customHttpRequest = (options) =&gt; {  if (currentUploads &gt;= maxConcurrentUploads) return;  currentUploads++;  const { file, onProgress, onSuccess, onError } = options;  const storedProgress = localStorage.getItem(`upload-progress-${file.uid}`) || 0;  let uploadedBytes = parseInt(storedProgress, 10);  // 上传进度更新  const updateProgress = (event) =&gt; {    const progress = ((uploadedBytes + event.loaded) / file.size) * 100;    const fileStatus = uploadStatus.value.find((item) =&gt; item.uid === file.uid);    if (fileStatus) fileStatus.progress = progress;    onProgress({ percent: progress });    localStorage.setItem(`upload-progress-${file.uid}`, uploadedBytes + event.loaded);  };  // 自定义分块上传实现断点续传  const chunkSize = 1024 * 1024; // 1MB的分块大小  const totalChunks = Math.ceil(file.size / chunkSize);  let currentChunk = Math.floor(uploadedBytes / chunkSize);  const uploadChunk = () =&gt; {    if (currentChunk &gt;= totalChunks) {      localStorage.removeItem(`upload-progress-${file.uid}`);      currentUploads--;      processQueue();      onSuccess();      const fileStatus = uploadStatus.value.find((item) =&gt; item.uid === file.uid);      if (fileStatus) {        fileStatus.status = 'completed';        fileStatus.error = null;      }      return;    }    const start = currentChunk * chunkSize;    const end = Math.min(start + chunkSize, file.size);    const chunk = file.slice(start, end);    const formData = new FormData();    formData.append('file', chunk);    formData.append('filename', file.name);    formData.append('chunkNumber', currentChunk);    formData.append('totalChunks', totalChunks);    const xhr = new XMLHttpRequest();    xhr.open('POST', options.action, true);    xhr.upload.onprogress = updateProgress;    xhr.onload = () =&gt; {      uploadedBytes += chunk.size;      currentChunk++;      uploadChunk();    };    xhr.onerror = () =&gt; handleUploadError(file);    xhr.send(formData);  };  uploadChunk();};// 处理上传错误，重试或记录错误const handleUploadError = (file) =&gt; {  const fileStatus = uploadStatus.value.find((item) =&gt; item.uid === file.uid);  if (fileStatus.retryCount &lt; maxRetries) {    fileStatus.retryCount++;    ElMessage.warning(`文件 ${file.name} 上传失败，重试第 ${fileStatus.retryCount} 次`);    customHttpRequest({      action: 'https://your-upload-endpoint',      file,      onProgress: (event) =&gt; console.log('progress:', event.percent),      onSuccess: () =&gt; ElMessage.success(`文件 ${file.name} 上传成功`),      onError: () =&gt; handleUploadError(file),    });  } else {    fileStatus.status = 'failed';    fileStatus.error = '网络错误或服务器问题，上传失败';    ElMessage.error(`文件 ${file.name} 上传失败，请检查网络或稍后重试`);  }};// 重试上传const retryUpload = (file) =&gt; {  const fileStatus = uploadStatus.value.find((item) =&gt; item.uid === file.uid);  fileStatus.retryCount = 0;  fileStatus.status = 'uploading';  fileStatus.error = null;  customHttpRequest({    action: 'https://your-upload-endpoint',    file,    onProgress: (event) =&gt; console.log('progress:', event.percent),    onSuccess: () =&gt; ElMessage.success(`文件 ${file.name} 上传成功`),    onError: () =&gt; handleUploadError(file),  });};// 处理队列，限制同时上传数量const processQueue = () =&gt; {  while (uploadQueue.length &gt; 0 &amp;&amp; currentUploads &lt; maxConcurrentUploads) {    const file = uploadQueue.shift();    const fileStatus = uploadStatus.value.find((item) =&gt; item.uid === file.uid);    if (fileStatus) fileStatus.status = 'uploading';    customHttpRequest({      action: 'https://your-upload-endpoint',      file,      onProgress: (event) =&gt; console.log('progress:', event.percent),      onSuccess: () =&gt; ElMessage.success(`文件 ${file.name} 上传成功`),      onError: () =&gt; handleUploadError(file),    });  }};// 开始上传const startUpload = () =&gt; {  processQueue();};// 初始化 Web WorkeronMounted(() =&gt; {  worker = new Worker(new URL('./imageWorker.js', import.meta.url));});onUnmounted(() =&gt; {  if (worker) worker.terminate();});&lt;/script&gt;&lt;style&gt;.upload-item {  display: flex;  align-items: center;  margin-top: 10px;}.error-message {  color: red;  font-weight: bold;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><strong>错误处理和重试逻辑</strong>：<ul><li><code>handleUploadError</code> 方法对上传失败的文件进行错误处理。若<code>retryCount</code>小于<code>maxRetries</code>，则自动重试。</li><li>超过最大重试次数时，将文件状态更新为<code>failed</code>并记录错误信息。</li></ul></li><li><strong>重试按钮</strong>：<ul><li>在文件状态为<code>failed</code>时，显示“重试”按钮，用户可手动点击重新上传。</li><li><code>retryUpload</code> 方法重置重试次数，并重新调用<code>customHttpRequest</code>来重新上传失败文件。</li></ul></li><li><strong>上传进度和状态管理</strong>：<ul><li>每个文件的状态在<code>uploadStatus</code>中管理，状态包括<code>pending</code>、<code>uploading</code>、<code>completed</code>和<code>failed</code>，UI根据状态更新显示。</li></ul></li><li><strong>精细的错误信息展示</strong>：<ul><li>每个文件错误类型独立记录并展示在UI中，避免因多个文件错误导致混淆。</li></ul></li></ol></blockquote><p>这样可以更好地支持批量上传过程中各个文件的精细管理、进度监控以及错误处理。</p><h2 id="四、node后端接口服务"><a href="#四、node后端接口服务" class="headerlink" title="四、node后端接口服务"></a>四、node后端接口服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> koa-file-upload-demo<span class="token builtin class-name">cd</span> koa-file-upload-demo<span class="token function">npm</span> init <span class="token parameter variable">-y</span><span class="token function">pnpm</span> <span class="token function">install</span> koa koa-router koa-body fs-extra<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在项目文件夹中创建 <code>app.js</code> 文件并添加以下代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app.js</span><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> koaBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs-extra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">UPLOAD_DIR</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'uploads'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上传文件存储目录</span>fs<span class="token punctuation">.</span><span class="token function">ensureDirSync</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_DIR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保上传目录存在</span><span class="token comment">// 合并分块文件</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mergeChunks</span><span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span> totalChunks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_DIR</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> chunkDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_DIR</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_chunks</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">ensureFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保目标文件存在</span>  <span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> totalChunks<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> chunkPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>chunkDir<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-chunk-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>chunkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>chunkPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清理分块文件</span>  <span class="token punctuation">}</span>  writeStream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span>chunkDir<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除分块文件夹</span><span class="token punctuation">}</span><span class="token comment">// 文件上传接口</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> <span class="token function">koaBody</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">multipart</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> chunkNumber<span class="token punctuation">,</span> totalChunks<span class="token punctuation">,</span> filename <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>  <span class="token keyword">const</span> file <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">;</span>  <span class="token keyword">const</span> chunkDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_DIR</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_chunks</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">ensureDir</span><span class="token punctuation">(</span>chunkDir<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确保分块目录存在</span>  <span class="token comment">// 将文件分块存储在指定目录下</span>  <span class="token keyword">const</span> chunkPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>chunkDir<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-chunk-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chunkNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">,</span> chunkPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 当所有分块上传完毕后进行合并</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>chunkNumber<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>totalChunks<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">mergeChunks</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> totalChunks<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'File upload complete'</span><span class="token punctuation">,</span> <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/uploads/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Chunk </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chunkNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> uploaded</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 静态文件服务</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/uploads/:filename'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_DIR</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>params<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attachment; filename=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>params<span class="token punctuation">.</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'File not found'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server running on http://localhost:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><strong>合并分块</strong>：<ul><li><code>mergeChunks</code> 方法将所有上传的分块按照顺序合并成完整的文件。</li><li>合并后删除临时的分块文件和分块目录。</li></ul></li><li><strong>文件上传</strong>：<ul><li><code>/upload</code> 路由接收文件分块上传请求，处理 <code>chunkNumber</code> 和 <code>totalChunks</code> 信息。</li><li>每个分块被存储在一个临时文件夹中，命名格式为 <code>${filename}_chunks</code>。</li><li>每上传一个分块后，后端会返回上传的分块编号。如果检测到当前分块是最后一个分块，后端将调用 <code>mergeChunks</code> 方法进行文件合并。</li></ul></li><li><strong>静态文件服务</strong>：<ul><li><code>/uploads/:filename</code> 路由用于访问上传后的文件，可用于测试文件是否上传成功。</li></ul></li></ol></blockquote><p>在终端中运行以下命令启动服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> app.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>服务器启动后，访问 <code>http://localhost:3000</code>，<br><br>前端代码中的上传接口地址设置为 <code>http://localhost:3000/upload</code>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何防止录屏截图等恶意下载行为</title>
      <link href="/LF_blog/notes/no-027.html"/>
      <url>/LF_blog/notes/no-027.html</url>
      
        <content type="html"><![CDATA[<p>比如视频网站：优酷，爱奇艺 ，课程网站播放课程视频的时候，用屏幕录制软件录制视频区域会显示一片漆黑 (如下图)</p><img src="/LF_blog/notes/no-027/1.gif" class=""><p>传统的方式： 针对视频和dom添加水印</p><p>更高级的玩法！ </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Encrypted_Media_Extensions_API">https://developer.mozilla.org/zh-CN/docs/Web/API/Encrypted_Media_Extensions_API</a></p><blockquote><p>Encrypted Media Extensions（EME）API是一个用于播放加密媒体内容的接口，其目的是通过内容加密保护版权，用户录屏后将会是黑屏。<br><br>EME主要提供了一个系统来导航需要支持DRM（Digital Rights Management，数字权利管理）的内容。它允许JavaScript与DRM服务器进行交互，获取许可证和解密密钥，然后将这些信息提供给浏览器的解密模块来解密和播放内容。</p></blockquote><p>下面是一个使用EME如何播放加密视频的基础例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建媒体元素</span><span class="token keyword">const</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>video<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置媒体源</span><span class="token keyword">const</span> mediaSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>video<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>mediaSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当媒体源打开时，添加源缓冲区</span>mediaSource<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'sourceopen'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> sourceBuffer <span class="token operator">=</span> mediaSource<span class="token punctuation">.</span><span class="token function">addSourceBuffer</span><span class="token punctuation">(</span><span class="token string">'video/webm; codecs="opus,vp09.00.10.08"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在获取许可证和解密密钥后，将加密的视频数据添加到源缓冲区</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'your_encrypted_video.webm'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      sourceBuffer<span class="token punctuation">.</span><span class="token function">appendBuffer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置媒体键系统访问</span>navigator<span class="token punctuation">.</span><span class="token function">requestMediaKeySystemAccess</span><span class="token punctuation">(</span><span class="token string">'org.w3.clearkey'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  <span class="token literal-property property">initDataTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'keyids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">videoCapabilities</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">'video/webm; codecs="vp09.00.10.08"'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mediaKeySystemAccess</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> mediaKeySystemAccess<span class="token punctuation">.</span><span class="token function">createMediaKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mediaKeys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 设定用于解密的媒体密钥</span>  video<span class="token punctuation">.</span><span class="token function">setMediaKeys</span><span class="token punctuation">(</span>mediaKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个keySession，它将用于获取许可证和解密密钥</span>  <span class="token keyword">const</span> keySession <span class="token operator">=</span> mediaKeys<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 监听message事件以获取解密密钥</span>  keySession<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// fetch许可证和解密密钥</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'your_license_and_key_url'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>      <span class="token literal-property property">body</span><span class="token operator">:</span> e<span class="token punctuation">.</span>message    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      keySession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  keySession<span class="token punctuation">.</span><span class="token function">generateRequest</span><span class="token punctuation">(</span><span class="token string">'keyids'</span><span class="token punctuation">,</span> your_init_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，首先创建并设置了一个<code>&lt;video&gt;</code>元素和一个MediaSource对象。然后，再获取到许可证和解密密钥之后，将加密的视频数据添加到MediaSource的源缓冲区中。这使得浏览器能够解密并播放视频。请注意，这只是一个简化的例子，并假设视频是以WebM格式进行加密，并使用Clear Key加密系统（一个简单的现实世界的加密系统）。</p><p>实际上，使用EME API会涉及到大量的细节和更复杂的步骤，例如媒体数据初始化、处理多种加密密钥、处理各种错误等。此外，如何获取许可证和解密密钥以及如何处理许可证更新等，是由DRM系统和服务提供商决定的，需要根据具体的业务需求来实现。</p><h4 id="法律声明和用户协议"><a href="#法律声明和用户协议" class="headerlink" title="法律声明和用户协议"></a>法律声明和用户协议</h4><p>明确告知用户关于内容的版权信息及禁止未经许可的截屏录屏行为，并在用户注册或使用服务前获得同意。虽然这不能从技术上阻止截屏，但可以在法律层面上提供一定的保护。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包管理工具的发展以及 pnpm 依赖治理的最佳实践</title>
      <link href="/LF_blog/notes/no-058.html"/>
      <url>/LF_blog/notes/no-058.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>目前在前端领域最流行的包管理工具包含了 npm、yarn、pnpm，其中 pnpm 的机制对 yarn 和 npm 堪称降维打击，它通过软硬链接依赖的方式实现了快速安装、去除幽灵依赖，当下各种类库、组件库的最佳实践方案也基本都是 pnpm + monorepo。由于我所在的团队也使用了 pnpm 作为包管理工具，因此想通过一篇分享将 pnpm 从头至尾了解清楚。</p></blockquote><p>先来说说通过这篇文章能学到什么：</p><ol><li>包管理工具的发展历程与 pnpm 的脱颖而出</li><li>pnpm 的优势及核心实现原理——软硬链接</li><li>产生幽灵依赖的根本原因探究</li><li>pnpm 项目的依赖治理方案</li></ol><h2 id="一、包管理工具的历史"><a href="#一、包管理工具的历史" class="headerlink" title="一、包管理工具的历史"></a>一、包管理工具的历史</h2><h3 id="1-npm-的诞生"><a href="#1-npm-的诞生" class="headerlink" title="1. npm 的诞生"></a>1. npm 的诞生</h3><p>随着 Node.js 的推出，开发者需要一种管理众多 JavaScript 库和模块的方法，npm（Node Package Manager）由此诞生。</p><p>npm 于2010年被引入，很快成为 Node.js 生态系统中分享和管理模块的标准方式。其中 node_modules 目录就是npm用来局部安装依赖的地方，使得不同的项目可以使用不同版本的包，而不会互相干扰。随着时间的推移，npm 还成为了一个庞大的开源库生态系统，目前已是世界上最大的软件注册机构。</p><p>然而，随着 npm 的快速成长，一些问题也随之而来，比如 node_modules 随着依赖的嵌套，体积越来越大。</p><h3 id="2-npm-的嵌套依赖模型"><a href="#2-npm-的嵌套依赖模型" class="headerlink" title="2. npm 的嵌套依赖模型"></a>2. npm 的嵌套依赖模型</h3><p>在 npm2 及以前，每个包会将其依赖安装在自己的 node_modules 目录下，这意味着每个依赖也会带上自己的依赖，形成一个嵌套的结构，结构如下：<img src="/LF_blog/notes/no-058/1718767356183-8bc749f7-fe9f-4a2b-8595-e3b5d6728452-989221.png" class=""></p><p>这样的结构虽然解决了版本冲突、依赖隔离等问题，但却有几个致命的缺点：</p><ul><li><strong>磁盘空间占用</strong>：每个依赖都会安装自己的依赖，导致了大量的重复，特别是在多个包共享同一依赖的场景下。</li><li><strong>深层嵌套问题</strong>：这种嵌套结构在文件系统中造成了非常长的路径，然而大多数 Windows 工具、实用程序和 shell 最多只能处理长达 260 个字符的文件和文件夹路径。一旦超过，安装脚本就会开始出错，而且无法再使用常规方法删除 node_modules 文件夹。相关 issue：<a href="https://github.com/nodejs/node-v0.x-archive/issues/6960">github.com/nodejs/node…</a></li><li><strong>安装和更新缓慢</strong>：每次安装或更新依赖时，npm 需要处理和解析整个依赖树，过程非常缓慢。</li></ul><p>在此附上一张梗图🫰：<img src="/LF_blog/notes/no-058/1718767382178-5b437289-7af1-4d0b-96de-01c01fef1b0a-979499.png" class=""></p><h3 id="3-npm3-架构升级"><a href="#3-npm3-架构升级" class="headerlink" title="3. npm3 架构升级"></a>3. npm3 架构升级</h3><p>为解决这些问题，npm 在第三个版本进行了重构：<a href="https://github.com/npm/npm/releases/tag/v3.0.0">github.com/npm/npm/rel…</a></p><p>通过将依赖扁平化，尽可能地减少了重复的包版本，有效减少了<strong>项目的总体积</strong>，同时也避免了 npm 早期的<strong>深层嵌套</strong>问题。</p><p>扁平化结构如下：<img src="/LF_blog/notes/no-058/1718767464983-83d97e2f-f2a7-4ba1-8e19-2c253a31b699-721299.png" class=""></p><p>可以看到还是会有一定可能产生嵌套问题，因为根目录只能存放某个包的一个版本。</p><h3 id="4-yarn-的出现"><a href="#4-yarn-的出现" class="headerlink" title="4. yarn 的出现"></a>4. yarn 的出现</h3><p>yarn 的出现是为了解决 npm 当时存在的一些问题，它由 Facebook、Google、Exponent 和 Tilde 共同开发，于2016年发布，旨在提供一个更快、更安全的 JavaScript 包管理工具。</p><p>yarn 的特点：</p><ul><li><strong>性能提升</strong>：yarn 在发布之初就强调了性能优势，特别是在安装依赖时。它通过并行安装依赖和缓存已下载的包来加速这一过程，减少了安装时间。</li><li><strong>更好的依赖管理</strong>：yarn 引入了 yarn.lock 文件，这个锁文件确保了依赖的一致性。无论是在哪个环境下运行yarn install，都能确保安装相同版本的依赖，解决了因版本不匹配导致的问题。</li><li><strong>更好的安全性</strong>：yarn 通过检查安装的每个包的许可证，并提供了一种机制来限制或拒绝具有不安全许可证的包的安装，增强了项目的安全性。</li></ul><p>有趣的是，在 yarn 发布后，npm 官方博客于当天恭喜了 yarn 的开源：<a href="https://blog.npmjs.org/post/151660845210/hello-yarn">Hello, Yarn!</a>。</p><img src="/LF_blog/notes/no-058/1718767494334-89455b43-22d3-4bf8-97f9-78a5a301d872-820422.png" class=""><p>可以看到当大公司参与开源项目时，社区可能会对其意图表示焦虑，但是 yarn 选择了默认发布到 npm 的注册表，意味着 yarn 用户仍然是现有 npm 社区的一部分。这或许就是开源的魅力所在吧！🫡</p><h3 id="5-仍然存在的问题"><a href="#5-仍然存在的问题" class="headerlink" title="5. 仍然存在的问题"></a>5. 仍然存在的问题</h3><p>其实扁平化的结构还是存在一些问题的，那就是幽灵依赖。</p><p>我们假设 B 并没有在 package.json 中注册，但由于 A 依赖 B，B会被提取到 node_moduls 顶层，那么在项目中就可以直接引用 B，这就是幽灵依赖，当 A 出现一些变动时（升级、删除），会导致出现几个问题：</p><ul><li><strong>环境不一致</strong>：由于该模块未在 package.json 文件中声明，当在其他环境（如测试、生产环境或者其他人的开发环境）中部署应用时将无法知道需要包含那些模块。这将导致环境之间存在不一致，可能会导致在其他环境中运行时出现错误。</li><li><strong>版本控制问题</strong>：由于未明确声明依赖，可能会出现不同环境中使用的模块版本不一致的问题。这可能导致某些功能在某些环境中无法正常工作，或者出现不可预见的行为。</li><li><strong>代码可读性和可维护性降低</strong>：开发人员无法清楚地了解应用程序的依赖项，导致代码理解困难。</li></ul><p>而 pnpm 就是为了解决这个问题而出现的。</p><h2 id="二、pnpm-横空出世"><a href="#二、pnpm-横空出世" class="headerlink" title="二、pnpm 横空出世"></a>二、pnpm 横空出世</h2><p>pnpm（performant npm）旨在解决 npm 和 yarn 在某些方面存在的效率和存储问题，同时通过引入一种独特的链接方式有效地解决了大部分幽灵依赖的问题。</p><img src="/LF_blog/notes/no-058/1718767509143-0ace7370-775f-48e1-a29c-0d0c16ba358f-742258.png" class=""><h3 id="1-硬链接和软链接（符号链接）"><a href="#1-硬链接和软链接（符号链接）" class="headerlink" title="1. 硬链接和软链接（符号链接）"></a>1. 硬链接和软链接（符号链接）</h3><p>在了解 pnpm 具体机制之前，我们先了解一下硬链接和软链接（符号链接）的概念：</p><ul><li>硬链接（Hard Link）<ul><li>概念：硬链接是文件系统中的一个链接，它指向磁盘上的数据。当创建一个硬链接时，实际上是在创建一个和原始文件相同的入口点，但是不占用额外的磁盘空间。这个新的链接和原始文件共享相同的数据块，任何一个文件的修改都会反映在另一个上。</li><li>特点：硬链接不能跨文件系统创建，也不能用于链接目录，但如果原始文件被删除，硬链接依然可以访问数据。</li><li>使用场景：当你想要在不同位置访问同一个文件内容，而又不想占用额外磁盘空间时，可以使用硬链接。比如，在多个项目中共享相同的库文件，但不需要复制这个文件多份。</li></ul></li><li>软链接（符号链接，Symbolic Link）<ul><li>概念：软链接是一个特殊类型的文件，它包含了另一个文件的路径。类似于 Windows 系统中的快捷方式。与硬链接不同，软链接可以指向目录，也可以跨文件系统。</li><li>特点：软链接指向文件或目录的路径，如果原始文件被删除，软链接就会失效，因为它的指向已经不存在了。</li><li>使用场景：软链接适用于需要引用特定位置的文件或目录时，特别是当这些文件或目录可能会移动或变化时。它允许链接到另一个文件系统中的文件或目录。</li></ul></li></ul><h3 id="2-pnpm-中的硬软链接应用"><a href="#2-pnpm-中的硬软链接应用" class="headerlink" title="2. pnpm 中的硬软链接应用"></a>2. pnpm 中的硬软链接应用</h3><h4 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h4><p>pnpm 通过使用全局的 .pnpm-store 来存储下载的包，使用硬链接来重用存储在全局存储中的包文件，这样不同项目中相同的包无需重复下载，节约磁盘空间。</p><img src="/LF_blog/notes/no-058/1718767518628-374a5527-d4b1-4352-b8a2-ba2f01261cb3-671509.png" class=""><h4 id="软链接（符号链接）"><a href="#软链接（符号链接）" class="headerlink" title="软链接（符号链接）"></a>软链接（符号链接）</h4><p>pnpm 将各类包的不同版本平铺在 node_modules/.pnpm 下，对于那些需要构建的包，它使用符号链接连接到存储在项目中的实际位置。这种方式使得包的安装非常快速，并且节约磁盘空间。</p><img src="/LF_blog/notes/no-058/1718767537663-536044d2-c876-4bfe-bab8-0a4958db0d09-434942.png" class=""><img src="/LF_blog/notes/no-058/1718767573094-f473dbc6-938a-4291-a711-73512d27e9ab-936972.png" class=""><p>举个例子，项目中依赖了 A，这时候可以通过创建软链接，在 node_modules 根目录下创建 A 软链指向了 node_modules/.pnpm/A/node_modules/A。此时如果 A 依赖 B，pnpm 同样会把 B 放置在 .pnpm 中，A 同样可以通过 软链接依赖到 B，避免了嵌套过深的情况。<img src="/LF_blog/notes/no-058/1718767581157-56f628ad-0c7d-4e94-b30d-aad82243a744-454363.png" class=""></p><p>可以来看看依赖软链的体现：</p><img src="/LF_blog/notes/no-058/1718767616143-3df57780-60de-4fdb-bda1-d1abdcaeafe1-807957.png" class=""><img src="/LF_blog/notes/no-058/1718767631485-059166be-f018-49e0-81de-7a51cea66036-978524.png" class=""><p>这个时候再回去看看官网提供的图片，应该就清晰很多了。</p><p>可以得知，这种巧妙的结构解决了很多问题：</p><ol><li>节省磁盘空间：由于使用硬链接，相同的包不需要被重复存储，大大减少了磁盘空间的需求。</li><li>提高安装速度：安装包时，pnpm 通过创建链接而非复制文件，这使得安装过程非常快速。</li><li>确保依赖隔离：通过软链接有效减少了幽灵依赖产生的可能，同时保证了依赖的隔离。</li></ol><h3 id="3-依赖安装优化"><a href="#3-依赖安装优化" class="headerlink" title="3. 依赖安装优化"></a>3. 依赖安装优化</h3><p>与此同时，pnpm 在依赖安装的速度上也有显著的提升，这得益于 pnpm 将依赖的安装从串行改为了并行执行。</p><h4 id="传统安装"><a href="#传统安装" class="headerlink" title="传统安装"></a>传统安装</h4><img src="/LF_blog/notes/no-058/1718767642009-6139b236-2b2f-4c19-9b1d-8008815aa7bd-137311.png" class=""><p>传统方法中，包的安装分为三个主要阶段，线性执行：</p><ol><li>解析（Resolving）：解析依赖树，确定需要安装哪些包和版本。</li><li>获取（Fetching）：下载包的压缩文件（tar 格式），这个阶段支持并行下载。</li><li>写入（Writing）：将包解压，构建依赖树，并放置在 node_modules 目录。</li></ol><h4 id="pnpm-安装"><a href="#pnpm-安装" class="headerlink" title="pnpm 安装"></a>pnpm 安装</h4><img src="/LF_blog/notes/no-058/1718767649503-ad22465a-1c74-4897-ab52-7d63a5f8daaa-233278.png" class=""><p>可以看到在 pnpm 中（第二幅图），这些阶段对于每个包是同时进行的。一旦一个包被解析，它就开始下载，下载完毕后就立即开始写入。这样的并行处理显著提高了效率。</p><p>此外，pnpm增加了一个额外的步骤：</p><ul><li>链接（Linking）：由于 pnpm 使用硬链接和符号链接来引用存储在全局 .pnpm-store 中的包，所以在写入阶段完成后，它还需要创建这些链接，以形成项目的 node_modules 目录结构。</li></ul><p>这个链接过程很快，因为它避免了复制文件的开销。与传统方式相比，pnpm 通过这种方式有效地减少了文件的重复写入，并使得多个项目能够共享同一份物理拷贝的包，这在多个项目以及 Monorepo 环境下特别有利。</p><h2 id="三、幽灵依赖产生的根本原因"><a href="#三、幽灵依赖产生的根本原因" class="headerlink" title="三、幽灵依赖产生的根本原因"></a>三、幽灵依赖产生的根本原因</h2><p>然而就算使用 pnpm，幽灵依赖还是难以根除，我们不妨分析一下幽灵依赖产生的根本原因。</p><h3 id="1-包管理工具的依赖解析机制"><a href="#1-包管理工具的依赖解析机制" class="headerlink" title="1. 包管理工具的依赖解析机制"></a>1. 包管理工具的依赖解析机制</h3><p>这就是前面介绍的平铺式带来的问题，这边就不重复讲述了。</p><h3 id="2-第三方库历史问题"><a href="#2-第三方库历史问题" class="headerlink" title="2.第三方库历史问题"></a>2.第三方库历史问题</h3><p>由于历史原因或开发者的疏忽，有些项目可能没有正确地声明所有直接使用的依赖。对于三方依赖，幽灵依赖已经被当做了默认的一种功能来使用，提 issue 修复的话，周期很长，对此 pnpm 也没有任何办法，只能做出妥协。</p><p>下面是 pnpm 的处理方式：</p><ul><li><strong>对直接依赖严格管理</strong>：对于项目的直接依赖，pnpm 保持严格的依赖隔离，确保项目只能访问到它在package.json 中声明的依赖。</li><li><strong>对间接依赖妥协处理</strong>：考虑到一些第三方库可能依赖于未直接声明的包（幽灵依赖），pnpm 默认启用了 hoist 配置。这个配置会将一些间接依赖提升（hoist）到一个特殊的目录 node_modules/.pnpm/node_modules中。这样做的目的是在保持依赖隔离的同时，允许某些特殊情况下的间接依赖被访问。</li></ul><img src="/LF_blog/notes/no-058/1718767657631-727af2ec-36ac-4a2f-b7da-8739e2d0a7a2-590326.png" class=""><h3 id="3-JavaScript-模块解析策略"><a href="#3-JavaScript-模块解析策略" class="headerlink" title="3. JavaScript 模块解析策略"></a>3. JavaScript 模块解析策略</h3><p>Node.js 的模块解析策略允许从当前文件夹的 node_modules 开始，向上遍历文件系统，直到找到所需模块。</p><p>这种解析策略，虽然提供了灵活性，也使得幽灵依赖更容易产生，因为它允许模块加载那些未直接声明在项目package.json 中的依赖。</p><p>综合来看，幽灵依赖在目前是无法根除的，只能通过一些额外的处理进行管控，比如 eslint 对幽灵依赖的检查规则、pnpm 的 hoist 配置等。</p><h2 id="四、pnpm-项目的依赖治理方案"><a href="#四、pnpm-项目的依赖治理方案" class="headerlink" title="四、pnpm 项目的依赖治理方案"></a>四、pnpm 项目的依赖治理方案</h2><p>对于依赖治理，大概涉及到以下几个部分：</p><ul><li>冗余依赖治理：某些包可能用不到，但还保留着，导致 package.json 愈发混乱。</li><li>重叠依赖治理：monorepo 中 case 较多，比如根目录与子项目声明了相同的包，加大了 package.json 的管理成本，还有可能出现同一包多版本的问题。</li><li>锁文件保护：要保证 package.json 与锁文件（pnpm-lock）的统一，防止其他开发者拉下代码后，因不统一造成一些功能差异。</li></ul><h3 id="1-冗余依赖治理"><a href="#1-冗余依赖治理" class="headerlink" title="1. 冗余依赖治理"></a>1. 冗余依赖治理</h3><p>对于冗余的情况，可以按照如下顺序检查：</p><ol><li>执行 pnpm why <package-name>，用来找出项目中一个特定的包被谁所依赖，给出包的依赖来源。</package-name></li><li>全局搜索包名，检查是否有被引入。</li><li>了解包的作用，判断项目中是否存在包的引用。</li><li>删除包，执行 pnpm i 后，分别运行、打包项目，查看是否有明显问题。</li></ol><p>按照顺序执行完毕后，仍然可能存在问题，这是没法完全避免的，可以进一步通过测试进行排查。</p><h3 id="2-重叠依赖治理"><a href="#2-重叠依赖治理" class="headerlink" title="2. 重叠依赖治理"></a>2. 重叠依赖治理</h3><p>对于 monorepo 而言，依赖的管理就比较复杂了，这边可以通过人肉+脚本的方式进行治理。</p><p>为方便识别重叠依赖，我编写了一个脚本，遍历子项目中的 package.json 将与根目录重叠的依赖进行输出：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">'fs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'url'</span><span class="token punctuation">;</span><span class="token keyword">import</span> chalk <span class="token keyword">from</span> <span class="token string">'chalk'</span><span class="token punctuation">;</span> <span class="token comment">// 引入 chalk</span><span class="token comment">// 获取当前文件的目录路径，确保脚本可以在不同环境下正确执行</span><span class="token keyword">const</span> __dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改后的读取 package.json 文件函数保持不变</span><span class="token keyword">function</span> <span class="token function">readPackageJson</span><span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> jsonData <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">读取文件失败: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 修改后的比较依赖函数保持不变</span><span class="token keyword">function</span> <span class="token function">compareDependencies</span><span class="token punctuation">(</span><span class="token parameter">rootDeps<span class="token punctuation">,</span> childDeps<span class="token punctuation">,</span> depType<span class="token punctuation">,</span> childName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> overlaps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>dep<span class="token punctuation">,</span> version<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>childDeps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootDeps<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> versionCompare <span class="token operator">=</span> <span class="token punctuation">(</span>rootDeps<span class="token punctuation">[</span>dep<span class="token punctuation">]</span> <span class="token operator">===</span> version<span class="token punctuation">)</span>      <span class="token comment">// 如果子项目中的依赖在根目录中也存在，则记录下来</span>      overlaps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dep<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chalk<span class="token punctuation">.</span><span class="token function">blueBright</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (在根目录中为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chalk<span class="token punctuation">.</span><span class="token function">blueBright</span><span class="token punctuation">(</span>rootDeps<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>versionCompare <span class="token operator">?</span> chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token string">'✔'</span><span class="token punctuation">)</span> <span class="token operator">:</span> chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">'✘'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token literal-property property">overlaps</span><span class="token operator">:</span> overlaps<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chalk<span class="token punctuation">.</span><span class="token function">greenBright</span><span class="token punctuation">(</span><span class="token string">'- 重叠的'</span><span class="token punctuation">,</span>depType<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> overlaps<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n\n'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> rootPackageJsonPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'package.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> rootPackageJson <span class="token operator">=</span> <span class="token function">readPackageJson</span><span class="token punctuation">(</span>rootPackageJsonPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootPackageJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'无法读取根目录的 package.json 文件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 修改输出为终端输出，使用 chalk 增加颜色</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token string">'📖 依赖分析报告\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> packagesDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'packages'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> childDirs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>packagesDir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>packagesDir<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> childDirs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> childPackageJsonPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>packagesDir<span class="token punctuation">,</span> child<span class="token punctuation">,</span> <span class="token string">'package.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> childPackageJson <span class="token operator">=</span> <span class="token function">readPackageJson</span><span class="token punctuation">(</span>childPackageJsonPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childPackageJson<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">🟢 子项目 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>child<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">[</span><span class="token string">'dependencies'</span><span class="token punctuation">,</span> <span class="token string">'devDependencies'</span><span class="token punctuation">,</span> <span class="token string">'peerDependencies'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">depType</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> overlaps <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">compareDependencies</span><span class="token punctuation">(</span>          rootPackageJson<span class="token punctuation">[</span>depType<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          childPackageJson<span class="token punctuation">[</span>depType<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          depType<span class="token punctuation">,</span>          child        <span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>overlaps<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行效果如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">📖 依赖分析报告🟢 子项目 <span class="token constant">A</span>  <span class="token operator">-</span> 重叠的 dependencies@babel<span class="token operator">/</span>runtime<span class="token operator">-</span>corejs3<span class="token operator">:</span> <span class="token operator">^</span><span class="token number">7.14</span><span class="token number">.0</span> <span class="token punctuation">(</span>在根目录中为<span class="token operator">:</span> <span class="token operator">^</span><span class="token number">7.14</span><span class="token number">.0</span><span class="token punctuation">)</span> ✔……  <span class="token operator">-</span> 重叠的 devDependencies@commitlint<span class="token operator">/</span>cli<span class="token operator">:</span> <span class="token operator">^</span><span class="token number">13.1</span><span class="token number">.0</span> <span class="token punctuation">(</span>在根目录中为<span class="token operator">:</span> <span class="token operator">^</span><span class="token number">13.1</span><span class="token number">.0</span><span class="token punctuation">)</span> ✔@commitlint<span class="token operator">/</span>config<span class="token operator">-</span>conventional<span class="token operator">:</span> <span class="token operator">^</span><span class="token number">13.1</span><span class="token number">.0</span> <span class="token punctuation">(</span>在根目录中为<span class="token operator">:</span> <span class="token operator">^</span><span class="token number">13.1</span><span class="token number">.0</span><span class="token punctuation">)</span> ✔……🟢 子项目 <span class="token constant">B</span>  <span class="token operator">-</span> 重叠的 devDependencies<span class="token literal-property property">typescript</span><span class="token operator">:</span> <span class="token operator">^</span><span class="token number">4.4</span><span class="token number">.0</span> <span class="token punctuation">(</span>在根目录中为<span class="token operator">:</span> <span class="token operator">^</span><span class="token number">4.3</span><span class="token number">.5</span><span class="token punctuation">)</span> ✘<span class="token literal-property property">zx</span><span class="token operator">:</span> <span class="token operator">^</span><span class="token number">4.2</span><span class="token number">.0</span> <span class="token punctuation">(</span>在根目录中为<span class="token operator">:</span> <span class="token operator">^</span><span class="token number">4.2</span><span class="token number">.0</span><span class="token punctuation">)</span> ✔<span class="token literal-property property">chalk</span><span class="token operator">:</span> <span class="token operator">^</span><span class="token number">4.1</span><span class="token number">.0</span> <span class="token punctuation">(</span>在根目录中为<span class="token operator">:</span> <span class="token operator">^</span><span class="token number">4.1</span><span class="token number">.0</span><span class="token punctuation">)</span> ✔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这种方式我们就可以有目的性的去逐个检查依赖，依据一种合理的 monorepo 依赖管理模式进行处理，下面是一种合适的处理规则：</p><ul><li>将共享的<strong>开发时</strong>依赖移至根目录的 package.json，如 jest、eslint、lint-stage。</li><li>对于需要特定版本以保证兼容性的依赖，考虑使用 resolutions 字段强制解析为特定版本。</li><li>为需要发包的工具、类库提供 peerDependencies 字段。</li><li>对于运行时依赖，如果所有子项目都有依赖，将删除子项目中的声明，提升至根目录，同时在需要发包的工具、类库的 peerDependencies 中声明相关的依赖。</li><li>发包时，通过调用脚本将目标子项目中的 peerDependencies 内容转移至 dependicies 中。</li></ul><h3 id="3-锁文件保护"><a href="#3-锁文件保护" class="headerlink" title="3. 锁文件保护"></a>3. 锁文件保护</h3><p>核心目的：保证任何开发者在拉取代码后，执行 pnpm i 不会导致 pnpm-lock 发生更新。</p><h4 id="初步方案"><a href="#初步方案" class="headerlink" title="初步方案"></a>初步方案</h4><ol><li>限制 pnpm、node 版本</li><li>本地在 lint-stage 中新增脚本检查是否存在意外更新</li><li>CI 流水线上检查是否存在意外更新</li></ol><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>核心思路：检测 pacakge.json 和 pnpm-lock 的依赖是否对等。</p><p>我们可以先观察一下 pnpm i 的 options：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Version <span class="token number">7.26</span>.3Usage: <span class="token function">pnpm</span> <span class="token function">install</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span>Options:      --<span class="token punctuation">[</span>no-<span class="token punctuation">]</span>color                      Controls colors <span class="token keyword">in</span> the output. By default, output is always colored when                                        it goes directly to a terminal      --<span class="token punctuation">[</span>no-<span class="token punctuation">]</span>frozen-lockfile            Don<span class="token string">'t generate a lockfile and fail if an update is needed. This setting                                        is on by default in CI environments, so use --no-frozen-lockfile if you                                        need to disable it for some reason      --[no-]verify-store-integrity     If false, doesn'</span>t check whether packages <span class="token keyword">in</span> the store were mutated      --aggregate-output                Aggregate output from child processes that are run <span class="token keyword">in</span> parallel, and only                                        print output when child process is finished. It makes reading large logs                                        after running <span class="token variable"><span class="token variable">`</span><span class="token function">pnpm</span> recursive<span class="token variable">`</span></span> with <span class="token variable"><span class="token variable">`</span><span class="token parameter variable">--parallel</span><span class="token variable">`</span></span> or with                                        <span class="token variable"><span class="token variable">`</span>--workspace-concurrency<span class="token variable">`</span></span> much easier <span class="token punctuation">(</span>especially on CI<span class="token punctuation">)</span>. Only                                        <span class="token variable"><span class="token variable">`</span><span class="token parameter variable">--reporter</span><span class="token operator">=</span>append-only<span class="token variable">`</span></span> is supported.      --child-concurrency <span class="token operator">&lt;</span>number<span class="token operator">&gt;</span>      Controls the number of child processes run parallelly to build <span class="token function">node</span>                                        modules  -D, <span class="token parameter variable">--dev</span>                             Only <span class="token variable"><span class="token variable">`</span>devDependencies<span class="token variable">`</span></span> are installed regardless of the <span class="token variable"><span class="token variable">`</span>NODE_ENV<span class="token variable">`</span></span>  -C, <span class="token parameter variable">--dir</span> <span class="token operator">&lt;</span>dir<span class="token operator">&gt;</span>                       Change to directory <span class="token operator">&lt;</span>dir<span class="token operator">&gt;</span> <span class="token punctuation">(</span>default:                                        /Users/bytedance/Desktop/项目/byteview-mm-we      --fix-lockfile                    Fix broken lockfile entries automatically      ……      --lockfile-dir <span class="token operator">&lt;</span>dir<span class="token operator">&gt;</span>              The directory <span class="token keyword">in</span> <span class="token function">which</span> the pnpm-lock.yaml of the package will be created.                                        Several projects may share a single lockfile.      --lockfile-only                   Dependencies are not downloaded. Only <span class="token variable"><span class="token variable">`</span>pnpm-lock.yaml<span class="token variable">`</span></span> is updated      ……Visit https://pnpm.io/7.x/cli/install <span class="token keyword">for</span> documentation about this command.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从中可以提取出一些可能有用的 option:</p><ul><li><a href="https://link.juejin.cn/?target=https://pnpm.io/zh/cli/install%23--frozen-lockfile">– frozen-lockfile</a>：检查 package.json 和 pnpm-lock.yaml 文件是否一致（即如果<strong>依赖项更新是必要的</strong>），命令会直接失败。</li><li><a href="https://link.juejin.cn/?target=https://pnpm.io/zh/cli/install%23--fix-lockfile">–fix-lockfile</a>：检查当前项目的依赖关系，并更新 pnpm-lock.yaml 以确保其中记录的包版本与 package.json 中的声明一致。</li><li>–lockfile-dir ：网上找不到相关的文档，根据说明可以判断是控制 pnpm-lock.yaml 的生成路径。</li><li><a href="https://link.juejin.cn/?target=https://pnpm.io/zh/cli/install%23--lockfile-only">–lockfile-only</a>：只更新 pnpm-lock.yaml 和 package.json。 不写入 node_modules 目录。</li></ul><p>首先我们可以排除 –lockfile-dir </p><dir>，由于我们只需要检查问题而不用修复问题，剩余的 option 中 – frozen-lockfile 是最符合预期的，在 github 上也有<a href="https://link.juejin.cn/?target=https://github.com/orgs/pnpm/discussions/3202">相关需求的讨论</a>，基于这个 option，我实现了一个基础脚本：<p></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> execSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'child_process'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> chalk <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'zx'</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment">// 尝试使用 --frozen-lockfile 选项来更新依赖</span>  <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'pnpm install --frozen-lockfile'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">'inherit'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token string">'✅ The pnpm-lock.yaml is up-to-date. No updates are needed.'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 如果命令失败，则可能是因为需要更新 lockfile</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>    chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span>      <span class="token string">'🚨 Detected that pnpm-lock.yaml needs an update. Please run pnpm install and commit the updated lockfile.'</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于这个脚本，我们还可以加入一些额外的判断工作，如：pnpm、node 版本不一致判断。</p></dir>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pnpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何限制一个账号只能在一处登录</title>
      <link href="/LF_blog/notes/no-056.html"/>
      <url>/LF_blog/notes/no-056.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><font style="color:#0e0e0e;">要限制一个账号只能在一处登录，常见的解决方案是通过 </font><strong><font style="color:#0e0e0e;">令牌（Token）管理</font></strong><font style="color:#0e0e0e;"> 和 </font><strong><font style="color:#0e0e0e;">会话管理（Session Management）</font></strong><font style="color:#0e0e0e;"> 来实现。以下是一些步骤和方法：</font></p></blockquote><h3 id="1-基于-Token-的单点登录-SSO-管理"><a href="#1-基于-Token-的单点登录-SSO-管理" class="headerlink" title="1. 基于 Token 的单点登录 (SSO) 管理"></a>1. 基于 Token 的单点登录 (SSO) 管理</h3><p><font style="color:#0e0e0e;">通过 Token（如 JWT）来识别用户登录状态，可以利用以下策略：</font></p><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">存储 Token 信息：</font></strong><font style="color:#0e0e0e;"> 每当用户登录时，在服务器端生成一个唯一的 Token，并返回给客户端存储（通常是存储在 </font><font style="color:#0e0e0e;">localStorage</font><font style="color:#0e0e0e;"> 或 </font><font style="color:#0e0e0e;">sessionStorage</font><font style="color:#0e0e0e;"> 中）。可以考虑在服务器端将这个 Token 与用户的会话信息进行关联，且每次生成新的 Token 时，之前的 Token 会失效。</font></p><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">服务器端会话验证：</font></strong><font style="color:#0e0e0e;"> 服务器保存每个 Token 对应的用户信息，如果该用户尝试在另一处登录时，再次生成新的 Token，原来的 Token 会失效，从而强制旧的会话下线。</font></p><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">请求校验：</font></strong><font style="color:#0e0e0e;"> 在每次请求时，客户端将 Token 附加在请求头中，服务器端校验 Token 是否有效并与用户当前会话进行对比。如果发现该 Token 已失效，表示用户在其他地方重新登录过，强制退出当前会话。</font></p><h3 id="2-基于-Session-的管理"><a href="#2-基于-Session-的管理" class="headerlink" title="2. 基于 Session 的管理"></a>2. 基于 Session 的管理</h3><p><font style="color:#0e0e0e;">除了使用 Token，传统的 </font><strong><font style="color:#0e0e0e;">Session ID</font></strong><font style="color:#0e0e0e;"> 管理也是一种实现方式，步骤如下：</font></p><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">生成唯一 Session ID：</font></strong><font style="color:#0e0e0e;"> 当用户登录时，服务器为该用户生成一个唯一的 Session ID，并将其存储在服务器上。</font></p><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">限制同一账号只能在一个 Session 下登录：</font></strong><font style="color:#0e0e0e;"> 在服务器上保存当前活跃的 Session ID。如果用户尝试在不同地方登录时，服务器会将之前的 Session ID 删除或标记为无效，从而确保用户只能在一个地方登录。</font></p><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">Session 超时：</font></strong><font style="color:#0e0e0e;"> 除了手动管理 Session 的失效，还可以设置会话超时机制，让用户如果长时间没有操作，则自动退出登录，减少长时间占用资源。</font></p><h3 id="3-前端实现策略"><a href="#3-前端实现策略" class="headerlink" title="3. 前端实现策略"></a>3. 前端实现策略</h3><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">客户端检查：</font></strong><font style="color:#0e0e0e;"> 在每次用户请求时，前端可以通过一个标识符（例如 </font><font style="color:#0e0e0e;">localStorage</font><font style="color:#0e0e0e;"> 或 </font><font style="color:#0e0e0e;">sessionStorage</font><font style="color:#0e0e0e;"> 中的唯一标识符）来标记当前会话。如果检测到多个标识符，则提示用户注销其他设备的会话。</font></p><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">WebSocket 实时推送：</font></strong><font style="color:#0e0e0e;"> 如果系统中使用 WebSocket 等实时通信方式，后端可以向前端推送用户会话状态的变化，提醒用户当前的会话在别的地方被强制下线。</font></p><h3 id="4-额外注意点"><a href="#4-额外注意点" class="headerlink" title="4. 额外注意点"></a>4. 额外注意点</h3><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">安全性：</font></strong><font style="color:#0e0e0e;"> 确保 Token 或 Session ID 的传输是加密的，避免在中间人攻击（MITM）下泄露用户的登录信息。</font></p><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">跨设备/跨浏览器的管理：</font></strong><font style="color:#0e0e0e;"> 如果用户希望在多个设备上使用同一账户登录，可以考虑通过明确的授权机制和接口提供让用户选择是否同步会话的功能。</font></p><p><font style="color:#0e0e0e;"></font><font style="color:#0e0e0e;">•</font><font style="color:#0e0e0e;"></font><strong><font style="color:#0e0e0e;">前端刷新/重新登录：</font></strong><font style="color:#0e0e0e;"> 在前端被强制下线时，通常需要给用户明确的提示，并提供重新登录的界面。</font></p><font style="color:#0e0e0e;">  </font><p><font style="color:#0e0e0e;">总结来说，通过合理的会话管理和 Token 校验机制，可以有效地限制一个账号只能在一处登录。</font></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端如何实现自动检测更新</title>
      <link href="/LF_blog/notes/no-025.html"/>
      <url>/LF_blog/notes/no-025.html</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>用户在访问单页面网站时，如果生产环境已经发布了新的版本（有功能上的变化），由于单页面中路由特性或浏览器缓存的原因，并不会重新加载前端资源，此时用户浏览器并非加载是最新的代码，从而可能遇到一些bug。<br><br>部署之后，如何提醒用户版本更新，并引导用户刷新页面呢？</p></blockquote><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>这里用的【轮询】的方式请求 <font style="color:rgb(10, 191, 91);background-color:rgb(243, 245, 249);"> index.html </font>文件，从中解析里面的<font style="color:rgb(10, 191, 91);background-color:rgb(243, 245, 249);"> js </font>文件，由于vue打包后每个<font style="color:rgb(10, 191, 91);background-color:rgb(243, 245, 249);"> js </font>文件都有<font style="color:rgb(10, 191, 91);background-color:rgb(243, 245, 249);"> 指纹标识 </font>，因此对比每次打包后的指纹，分析文件是否存在变动，如果有变动则提示用户更新！</p><p>环境：vue3 + ts + vite + element-plus</p><img src="/LF_blog/notes/no-025/1.png" class=""><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h5 id="1、在-utils-文件夹下新建-auto-update-ts-，内容如下"><a href="#1、在-utils-文件夹下新建-auto-update-ts-，内容如下" class="headerlink" title="1、在 utils 文件夹下新建 auto-update.ts ，内容如下"></a>1、在<font style="color:rgb(10, 191, 91);background-color:rgb(243, 245, 249);"> utils </font>文件夹下新建<font style="color:rgb(10, 191, 91);background-color:rgb(243, 245, 249);"> auto-update.ts </font>，内容如下</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ElMessageBox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">let</span> <span class="token literal-property property">lastSrcs</span><span class="token operator">:</span> any<span class="token punctuation">;</span>  <span class="token comment">//上一次获取到的script地址</span><span class="token keyword">let</span> needTip <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 默认开启提示</span><span class="token keyword">const</span> scriptReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;script.*src=["'](?&lt;src&gt;[^"']+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">extractNewScripts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/?_timestamp='</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scriptReg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token literal-property property">match</span><span class="token operator">:</span> RegExpExecArray    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> scriptReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token keyword">as</span> RegExpExecArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>groups<span class="token operator">?.</span>src<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">needUpdate</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> newScripts <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">extractNewScripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastSrcs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastSrcs <span class="token operator">=</span> newScripts<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastSrcs<span class="token punctuation">.</span>length <span class="token operator">!==</span> newScripts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lastSrcs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastSrcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> newScripts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    lastSrcs <span class="token operator">=</span> newScripts<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token constant">DURATION</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">autoRefresh</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> willUpdate <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">needUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>willUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 延时更新，防止部署未完成用户就刷新空白</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                ElMessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'检测到页面有内容更新，为了功能的正常使用，是否立即刷新？'</span><span class="token punctuation">,</span> <span class="token string">'更新提示'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">confirmButtonText</span><span class="token operator">:</span> <span class="token string">'确认'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">showCancelButton</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            needTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 关闭更新提示，防止重复提醒</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needTip<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autoRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">DURATION</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、Vite的相关配置"><a href="#2、Vite的相关配置" class="headerlink" title="2、Vite的相关配置"></a>2、Vite<font style="color:rgb(51, 51, 51);">的相关配置</font></h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**  * @description vite document address * https://vitejs.cn/config/  */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function-variable function">xxx</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token literal-property property">chunkFileNames</span><span class="token operator">:</span> <span class="token string">'js/[hash].js'</span><span class="token punctuation">,</span> <span class="token comment">// 引入文件名的名称</span>          <span class="token literal-property property">entryFileNames</span><span class="token operator">:</span> <span class="token string">'js/[hash].js'</span><span class="token punctuation">,</span> <span class="token comment">// 包的入口文件名称</span>          <span class="token literal-property property">assetFileNames</span><span class="token operator">:</span> <span class="token string">'[ext]/[hash].[ext]'</span><span class="token punctuation">,</span> <span class="token comment">// 资源文件像 字体，图片等</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、在入口文件-mati-ts-中引入-autoRefresh-，如果是生产环境，则执行-autoRefresh-方法。"><a href="#3、在入口文件-mati-ts-中引入-autoRefresh-，如果是生产环境，则执行-autoRefresh-方法。" class="headerlink" title="3、在入口文件 mati.ts 中引入 autoRefresh ，如果是生产环境，则执行 autoRefresh 方法。"></a>3、在入口文件<font style="color:rgb(10, 191, 91);background-color:rgb(243, 245, 249);"> mati.ts </font>中引入<font style="color:rgb(10, 191, 91);background-color:rgb(243, 245, 249);"> autoRefresh </font>，如果是生产环境，则执行<font style="color:rgb(10, 191, 91);background-color:rgb(243, 245, 249);"> autoRefresh </font>方法。</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> autoRefresh <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/utils/auto-update"</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MODE</span> <span class="token operator">==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">autoRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/LF_blog/notes/no-025/2.png" class="">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对项目可能用到的域名做了dns预解析和优化</title>
      <link href="/LF_blog/notes/no-026.html"/>
      <url>/LF_blog/notes/no-026.html</url>
      
        <content type="html"><![CDATA[<img src="/LF_blog/notes/no-026/1.png" class=""><blockquote><p><strong>DNS预解析</strong>（<code>dns-prefetch</code> ）是前端网络性能优化的一种措施，它根据浏览器定义的规则，<strong>提前解析</strong>之后可能会用到的域名，使解析结果<strong>缓存到系统缓存</strong>中，缩短DNS解析时间，进而提高网站的访问速度。</p></blockquote><p>DNS预解析能够让浏览器在用户访问链接之前解析域名，其范围包括文档的所有链接，包括图片、CSS、JS；</p><p>域名解析后，如果用户确实访问该域名，那么DNS解析时间将不会有延迟。因为预读取会在后台执行，所以DNS很可能在链接对应的东西出现之前就已经解析完毕，这能够减少用户点击链接时的延迟。</p><h2 id="DNS预解析的原理"><a href="#DNS预解析的原理" class="headerlink" title="DNS预解析的原理"></a>DNS预解析的原理</h2><p>当浏览器访问一个域名的时候，需要解析一次 DNS，获得对应域名的 ip 地址；在解析过程中，按照如下的顺序逐步读取缓存，直到拿到IP地址：</p><ul><li>浏览器缓存</li><li>系统缓存</li><li>路由器缓存</li><li>ISP(运营商)DNS缓存</li><li>根域名服务器</li><li>顶级域名服务器</li><li>主域名服务器</li></ul><p>dns-prefetch 就是在<strong>将解析后的IP缓存在系统中</strong>；这样就有效地缩短了 DNS 解析时间。因为在本地操作系统做了 DNS 缓存，使得 DNS 在解析的过程中，提前在系统缓存中找到了对应 IP；这样一来，后续的解析步骤就不用执行了，进而也就缩短了 DNS 解析时间。</p><p>假如浏览器首次将一个域名解析为 IP 地址，并缓存至操作系统，那么下一次 DNS 解析时间可以低至 0-1ms；倘若结果不缓存在系统，那么就需要读取路由器的缓存，进而后续的解析时间最小也要约 15ms</p><p>如果路由器缓存也不存在，则需要读取 ISP（运营商）DNS缓存，一般像 <code>taobao.com</code>、<code>baidu.com</code> 这些常见的域名，读取ISP（运营商）DNS 缓存需要的时间在 80-120ms，如果是不常见的域名，平均需要 200-300ms</p><p>那也就是说，<code>dns-prefetch</code> 可以给 DNS 解析过程带来 15-300ms 的提升，尤其是一些大量引用很多其他域名资源的网站，提升效果就更加明显了。</p><h2 id="如何开启DNS预解析"><a href="#如何开启DNS预解析" class="headerlink" title="如何开启DNS预解析"></a>如何开启DNS预解析</h2><p>在 HTML 的 head 部分添加以下代码来启用 DNS 预解析，href 属性指定了需要预解析的主机名：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//douyin.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>某东页面  </p><img src="/LF_blog/notes/no-026/2.png" class=""><p>抖音页面</p><img src="/LF_blog/notes/no-026/3.png" class=""><img src="/LF_blog/notes/no-026/4.png" class=""><h2 id="工程化的项目中使用DNS预解析"><a href="#工程化的项目中使用DNS预解析" class="headerlink" title="工程化的项目中使用DNS预解析"></a>工程化的项目中使用DNS预解析</h2><blockquote><p>在项目中我们可能会遇到一个问题，就是很多地方使用到了第三方的外链，比如图片、CSS、JS，由于项目是团队开发，有时候还不知道项目哪些地方引用了第三方的外链，所以我们不可能通过 link 标签的形式将这些第三方外链一个个引入并开启 DNS 预解析。<br><br>这个时候需要写一个插件去帮我们查找项目中所有的引入的第三方外链</p></blockquote><img src="/LF_blog/notes/no-026/5.png" class=""><p>Vite 项目使用 rollup 打包的，而 Vue-cli 项目用的是 webpack， create-react-app项目是webapck</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string-property property">"build"</span><span class="token operator">:</span> <span class="token string">"vite bulid &amp;&amp; node ./scripts/dns-prefetch.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体的代码如下，简单来说就是，遍历打包后的 dist 目录中的所有 HTML、JS、CSS 文件，将所有外链的域名存起来，然后在 dist 目录下 index.html 文件的 head 标签中依次插入 link 标签，同时开启 DNS 预解析：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// dns-prefetch.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-html-parser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> glob <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'glob'</span><span class="token punctuation">)</span><span class="token keyword">const</span> urlRegex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url-regex'</span><span class="token punctuation">)</span><span class="token comment">// 获取外部链接的正则表达式</span><span class="token keyword">const</span> urlPattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(https?:\/\/[^/]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token keyword">const</span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 遍历dist目录中的所有HTML、JS、CSS文件</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">searchDomin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">'dist/**/*.{html,css,js}'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> source <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> matches <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token function">urlRegex</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span>            matches<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> match <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>urlPattern<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>match <span class="token operator">&amp;&amp;</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    urls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 在index.html文件&lt;head&gt;标签中插入link标签</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">insertLinks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">'dist/**/*.html'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> links <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>urls<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;link rel="dns-prefetch" href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" /&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token keyword">const</span> head <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span>        head<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">'afterbegin'</span><span class="token punctuation">,</span> links<span class="token punctuation">)</span>        fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> root<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">searchDomin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">insertLinks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/LF_blog/notes/no-026/6.png" class="">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babel-runtime 如何缩小打包体积</title>
      <link href="/LF_blog/notes/no-060.html"/>
      <url>/LF_blog/notes/no-060.html</url>
      
        <content type="html"><![CDATA[<p>在前端工程化领域，<strong>包体积优化</strong>一直是一个备受关注的话题。随着项目规模扩大和功能迭代，打包后的文件体积逐渐膨胀。而对于网页加载速度和性能优化来说，减小打包体积是至关重要的一环。</p><p>为此，在这篇文章中，我们将探讨如何利用 babel-runtime 这一工具来帮助我们将重复的定义通过模块导入的方式引入，缩减打包体积以提升项目性能。</p><p> Babel 是一个被广泛使用的 JS 编译器，用于将新语法转换为向后兼容的 JS 代码。一般情况下，我们可以通过安装<strong>预设</strong>和<strong>插件</strong>控制 <strong>Babel</strong> 的代码转译，比如：</p><p><strong>预设（Presets 一组预定义的转换规则的集合）</strong></p><ol><li><strong>@babel/preset-env</strong>：这是 Babel 官方推荐的预设之一，用于根据目标环境自动确定所需的转换和 polyfill。</li><li><strong>@babel/preset-react</strong>：用于支持 React 项目中的 JSX 和其他相关特性的预设。·</li><li><strong>@babel/preset-typescript</strong>：用于支持 TS 项目中的预设，能够将 TS 代码转换为 JS 代码。</li></ol><p><strong>插件（Plugins 单个转换规则的集合）</strong></p><ol><li><strong>@babel/plugin-proposal-class-properties</strong>：用于支持 JS 类的属性初始化器，包括静态属性和实例属性。</li><li><strong>@babel/plugin-transform-arrow-functions</strong>：将箭头函数转换为普通函数表达式，以提供更广泛的兼容性。</li><li><strong>@babel/plugin-transform-runtime</strong>：将 Babel 编译时注入的辅助函数转换为引用运行时公共函数的方式，以减小输出文件的体积。</li></ol><p>此处我们先对 @babel/preset-env 做重点介绍</p><h2 id="一、-babel-preset-env"><a href="#一、-babel-preset-env" class="headerlink" title="一、@babel/preset-env"></a>一、@babel/preset-env</h2><p>@babel/preset-env 的主要功能包括：</p><ul><li><strong>自动 polyfill</strong>：根据目标环境自动导入所需的 polyfill，从而实现对新特性的兼容性支持。</li><li><strong>智能转换</strong>：基于目标环境的浏览器或 Node 版本来自动转换 ES6+ 语法或 API。</li><li><strong>模块转换</strong>：支持将模块转换为不同类型（CommonJS、AMD、UMD 等）的模块系统。</li><li><strong>按需加载</strong>：支持根据需要选择和加载特定的转换规则或插件。</li></ul><p>使用 @babel/preset-env 的方式也非常简单，只需要在 .babelrc 或 babel.config.js 中配置该预设即可，下面是一个综合案例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment">// 目标环境设置为最近的两个浏览器版本以及 Safari 7 及以上版本</span>        <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"browsers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span> <span class="token string">"safari &gt;= 7"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 将 ES6 模块转换为 CommonJS 模块</span>        <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>        <span class="token comment">// 启用按需加载 polyfill 的功能</span>        <span class="token property">"useBuiltIns"</span><span class="token operator">:</span> <span class="token string">"usage"</span><span class="token punctuation">,</span>        <span class="token comment">// 使用 core-js 3 版本的 polyfill</span>        <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token comment">// 打印详细的调试信息</span>        <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：useBuiltIns 控制了 polyfill 的导入方式，用来配合 @babel/polyfill 使用，值得注意的是，官方不再推荐 Babel &gt; 7.4.0 时使用 @babel/polyfill，可以选择使用 core-js。</p><p>更多配置规则请参考：<a href="https://babeljs.io/docs/babel-preset-env">babeljs.io/docs/babel-…</a></p><h2 id="二、-babel-polyfill"><a href="#二、-babel-polyfill" class="headerlink" title="二、@babel/polyfill"></a>二、@babel/polyfill</h2><p>从 Babel 7.4.0 开始，这个包已经被弃用，取而代之的是直接包含 core-js/stable</p><p>在本地 node_module 中，可以看到 @babel/polyfill 的依赖包含了 core-js 和 regenerator-runtime，可以认为 polyfill 本身就是 core-js + regenerator-runtime。</p><img src="/LF_blog/notes/no-060/1718767013014-9f71a6d2-d5d4-4e44-9e98-6435a1849d9f-594740.png" class=""><img src="/LF_blog/notes/no-060/1718767022669-6b93fd5f-5501-4a5f-bbf0-c60d049b2fec-917861.png" class=""><p>从 Babel 7.4.0 开始，我们需要用 core-js 替代 babel-polyfill,而 regenerator-runtime 会在安装 @babel/runtime 时被依赖安装，因此不用额外安装。</p><h2 id="三、babel-runtime"><a href="#三、babel-runtime" class="headerlink" title="三、babel-runtime"></a>三、babel-runtime</h2><p><a href="https://babel.dev/docs/babel-runtime">babel-runtime</a> 是一个由 Babel 提供的运行时库，它包括了一些在编译过程中需要用到的辅助函数和类，例如 ES6/ES7 语法的 polyfill、generator 函数的处理、Promise 的实现等。</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>babel-runtime 的实现主要功能有两点：</p><ol><li><strong>将转译中需要的 helper 函数从一个模块中引入，避免重复定义、减小打包体积</strong></li></ol><p>下面是一些常见的辅助函数和类的实现：</p><ul><li><strong>classCallCheck</strong>：用于实现 ES6 类的构造函数中的类检查。它会检查是否使用 new 关键字来调用类，并在没有正确调用的情况下抛出错误。</li><li><strong>defineEnumerableProperties</strong>：用于定义对象的可枚举属性。它接受一个对象和一组属性描述符，并将这些属性添加到对象中，并确保它们是可枚举的。</li><li><strong>extends</strong>：用于实现 ES6 类继承的辅助函数。它会创建一个新的子类，并确保正确设置原型链和构造函数。</li><li><strong>asyncToGenerator</strong>：用于将 generator 函数转换为基于 Promise 的异步函数的辅助函数。它接受一个 generator 函数并返回一个新的函数，该函数可以像普通的异步函数一样被调用。</li><li><strong>regeneratorRuntime</strong>：用于支持 generator 函数的运行时库。它提供了 generator 函数所需的运行时环境，包括状态机、迭代器和 Promise 的支持。</li></ul><ol><li><strong>开发类库/工具时，避免生产污染全局空间的方法。</strong></li></ol><p>我们举个例子：</p><p>在一个项目中，我们定义了一个 Array 原型链上的方法（比如 Array.includes())，项目依赖 babel-polyfill 实现转译。此时，项目引入一个依赖，调用的方法需要使用 Array.includes()，那么在打包时，由于 polyfill 导入于全局环境，就会出现冲突，导致出错。</p><p>解决方案就是用 babel-runtime 处理全局内置对象，将其模块化，并通过模块导入的方式引入。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>然而 @babel/runtime 没有支持实例方法，只能通过配置 corejs ，使用 babel/runtime-corejs@x</p><p>控制相关 polyfill 的引入，然而 core-js2 的 polyfill 覆盖范围相对较小，以下陈列了相关包的区别：</p><ul><li><strong>@babel/polyfill</strong>：core-js + regenerator-runtime，Babel 7.4.0后弃用。</li><li><strong>@babel/runtime</strong>：Babel 默认的运行时依赖模块，提供相关 helpers 函数和regenerator-runtime，不包含任何 polyfill 功能。</li><li><strong>@babel/runtime-corejs2</strong>：基于 @babel/runtime ，提供了 core-js2 支持部分 polyfill。</li><li><strong>@babel/runtime-corejs3</strong>：基于 @babel/runtime ，提供了 core-js3 支持更广泛的 polyfill。</li></ul><h2 id="四、babel-plugin-transform-runtime"><a href="#四、babel-plugin-transform-runtime" class="headerlink" title="四、babel-plugin-transform-runtime"></a>四、babel-plugin-transform-runtime</h2><p>需要注意的是，babel-runtime 只是一个工具库，需要和 <a href="https://link.juejin.cn/?target=https://babeljs.io/docs/babel-plugin-transform-runtime">babel-plugin-transform-runtime</a> 配合使用。</p><p>babel-plugin-transform-runtime 可以让 Babel 在编译过程中， 引用模块 @babel/runtime提供一些辅助函数和类 ，从而避免在编译后的代码中重复出现相同的代码。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>首先，安装相关包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel-plugin-transform-runtime<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> @babel-runtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其次在 .babelrc 或 babel.config.js 中配置 @babel/plugin-transform-runtime ****插件，corejs 配置项控制是否引入 core-js 或 core-js 的版本。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-env"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 可选 false | 2 | 3</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们可以通过<strong>观察不同 corejs 配置和是否引入 babel-runtime 打包</strong>的结果理解一下作用。</p><h2 id="五、Demo-演示"><a href="#五、Demo-演示" class="headerlink" title="五、Demo 演示"></a>五、Demo 演示</h2><h3 id="控制引入-babel-runtime"><a href="#控制引入-babel-runtime" class="headerlink" title="控制引入 babel-runtime"></a>控制引入 babel-runtime</h3><p>转译代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来我们通过修改是否启用 babel-plugin-transform-runtime 控制 babel-runtime 的引入：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 不引入 babel-runtime</span><span class="token keyword">function</span> <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> Constructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">Constructor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"Cannot call a class as a function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">var</span> Animal <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createClass</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 引入 babel-runtime，corejs:false</span><span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token comment">/*! @babel/runtime/helpers/createClass */</span> <span class="token string">"./node_modules/.pnpm/@babel+runtime@7.23.9/node_modules/@babel/runtime/helpers/esm/createClass.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token comment">/*! @babel/runtime/helpers/classCallCheck */</span> <span class="token string">"./node_modules/.pnpm/@babel+runtime@7.23.9/node_modules/@babel/runtime/helpers/esm/classCallCheck.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Animal <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 babel-runtime 是通过引入模块实现 class 的，避免了多文件时定义了多个工具函数，有效减少了打包体积。</p><h3 id="控制-corejs-配置"><a href="#控制-corejs-配置" class="headerlink" title="控制 corejs 配置"></a>控制 corejs 配置</h3><p>转译代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为体现 corejs 的差异，我们使用两种实例方法 Promise、String.trimStart() 进行对比。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// corejs:false</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// corejs:2</span><span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _babel_runtime_corejs2_core_js_promise__WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token comment">/*! @babel/runtime-corejs2/core-js/promise */</span> <span class="token string">"./node_modules/.pnpm/@babel+runtime-corejs2@7.23.9/node_modules/@babel/runtime-corejs2/core-js/promise.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _babel_runtime_corejs2_core_js_promise__WEBPACK_IMPORTED_MODULE_0___default <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">n</span><span class="token punctuation">(</span>_babel_runtime_corejs2_core_js_promise__WEBPACK_IMPORTED_MODULE_0__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token function">_babel_runtime_corejs2_core_js_promise__WEBPACK_IMPORTED_MODULE_0___default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// corejs:3</span><span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _babel_runtime_corejs3_core_js_stable_promise__WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token comment">/*! @babel/runtime-corejs3/core-js-stable/promise */</span> <span class="token string">"./node_modules/.pnpm/@babel+runtime-corejs3@7.23.9/node_modules/@babel/runtime-corejs3/core-js-stable/promise.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _babel_runtime_corejs3_core_js_stable_promise__WEBPACK_IMPORTED_MODULE_0___default <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">n</span><span class="token punctuation">(</span>_babel_runtime_corejs3_core_js_stable_promise__WEBPACK_IMPORTED_MODULE_0__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _babel_runtime_corejs3_core_js_stable_instance_trim_start__WEBPACK_IMPORTED_MODULE_1__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token comment">/*! @babel/runtime-corejs3/core-js-stable/instance/trim-start */</span> <span class="token string">"./node_modules/.pnpm/@babel+runtime-corejs3@7.23.9/node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim-start.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* harmony import */</span> <span class="token keyword">var</span> _babel_runtime_corejs3_core_js_stable_instance_trim_start__WEBPACK_IMPORTED_MODULE_1___default <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">n</span><span class="token punctuation">(</span>_babel_runtime_corejs3_core_js_stable_instance_trim_start__WEBPACK_IMPORTED_MODULE_1__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token function">_babel_runtime_corejs3_core_js_stable_promise__WEBPACK_IMPORTED_MODULE_0___default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_babel_runtime_corejs3_core_js_stable_instance_trim_start__WEBPACK_IMPORTED_MODULE_1___default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依据结果可以看出，corejs: false 只对ES语法进行了转换。corejs：2 为我们的代码创建了一个沙盒环境，避免了全局空间污染。corejs: 3 在 corejs: 2的基础上加入了新的 polyfill 以处理更多的实例方法。</p><p>由此总结，对于 Babel &lt; 7.4.0 时，类库/工具项目应选择 @babel/runtime，其他项目选择 @babel/polyfill，当 Babel &gt;= 7.4.0 时，一律使用 @babel/runtime。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react原理篇幅-requestidlecallback</title>
      <link href="/LF_blog/interview/no-057.html"/>
      <url>/LF_blog/interview/no-057.html</url>
      
        <content type="html"><![CDATA[<h2 id="requestidlecallback"><a href="#requestidlecallback" class="headerlink" title="requestidlecallback"></a>requestidlecallback</h2><p>它提供了一种机制，允许开发者在浏览器空闲时运行低优先级的任务，而不会影响关键任务和动画的性能。</p><h3 id="requestidlecallback-执行阶段"><a href="#requestidlecallback-执行阶段" class="headerlink" title="requestidlecallback 执行阶段"></a>requestidlecallback 执行阶段</h3><blockquote><p>浏览器一帧里面做的任务</p><ol><li>处理事件的回调： 用户的点击 input </li><li>处理计时器的回调，event loop </li><li>开始渲染 begin帧</li><li>执行requestAnimationFrame 动画回调</li><li>计算机页面布局计算 合并到主线程</li><li>绘制 回流和重绘</li><li>如果此时还有空闲时间，执行requestIdleCallback （这个是有条件的！）</li></ol></blockquote><h3 id="requestidlecallback-基本用法"><a href="#requestidlecallback-基本用法" class="headerlink" title="requestidlecallback 基本用法"></a>requestidlecallback 基本用法</h3><p>requestidlecallback 接受一个回调函数 <code>callback</code> 并且在回调函数中会注入参数 <code>deadline</code></p><p>deadline有两个值:</p><ul><li><code>deadline.timeRemaining()</code> 返回是否还有空闲时间(毫秒)</li><li><code>deadline.didTimeout</code> 返回是否因为超时被强制执行(布尔值)</li></ul><p>options:</p><ul><li><code>{ timeout: 1000 }</code> 指定回调的最大等待时间（以毫秒为单位）。如果在指定的 timeout 时间内没有空闲时间，回调会强制执行，避免任务无限期推迟</li></ul><p>这个案例模拟了在浏览器空闲时，渲染<code>1000</code>条dom元素，非常流畅</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token number">30000</span><span class="token punctuation">;</span> <span class="token comment">// 定义需要生成的函数数量，即30000个任务</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存储任务函数的数组</span><span class="token comment">// 生成1000个函数并将其添加到数组中</span><span class="token keyword">function</span> <span class="token function">generateDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 每个函数的作用是将一个 &lt;div&gt; 元素插入到页面的 body 中</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// 将当前索引 + 1 作为内容</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">generateDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用函数生成任务数组</span><span class="token comment">// 用于调度和执行任务的函数</span><span class="token keyword">function</span> <span class="token function">workLoop</span><span class="token punctuation">(</span>deadline<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 检查当前空闲时间是否大于1毫秒，并且任务数组中还有任务未执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>deadline<span class="token punctuation">.</span><span class="token function">timeRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fn <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从任务数组中取出第一个函数</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行该函数，即插入对应的 &lt;div&gt; 元素到页面中</span>  <span class="token punctuation">}</span>  <span class="token comment">// 再次使用 requestIdleCallback 调度下一个空闲时间执行任务</span>  <span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>workLoop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 开始调度任务，在浏览器空闲时执行 workLoop</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>workLoop<span class="token punctuation">,</span><span class="token punctuation">{</span> timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常考的面试题"><a href="#常考的面试题" class="headerlink" title="常考的面试题"></a>常考的面试题</h2><h3 id="1-为什么React不用原生requestIdleCallback实现？"><a href="#1-为什么React不用原生requestIdleCallback实现？" class="headerlink" title="1. 为什么React不用原生requestIdleCallback实现？"></a>1. 为什么React不用原生requestIdleCallback实现？</h3><blockquote><ol><li><code>兼容性差</code> <code>Safari</code> 并不支持 <a href="https://caniuse.com/?search=requestIdleCallback">https://caniuse.com</a></li><li><code>控制精细度</code> React 要根据组件优先级、更新的紧急程度等信息，更精确地安排渲染的工作</li><li><code>执行时机</code>requestIdleCallback(callback) 回调函数的执行间隔是 50ms（W3C规定），也就是 20FPS，1秒内执行20次，间隔较长。</li><li><code>差异性</code> 每个浏览器实现该API的方式不同，导致执行时机有差异有的快有的慢</li></ol></blockquote><img src="/LF_blog/interview/no-057/1.png" class=""><h3 id="2-requestIdleCallback的替代方案"><a href="#2-requestIdleCallback的替代方案" class="headerlink" title="2. requestIdleCallback的替代方案?"></a>2. requestIdleCallback的替代方案?</h3><p><code>MessageChannel</code></p><p>选择 <code>MessageChannel</code> 的原因，是首先异步得是个宏任务，因为宏任务中会在下次事件循环中执行，不会阻塞当前页面的更新。<code>MessageChannel</code> 是一个宏任务。</p><p>没选常见的 <code>setTimeout</code>，是因为<code>MessageChannel</code> 能较快执行，在 0～1ms 内触发，像 setTimeout 即便设置 timeout 为 0 还是需要 4～5ms。相同时间下，MessageChannel 能够完成更多的任务。</p><img src="/LF_blog/interview/no-057/2.png" class=""><p>MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout">https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout</a></p><p>若浏览器不支持 <code>MessageChannel</code>，还是得降级为 setTimeout。</p><h3 id="3-MessageChannel基本用法"><a href="#3-MessageChannel基本用法" class="headerlink" title="3. MessageChannel基本用法"></a>3. MessageChannel基本用法</h3><blockquote><p>MessageChanne设计初衷是为了方便 我们在不同的上下文之间进行通讯，例如<code>web Worker</code>,<code>iframe</code> 它提供了两个端口（port1 和 port2），通过这些端口，消息可以在两个独立的线程之间双向传递</p></blockquote><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 创建 MessageChannel</span><span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port1 <span class="token operator">=</span> channel<span class="token punctuation">.</span>port1<span class="token punctuation">;</span><span class="token keyword">const</span> port2 <span class="token operator">=</span> channel<span class="token punctuation">.</span>port2<span class="token punctuation">;</span><span class="token comment">// 设置 port1 的消息处理函数</span>port1<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received by port1:'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  port1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'Reply from port1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向 port2 发送回复消息</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 设置 port2 的消息处理函数</span>port2<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received by port2:'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 通过 port2 发送消息给 port1</span>port2<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'Message from port2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-实现react简易版调度器"><a href="#4-实现react简易版调度器" class="headerlink" title="4. 实现react简易版调度器"></a>4. 实现react简易版调度器</h3><blockquote><p>React调度器给每一个任务分配了优先级</p><ol><li>ImmediatePriority : 立即执行的优先级，级别最高</li><li>UserBlockingPriority : 用户阻塞级别的优先级</li><li>NormalPriority : 正常的优先级</li><li>LowPriority : 低优先级</li><li>IdlePriority : 最低阶的优先级</li></ol></blockquote><p><code>同时还给每个任务设置了过期时间，过期时间越短，优先级越高</code></p><p><code>taskQueue 为数组，存储每个任务的信息，包括优先级，过期时间，回调函数</code></p><p><code>isPerformingWork 为布尔值，表示当前是否在执行任务</code></p><p><code>port 为MessageChannel，用于发送和接收消息</code></p><p>然后将任务添加到队列里面，并且添加进去的时候还需要根据优先级进行排序，然后调用workLoop 执行任务</p><p>对应的react源码地址：</p><p>在 <font style="color:rgb(38, 198, 218);">React</font> 源码中有目录 <font style="color:rgb(38, 198, 218);">packages/scheduler</font>，该目录就是 <font style="color:rgb(38, 198, 218);">React</font> 任务调度模块相关。<br>该目录 <font style="color:rgb(38, 198, 218);">src</font> 下<br><a href="https://github.com/facebook/react/blob/17.0.2/packages/scheduler/src/Scheduler.js">Scheduler.js</a> 实现了任务调度相关逻辑<br><a href="https://github.com/facebook/react/blob/17.0.2/packages/scheduler/src/SchedulerMinHeap.js">SchedulerMinHeap.js</a> 实现了堆</p><blockquote><p><code>React</code> 会有一系列规则定义每个任务的优先级，最后的表现就是 <code>React</code> 会将每个任务包装为一个任务对象 <a href="https://github.com/facebook/react/blob/17.0.2/packages/scheduler/src/Scheduler.js">newTask 319行</a>,该对象会存在两个属性 <code>id</code> 和 <code>sortIndex</code>，<br>其中 <code>sortIndex</code> 标识当前任务的优先级， <code>id</code> 标识每个任务的先后顺序。</p><p><code>React</code> 中存放任务的数组 <code>taskQueue</code> 会被模拟为一个小顶堆，<br>该小顶堆的 <code>compare</code> 逻辑是优先比较 <code>sortIndex</code>（即任务的优先级），<br>如果 <code>sortIndex</code> 相同，则比较 <code>id</code>（即任务创建的先后顺序）。</p><p>因为堆的性质是维护一个最值在堆顶，所以每次堆顶任务（对应任务数组中的第一个元素）就是当前任务队列中优先级最高的任务，这样只需要每次获取堆顶任务执行即可。</p><p>堆顶任务取出之后，只需要对小顶堆进行弹堆操作后自上向下的平衡调整，则堆顶又维护了当前任务队列中优先级最高的任务。</p><p>这样通过堆维护任务队列，每次获取优先级最高的任务的时间复杂度是 <code>O(1)</code> 的，插入和弹出操作后的平衡调整时间复杂度是 <code>O(logn)</code>的，整体是非常高效的。</p></blockquote><p>视频对应的源码</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> ImmediatePriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 立即执行的优先级, 级别最高 [点击事件，输入框，]</span><span class="token keyword">const</span> UserBlockingPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 用户阻塞级别的优先级, [滚动，拖拽这些]</span><span class="token keyword">const</span> NormalPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 正常的优先级 [redner 列表 动画 网络请求]</span><span class="token keyword">const</span> LowPriority <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 低优先级  [分析统计]</span><span class="token keyword">const</span> IdlePriority <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// 最低阶的优先级, 可以被闲置的那种 [console.log]</span><span class="token comment">// 获取当前时间</span><span class="token keyword">function</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SimpleScheduler</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 任务队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isPerformingWork <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 当前是否在执行任务</span>    <span class="token comment">// 使用 MessageChannel 处理任务调度</span>    <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> channel<span class="token punctuation">.</span>port2<span class="token punctuation">;</span>    channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performWorkUntilDeadline</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 调度任务</span>  <span class="token function">scheduleCallback</span><span class="token punctuation">(</span>priorityLevel<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>    <span class="token comment">// 根据优先级设置超时时间</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>priorityLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> ImmediatePriority<span class="token operator">:</span>        timeout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> UserBlockingPriority<span class="token operator">:</span>        timeout <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> LowPriority<span class="token operator">:</span>        timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> IdlePriority<span class="token operator">:</span>        timeout <span class="token operator">=</span> <span class="token number">1073741823</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> NormalPriority<span class="token operator">:</span>      <span class="token keyword">default</span><span class="token operator">:</span>        timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> task <span class="token operator">=</span> <span class="token punctuation">{</span>      callback<span class="token punctuation">,</span>      priorityLevel<span class="token punctuation">,</span>      expirationTime<span class="token operator">:</span> curTime <span class="token operator">+</span> timeout <span class="token comment">// 直接根据当前时间加上超时时间</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将任务加入队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">schedulePerformWorkUntilDeadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 通过 MessageChannel 调度执行任务</span>  <span class="token function">schedulePerformWorkUntilDeadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isPerformingWork<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isPerformingWork <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发 MessageChannel 调度</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 执行任务</span>  <span class="token function">performWorkUntilDeadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isPerformingWork <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">workLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isPerformingWork <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 任务循环</span>  <span class="token function">workLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> curTask <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>curTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> callback <span class="token operator">=</span> curTask<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行任务</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除已完成任务</span>      curTask <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取下一个任务</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 获取队列中的任务</span>  <span class="token function">peek</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 向队列中添加任务</span>  <span class="token function">push</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>expirationTime <span class="token operator">-</span> b<span class="token punctuation">.</span>expirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据优先级排序，优先级高的在前 从小到大</span>  <span class="token punctuation">}</span>  <span class="token comment">// 从队列中移除任务</span>  <span class="token function">pop</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 测试</span><span class="token keyword">const</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleCallback</span><span class="token punctuation">(</span>LowPriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Task 1: Low Priority'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleCallback</span><span class="token punctuation">(</span>ImmediatePriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Task 2: Immediate Priority'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleCallback</span><span class="token punctuation">(</span>IdlePriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Task 3: Idle Priority'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleCallback</span><span class="token punctuation">(</span>UserBlockingPriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Task 4: User Blocking Priority'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">scheduleCallback</span><span class="token punctuation">(</span>NormalPriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Task 5: Normal Priority'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行顺序为 <code>2 4 5 1 3</code></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于webapck打包构建的优化难点</title>
      <link href="/LF_blog/notes/no-028.html"/>
      <url>/LF_blog/notes/no-028.html</url>
      
        <content type="html"><![CDATA[<p>随着项目选代，构建时间逐渐变慢，采用swc替代babel优化打包，使构建速度提升2倍，并试验性使用esbuild更是提高了接近3倍，构建物降低26%</p><h2 id="swc-和-esbuild-为什么快"><a href="#swc-和-esbuild-为什么快" class="headerlink" title="swc 和 esbuild 为什么快"></a>swc 和 esbuild 为什么快</h2><p>Js 的执行流程：</p><img src="/LF_blog/notes/no-028/1.png" class=""><p>将源码转变成 AST 树很耗时，而 swc 是基于 Rust 语言的，它直接将源码根据不同平台编译成对应的二进制文件，直接跳过了转AST 步骤，速度大大提升。</p><p><strong>esbuild 为什么快</strong></p><ul><li>它是用 Go 语言编写的，并可以编译为本地代码；</li><li>大量使用并行操作；</li><li>未引用第三方依赖；</li><li>内存的高效利用，尽量复用 AST 数据。</li></ul><p><strong>swc 在 webpack 中使用</strong><br>在 webpack 中需要用 swc-loader 来使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// `.swcrc` can be used to configure swc</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"swc-loader"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>webpack 中需要用 esbuild-loader 来使用</strong></p><p>esbuild-loader 可以用于在 Webpack 中使用 esbuild 去编译 JS、TS；压缩脚本、样式等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(js|jsx)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'esbuild-loader'</span><span class="token punctuation">,</span>                <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'jsx'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'es2015'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 ref数组对象更新不及时一种解决办法</title>
      <link href="/LF_blog/notes/no-054.html"/>
      <url>/LF_blog/notes/no-054.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在用vue3使用ref 时，有时遇到数组更新不及时的情况。具体就是 arr = ref([]); 在JS代码中更新arr.value = [1,2,3]; 通过控制台打印数据发现arr已经更新了，但是页面中的数据却迟迟没有反应。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Vue3 的响应系统是基于 JavaScript 的Proxy实现的。这意味着 Vue 可以拦截对属性的读取和赋值操作，并在其中添加一些逻辑以实现响应式。Proxy是ES6引入的一个特性，它可以拦截并自定义JavaScript对象的操作。Vue 3利用Proxy来监听对象的属性访问和修改，从而实现了响应式的数据绑定。当你修改Vue实例中的数据时，Proxy会捕获到这个变化，并触发相应的更新操作，使得页面能够及时地响应数据的变化。</p><p>但是，当我直接将新的数组赋值给arr.value时，Vue 无法拦截到这个操作，因为这实际上是直接改变了arr.value这个对象引用指向的地址，而不是改变了这个对象的某个属性。Vue 只能监测到通过arr.value获取的值的变化，而无法监测到arr.value本身的变化。</p><h3 id="解决方法（一）"><a href="#解决方法（一）" class="headerlink" title="解决方法（一）"></a>解决方法（一）</h3><p>使用展开操作符: arr.value = […data];</p><p>使用展开操作符[…data]创建了一个新的数组实例，然后将这个新数组实例赋值给了arr.value，这样就相当于给arr.value这个对象添加了一个新的属性，并且 Vue 可以检测到这个属性的变化，从而触发页面重新渲染。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装 axios 拦截器实现用户无感刷新 access_token</title>
      <link href="/LF_blog/notes/no-031.html"/>
      <url>/LF_blog/notes/no-031.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近做项目的时候，涉及到一个单点登录，即是项目的登录页面，用的是公司共用的一个登录页面，在该页面统一处理逻辑。最终实现用户只需登录一次，就可以以登录状态访问公司旗下的所有网站。</p><blockquote><p>单点登录（Single Sign On ，简称 SSO），是目前比较流行的企业业务整合的解决方案之一，用于多个应用系统间，用户只需要登录一次就可以访问所有相互信任的应用系统。</p></blockquote><p>其中本文讲的是在登录后如何管理<code>access_token</code>和<code>refresh_token</code>，主要就是封装 axios 拦截器，从前端角度去分析</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>前置场景</li></ul><ol><li>进入该项目某个页面<code>http://xxxx.project.com/profile</code>需要登录，未登录就跳转至 SSO 登录平台，此时的登录网址 url 为<code>http://xxxxx.com/login?app_id=project_name_id&amp;redirect_url=http://xxxx.project.com/profile</code>，其中<code>app_id</code>是后台那边约定定义好的，<code>redirect_url</code>是成功授权后指定的回调地址。</li><li>输入账号密码且正确后，就会重定向回刚开始进入的页面，并在地址栏带一个参数 <code>?code=XXXXX</code>，即是<code>http://xxxx.project.com/profile?code=XXXXXX</code>，code 的值是使用一次后即无效，且 10 分钟内过期</li><li>立马获取这个 code 值再去请求一个 api <code>/access_token/authenticate</code>，携带参数<code>{ verify_code: code }</code>，并且该 api 已经自带<code>app_id</code>和<code>app_secret</code>两个固定值参数，通过它去请求授权的 api，请求成功后得到返回值<code>{ access_token: "xxxxxxx", refresh_token: "xxxxxxxx", expires_in: xxxxxxxx }</code>，存下<code>access_token</code>和<code>refresh_token</code>到 cookie 中（localStorage 也可以），此时用户就算登录成功了。</li><li><code>access_token</code>为标准 JWT 格式，是授权令牌，可以理解就是验证用户身份的，是应用在调用 api 访问和修改用户数据必须传入的参数（放在请求头 headers 里），2 小时后过期。也就是说，做完前三步后，你可以调用需要用户登录才能使用的 api；但是假如你什么都不操作，静静过去两个小时后，再去请求这些 api，就会报<code>access_token</code>过期，调用失败。</li><li>那么总不能 2 小时后就让用户退出登录吧，解决方法就是两小时后拿着过期的<code>access_token</code>和<code>refresh_token</code>（<code>refresh_token</code>过期时间一般长一些，比如一个月或更长）去请求<code>/refresh</code> api，返回结果为<code>{ access_token: "xxxxx", expires_in: xxxxx }</code>，换取新的<code>access_token</code>，新的<code>access_token</code>过期时间也是 2 小时，并重新存到 cookie，循环往复继续保持登录调用用户 api 了。<code>refresh_token</code>在限定过期时间内（比如一周或一个月等），下次就可以继续换取新的<code>access_token</code>，但过了限定时间，就算真正意义过期了，也就要重新输入账号密码来登录了。</li></ol><p>公司网站登录过期时间都只有两小时（token 过期时间），但又想让一个月内经常活跃的用户不再次登录，于是才有这样需求，避免了用户再次输入账号密码登录。</p><p>为什么要专门用一个 <code>refresh_token</code> 去更新 <code>access_token</code> 呢？首先<code>access_token</code>会关联一定的用户权限，如果用户授权更改了，这个<code>access_token</code>也是需要被刷新以关联新的权限的，如果没有 <code>refresh_token</code>，也可以刷新 <code>access_token</code>，但每次刷新都要用户输入登录用户名与密码，多麻烦。有了 <code>refresh_ token</code>，可以减少这个麻烦，客户端直接用 <code>refresh_token</code> 去更新 <code>access_token</code>，无需用户进行额外的操作。</p><p>说了这么多，或许有人会吐槽，一个登录用<code>access_token</code>就行了还要加个<code>refresh_token</code>搞得这么麻烦，或者有的公司<code>refresh_token</code>是后台包办的并不需要前端处理。但是，前置场景在那了，需求都是基于该场景下的。</p><ul><li>需求</li></ul><ol><li>当<code>access_token</code>过期的时候，要用<code>refresh_token</code>去请求获取新的<code>access_token</code>，前端需要做到用户无感知的刷新<code>access_token</code>。比如用户发起一个请求时，如果判断<code>access_token</code>已经过期，那么就先要去调用刷新 token 接口拿到新的<code>access_token</code>，再重新发起用户请求。</li><li>如果同时发起多个用户请求，第一个用户请求去调用刷新 token 接口，当接口还没返回时，其余的用户请求也依旧发起了刷新 token 接口请求，就会导致多个请求，这些请求如何处理，就是我们本文的内容了。</li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>写在请求拦截器里，在请求前，先利用最初请求返回的字段<code>expires_in</code>字段来判断<code>access_token</code>是否已经过期，若已过期，则将请求挂起，先刷新<code>access_token</code>后再继续请求。</p><ul><li>优点： 能节省 http 请求</li><li>缺点： 因为使用了本地时间判断，若本地时间被篡改，有校验失败的风险</li></ul><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>写在响应拦截器里，拦截返回后的数据。先发起用户请求，如果接口返回<code>access_token</code>过期，先刷新<code>access_token</code>，再进行一次重试。</p><ul><li>优点：无需判断时间</li><li>缺点： 会消耗多一次 http 请求</li></ul><p>在此我选择的是方案二。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这里使用 axios，其中做的是请求后拦截，所以用到的是 axios 的响应拦截器<code>axios.interceptors.response.use()</code>方法</p><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><ul><li>@utils/auth.js</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Cookies <span class="token keyword">from</span> <span class="token string">'js-cookie'</span><span class="token keyword">const</span> <span class="token constant">TOKEN_KEY</span> <span class="token operator">=</span> <span class="token string">'access_token'</span><span class="token keyword">const</span> <span class="token constant">REGRESH_TOKEN_KEY</span> <span class="token operator">=</span> <span class="token string">'refresh_token'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">TOKEN_KEY</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">token<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  Cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">TOKEN_KEY</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setRefreshToken</span> <span class="token operator">=</span> <span class="token parameter">token</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  Cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">REGRESH_TOKEN_KEY</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>request.js</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getToken<span class="token punctuation">,</span> setToken<span class="token punctuation">,</span> getRefreshToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@utils/auth'</span><span class="token comment">// 刷新 access_token 的接口</span><span class="token keyword">const</span> <span class="token function-variable function">refreshToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/auth/refresh'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">refresh_token</span><span class="token operator">:</span> <span class="token function">getRefreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 创建 axios 实例</span><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GATSBY_API_URL</span><span class="token punctuation">,</span>  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> response  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// token 过期或无效，返回 401 状态码，在此处理逻辑</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 给请求头添加 access_token</span><span class="token keyword">const</span> <span class="token function-variable function">setHeaderToken</span> <span class="token operator">=</span> <span class="token parameter">isNeedToken</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> accessToken <span class="token operator">=</span> isNeedToken <span class="token operator">?</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isNeedToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// api 请求需要携带 access_token</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>accessToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不存在 access_token 则跳转回登录页'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>accessToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 有些 api 并不需要用户授权使用，则不携带 access_token；默认不携带，需要传则设置第三个参数为 true</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isNeedToken <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">setHeaderToken</span><span class="token punctuation">(</span>isNeedToken<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">post</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isNeedToken <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">setHeaderToken</span><span class="token punctuation">(</span>isNeedToken<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> params<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来改造 request.js 中 axios 的响应拦截器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> response  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> error      <span class="token keyword">return</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> <span class="token punctuation">{</span> access_token <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>data          <span class="token function">setToken</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span>          config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>          <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'抱歉，您的登录状态已失效，请重新登录！'</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>约定返回 401 状态码表示<code>access_token</code>过期或者无效，如果用户发起一个请求后返回结果是<code>access_token</code>过期，则请求刷新<code>access_token</code>的接口。请求成功则进入<code>then</code>里面，重置配置，并刷新<code>access_token</code>并重新发起原来的请求。</p><p>但如果<code>refresh_token</code>也过期了，则请求也是返回 401。此时调试会发现函数进不到<code>refreshToken()</code>的<code>catch</code>里面，那是因为<code>refreshToken()</code>方法内部是也是用了同个<code>instance</code>实例，重复响应拦截器 401 的处理逻辑，但该函数本身就是刷新<code>access_token</code>，故需要把该接口排除掉，即：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>error<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'/auth/refresh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述代码就已经实现了无感刷新<code>access_token</code>了，当<code>access_token</code>没过期，正常返回；过期时，则 axios 内部进行了一次刷新 token 的操作，再重新发起原来的请求。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="防止多次刷新-token"><a href="#防止多次刷新-token" class="headerlink" title="防止多次刷新 token"></a>防止多次刷新 token</h3><p>如果 token 是过期的，那请求刷新<code>access_token</code>的接口返回也是有一定时间间隔，如果此时还有其他请求发过来，就会再执行一次刷新<code>access_token</code>的接口，就会导致多次刷新<code>access_token</code>。因此，我们需要做一个判断，定义一个标记判断当前是否处于刷新<code>access_token</code>的状态，如果处在刷新状态则不再允许其他请求调用该接口。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 标记是否正在刷新 token</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> response  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>error<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'/auth/refresh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> error      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRefreshing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isRefreshing <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">return</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> access_token <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>data            <span class="token function">setToken</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>            <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'抱歉，您的登录状态已失效，请重新登录！'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同时发起多个请求的处理"><a href="#同时发起多个请求的处理" class="headerlink" title="同时发起多个请求的处理"></a>同时发起多个请求的处理</h3><p>上面做法还不够，因为如果同时发起多个请求，在 token 过期的情况，第一个请求进入刷新 token 方法，则其他请求进去没有做任何逻辑处理，单纯返回失败，最终只执行了第一个请求，这显然不合理。</p><p>比如同时发起三个请求，第一个请求进入刷新 token 的流程，第二个和第三个请求需要存起来，等到 token 更新后再重新发起请求。</p><p>在此，我们定义一个数组<code>requests</code>，用来保存处于等待的请求，之后返回一个<code>Promise</code>，只要不调用<code>resolve</code>方法，该请求就会处于等待状态，则可以知道其实数组存的是函数；等到 token 更新完毕，则通过数组循环执行函数，即逐个执行 resolve 重发请求。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 标记是否正在刷新 token</span><span class="token keyword">let</span> requests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 存储待重发请求的数组</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> response  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>error<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'/auth/refresh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> error      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRefreshing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isRefreshing <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">return</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> access_token <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>data            <span class="token function">setToken</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>            <span class="token comment">// token 刷新后将数组的方法重新执行</span>            requests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span><span class="token punctuation">)</span>            requests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 重新请求完清空</span>            <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'抱歉，您的登录状态已失效，请重新登录！'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 返回未执行 resolve 的 Promise</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token comment">// 用函数形式将 resolve 存入，等待刷新后再执行</span>          requests<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">token</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终 request.js 代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getToken<span class="token punctuation">,</span> setToken<span class="token punctuation">,</span> getRefreshToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@utils/auth'</span><span class="token comment">// 刷新 access_token 的接口</span><span class="token keyword">const</span> <span class="token function-variable function">refreshToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/auth/refresh'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">refresh_token</span><span class="token operator">:</span> <span class="token function">getRefreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 创建 axios 实例</span><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">GATSBY_API_URL</span><span class="token punctuation">,</span>  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 标记是否正在刷新 token</span><span class="token keyword">let</span> requests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 存储待重发请求的数组</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> response  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>error<span class="token punctuation">.</span>config<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'/auth/refresh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> error      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRefreshing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isRefreshing <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">return</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> access_token <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>data            <span class="token function">setToken</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>access_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>            <span class="token comment">// token 刷新后将数组的方法重新执行</span>            requests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span><span class="token punctuation">)</span>            requests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 重新请求完清空</span>            <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'抱歉，您的登录状态已失效，请重新登录！'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 返回未执行 resolve 的 Promise</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token comment">// 用函数形式将 resolve 存入，等待刷新后再执行</span>          requests<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">token</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 给请求头添加 access_token</span><span class="token keyword">const</span> <span class="token function-variable function">setHeaderToken</span> <span class="token operator">=</span> <span class="token parameter">isNeedToken</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> accessToken <span class="token operator">=</span> isNeedToken <span class="token operator">?</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isNeedToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// api 请求需要携带 access_token</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>accessToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不存在 access_token 则跳转回登录页'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>accessToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 有些 api 并不需要用户授权使用，则无需携带 access_token；默认不携带，需要传则设置第三个参数为 true</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isNeedToken <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">setHeaderToken</span><span class="token punctuation">(</span>isNeedToken<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">post</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> isNeedToken <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">setHeaderToken</span><span class="token punctuation">(</span>isNeedToken<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> params<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业级项目是如何二次封装 Axios请求的</title>
      <link href="/LF_blog/notes/no-030.html"/>
      <url>/LF_blog/notes/no-030.html</url>
      
        <content type="html"><![CDATA[<p>极致的优化和封装了 Axios 请求数据的体验(请求重试，请求缓存，请求竞态, 参数加密)</p><h3 id="一、为什么要封装？"><a href="#一、为什么要封装？" class="headerlink" title="一、为什么要封装？"></a><strong>一、为什么要封装？</strong></h3><p>随着项目<code>规模增大</code>，如果每发起一次<code>HTTP</code>请求，就要把这些比如设置超时时间、设置请求头、根据项目环境判断使用哪个请求地址、错误处理等等操作，都需要写一遍，这种重复劳动不仅浪费时间，而且让代码变得冗余不堪，难以维护。总的来说，对 axios 进行二次封装有如下好处：</p><ol><li>代码封装，重用性高，减少代码量，减少维护难度</li><li>统一处理一些常规的问题，一劳永逸，比如 HTTP 错误</li><li>拦截请求和响应，提前对数据进行处理，如获取 TOKEN，修改配置项</li></ol><p>如果对 axios 的用法不熟悉的话，可以去参考 <a href="https://axios-http.com/docs/intro">axios官方文档</a> 进行学习。本文有点长，希望能够有耐心阅读完，相信对您有所帮助！</p><h3 id="二、如何二次封装？"><a href="#二、如何二次封装？" class="headerlink" title="二、如何二次封装？"></a><strong>二、如何二次封装？</strong></h3><p>既然是二次封装，那么我们一定要做好通用性以及扩展性，要能够满足我们项目开发的大部分需求，同时尽可能提供多的功能，比如：</p><ul><li>根据开发、测试、生产环境的不同，接口请求前缀需要加以区分</li><li>请求之前处理 config</li><li>根据接口返回的不同状态码做不同的处理</li><li>对 Get、Post 等方法进行封装，使用起来更方便</li><li>针对文件上传封装统一的请求方法</li><li>在响应拦截器中进行错误捕获</li><li>具备取消重复请求、错误请求重连的功能</li><li>对接口返回的数据进行处理，封装消息提示方法</li></ul><h3 id="三、前置知识准备"><a href="#三、前置知识准备" class="headerlink" title="三、前置知识准备"></a><strong>三、前置知识准备</strong></h3><h4 id="1-请求封装的目录结构"><a href="#1-请求封装的目录结构" class="headerlink" title="1. 请求封装的目录结构"></a><strong>1. 请求封装的目录结构</strong></h4><img src="/LF_blog/notes/no-030/1.png" class=""><ul><li>Axios.ts：请求实体类，包括实例创建、拦截器配置、请求方法封装</li><li>axiosCancel.ts：请求取消实体类，具备添加请求、移除请求、清空请求等方法</li><li>axiosRetry.ts：错误请求重连实体类，请求重试机制的具体逻辑</li><li>axiosTransform.ts：拦截器、错误请求、数据处理的具体逻辑</li><li>checkStatus.ts：根据接口返回的不同状态码做不同的处理</li><li>helper.ts：辅助、工具类函数</li><li>index.ts：请求调用入口，返回一个请求实体类对象</li></ul><h4 id="2-定义请求的相关类型"><a href="#2-定义请求的相关类型" class="headerlink" title="2. 定义请求的相关类型"></a><strong>2. 定义请求的相关类型</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @description: 请求结果类型 */</span><span class="token keyword">export</span> <span class="token keyword">enum</span> ResultEnum <span class="token punctuation">{</span>  <span class="token constant">SUCCESS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token constant">ERROR</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span>    <span class="token constant">TYPE</span> <span class="token operator">=</span> <span class="token string">'success'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token comment">/** * @description: 请求方法类型 */</span><span class="token keyword">export</span> <span class="token keyword">enum</span> RequestEnum <span class="token punctuation">{</span>  <span class="token constant">GET</span> <span class="token operator">=</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token constant">POST</span> <span class="token operator">=</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token constant">PUT</span> <span class="token operator">=</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span>    <span class="token constant">DELETE</span> <span class="token operator">=</span> <span class="token string">'DELETE'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token comment">/** * @description:  Content类型 */</span><span class="token keyword">export</span> <span class="token keyword">enum</span> ContentTypeEnum <span class="token punctuation">{</span>  <span class="token comment">// json</span>  <span class="token constant">JSON</span> <span class="token operator">=</span> <span class="token string">'application/json;charset=UTF-8'</span><span class="token punctuation">,</span>    <span class="token comment">// form-data qs</span>    <span class="token constant">FORM_URLENCODED</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded;charset=UTF-8'</span><span class="token punctuation">,</span>    <span class="token comment">// form-data  upload</span>    <span class="token constant">FORM_DATA</span> <span class="token operator">=</span> <span class="token string">'multipart/form-data;charset=UTF-8'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token comment">/** * @description:  请求头类型 */</span><span class="token keyword">export</span> <span class="token keyword">enum</span> ConfigEnum <span class="token punctuation">{</span>  <span class="token comment">// TOKEN</span>  <span class="token constant">TOKEN</span> <span class="token operator">=</span> <span class="token string">'X-Access-Token'</span><span class="token punctuation">,</span>    <span class="token comment">// TIMESTAMP</span>    <span class="token constant">TIMESTAMP</span> <span class="token operator">=</span> <span class="token string">'X-TIMESTAMP'</span><span class="token punctuation">}</span><span class="token keyword">export</span> type ErrorMessageMode <span class="token operator">=</span> <span class="token string">'none'</span> <span class="token operator">|</span> <span class="token string">'modal'</span> <span class="token operator">|</span> <span class="token string">'message'</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">export</span> type SuccessMessageMode <span class="token operator">=</span> <span class="token string">'none'</span> <span class="token operator">|</span> <span class="token string">'success'</span> <span class="token operator">|</span> <span class="token string">'error'</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RequestOptions</span> <span class="token punctuation">{</span>  <span class="token comment">// 将请求参数拼接到url</span>  joinParamsToUrl<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token comment">// 格式化请求参数时间</span>  formatDate<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token comment">// 是否处理请求结果</span>  isTransformResponse<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token comment">// 是否返回本地响应头,需要获取响应头时使用此属性</span>  isReturnNativeResponse<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token comment">// Whether to join url</span>  joinPrefix<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token comment">// 接口地址，如果保留为空，则使用默认值</span>  apiUrl<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token comment">// 请求拼接路径</span>  urlPrefix<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token comment">// 错误消息提示类型</span>  errorMessageMode<span class="token operator">?</span><span class="token operator">:</span> ErrorMessageMode<span class="token punctuation">;</span>  <span class="token comment">// 成功消息提示类型</span>  successMessageMode<span class="token operator">?</span><span class="token operator">:</span> SuccessMessageMode<span class="token punctuation">;</span>  <span class="token comment">// 是否添加时间戳</span>  joinTime<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  ignoreCancelToken<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token comment">//是否在标头中发送令牌</span>  withToken<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token comment">// 请求重试机制</span>  retryRequest<span class="token operator">?</span><span class="token operator">:</span> RetryRequest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RetryRequest</span> <span class="token punctuation">{</span>  <span class="token literal-property property">isOpenRetry</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token literal-property property">count</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token literal-property property">waitTime</span><span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token literal-property property">code</span><span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'success'</span> <span class="token operator">|</span> <span class="token string">'error'</span> <span class="token operator">|</span> <span class="token string">'warning'</span><span class="token punctuation">;</span><span class="token literal-property property">message</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token literal-property property">msg</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、具体封装细节"><a href="#四、具体封装细节" class="headerlink" title="四、具体封装细节"></a><strong>四、具体封装细节</strong></h3><p>把上面列出的一些内容准备好以后，便可以开始进行 <code>axios</code> 的二次封装啦！</p><h4 id="1-创建请求实体类"><a href="#1-创建请求实体类" class="headerlink" title="1. 创建请求实体类"></a><strong>1. 创建请求实体类</strong></h4><p>我们主要关注 class VAxios 里的逻辑（其他的引用代码可以不管），包括创建 axios 实例，请求拦截器、响应拦截器的配置，不过这里将拦截器里的具体逻辑抽离到其他文件中，待会再分析具体的逻辑。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> type <span class="token punctuation">{</span> AxiosRequestConfig<span class="token punctuation">,</span> AxiosInstance<span class="token punctuation">,</span> AxiosResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosCanceler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./axiosCancel'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> isFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/is'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> cloneDeep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'lodash-es'</span><span class="token punctuation">;</span><span class="token keyword">import</span> type <span class="token punctuation">{</span> RequestOptions<span class="token punctuation">,</span> CreateAxiosOptions<span class="token punctuation">,</span> Result<span class="token punctuation">,</span> UploadFileParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./types'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ContentTypeEnum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/enums/httpEnum'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./axiosTransform'</span><span class="token punctuation">;</span><span class="token comment">/** * @description:  axios模块 */</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VAxios</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token literal-property property">axiosInstance</span><span class="token operator">:</span> AxiosInstance<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token literal-property property">options</span><span class="token operator">:</span> CreateAxiosOptions<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">options</span><span class="token operator">:</span> CreateAxiosOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setupInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getAxios</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AxiosInstance <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * @description: 重新配置axios   */</span>  <span class="token function">configAxios</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> CreateAxiosOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createAxios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * @description: 设置通用header   */</span>  <span class="token function">setHeader</span><span class="token punctuation">(</span>headers<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * @description:  创建axios实例   */</span>  <span class="token keyword">private</span> <span class="token function">createAxios</span><span class="token punctuation">(</span>config<span class="token operator">:</span> CreateAxiosOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> transform <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">;</span>    <span class="token keyword">return</span> transform<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * @description: 拦截器配置   */</span>  <span class="token keyword">private</span> <span class="token function">setupInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> transform <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>transform<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>      requestInterceptors<span class="token punctuation">,</span>      requestInterceptorsCatch<span class="token punctuation">,</span>      responseInterceptors<span class="token punctuation">,</span>      responseInterceptorsCatch<span class="token punctuation">,</span>    <span class="token punctuation">}</span> <span class="token operator">=</span> transform<span class="token punctuation">;</span>    <span class="token keyword">const</span> axiosCanceler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AxiosCanceler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 请求拦截器配置处理</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> AxiosRequestConfig</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> ignoreCancelToken <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>      <span class="token keyword">const</span> ignoreCancel <span class="token operator">=</span>        ignoreCancelToken <span class="token operator">!==</span> <span class="token keyword">undefined</span>        <span class="token operator">?</span> ignoreCancelToken        <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>requestOptions<span class="token operator">?.</span>ignoreCancelToken<span class="token punctuation">;</span>      <span class="token operator">!</span>ignoreCancel <span class="token operator">&amp;&amp;</span> axiosCanceler<span class="token punctuation">.</span><span class="token function">addPending</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>requestInterceptors <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>requestInterceptors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        config <span class="token operator">=</span> <span class="token function">requestInterceptors</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 请求拦截器错误捕获</span>    requestInterceptorsCatch <span class="token operator">&amp;&amp;</span>      <span class="token function">isFunction</span><span class="token punctuation">(</span>requestInterceptorsCatch<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> requestInterceptorsCatch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 响应结果拦截器处理</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      res <span class="token operator">&amp;&amp;</span> axiosCanceler<span class="token punctuation">.</span><span class="token function">removePending</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>responseInterceptors <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>responseInterceptors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">=</span> <span class="token function">responseInterceptors</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 响应结果拦截器错误捕获</span>    responseInterceptorsCatch <span class="token operator">&amp;&amp;</span>      <span class="token function">isFunction</span><span class="token punctuation">(</span>responseInterceptorsCatch<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> responseInterceptorsCatch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们在 axios 实例类中封装请求方法（Get、Post、Put、Delete）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @description:  axios模块 */</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VAxios</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">/**   * @description:   请求方法   */</span>  request<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> RequestOptions<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token literal-property property">conf</span><span class="token operator">:</span> AxiosRequestConfig <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> transform <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> requestOptions <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token literal-property property">opt</span><span class="token operator">:</span> RequestOptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> requestOptions<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> beforeRequestHook<span class="token punctuation">,</span> requestCatch<span class="token punctuation">,</span> transformRequestData <span class="token punctuation">}</span> <span class="token operator">=</span> transform <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beforeRequestHook <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>beforeRequestHook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      conf <span class="token operator">=</span> <span class="token function">beforeRequestHook</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//这里重新 赋值成最新的配置</span>    <span class="token comment">// @ts-ignore</span>    conf<span class="token punctuation">.</span>requestOptions <span class="token operator">=</span> opt<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>axiosInstance        <span class="token punctuation">.</span>request<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> AxiosResponse<span class="token operator">&lt;</span>Result<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token comment">// 请求是否被取消</span>          <span class="token keyword">const</span> isCancel <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>transformRequestData <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>transformRequestData<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isCancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">transformRequestData</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">reject</span><span class="token punctuation">(</span>err <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'request error!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>res <span class="token keyword">as</span> unknown <span class="token keyword">as</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> Error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCatch <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>requestCatch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">requestCatch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  get<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> RequestOptions<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">,</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  post<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> RequestOptions<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">,</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  put<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> RequestOptions<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">,</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'PUT'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">delete</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> RequestOptions<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">,</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'DELETE'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-状态码统一处理"><a href="#2-状态码统一处理" class="headerlink" title="2. 状态码统一处理"></a><strong>2. 状态码统一处理</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> type <span class="token punctuation">{</span> ErrorMessageMode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/#/axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/hooks/web/useMessage'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStoreWithOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/store/modules/user'</span><span class="token punctuation">;</span><span class="token keyword">import</span> projectSetting <span class="token keyword">from</span> <span class="token string">'/@/settings/projectSetting'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> SessionTimeoutProcessingEnum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/enums/appEnum'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> createMessage<span class="token punctuation">,</span> createErrorModal <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> error <span class="token operator">=</span> createMessage<span class="token punctuation">.</span>error<span class="token operator">!</span><span class="token punctuation">;</span><span class="token keyword">const</span> stp <span class="token operator">=</span> projectSetting<span class="token punctuation">.</span>sessionTimeoutProcessing<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">checkStatus</span><span class="token punctuation">(</span>status<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">errorMessageMode</span><span class="token operator">:</span> ErrorMessageMode <span class="token operator">=</span> <span class="token string">'message'</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStoreWithOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> errMessage <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">400</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">401</span><span class="token operator">:</span>      userStore<span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      errMessage <span class="token operator">=</span> msg <span class="token operator">||</span> <span class="token string">'用户没有权限（令牌、用户名、密码错误）!'</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>stp <span class="token operator">===</span> SessionTimeoutProcessingEnum<span class="token punctuation">.</span><span class="token constant">PAGE_COVERAGE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userStore<span class="token punctuation">.</span><span class="token function">setSessionTimeout</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        userStore<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">403</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'用户得到授权，但是访问是被禁止的!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">404</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'网络请求错误,未找到该资源!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">405</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'网络请求错误,请求方法未允许!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">408</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'网络请求超时!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">500</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'服务器错误,请联系管理员!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">501</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'网络未实现!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">502</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'网络错误!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">503</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'服务不可用，服务器暂时过载或维护!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">504</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'网络超时!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">505</span><span class="token operator">:</span>      errMessage <span class="token operator">=</span> <span class="token string">'http版本不支持该请求!'</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>errMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMessageMode <span class="token operator">===</span> <span class="token string">'modal'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">createErrorModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'错误提示'</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> errMessage <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMessageMode <span class="token operator">===</span> <span class="token string">'message'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">content</span><span class="token operator">:</span> errMessage<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">global_error_message_status_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在响应错误处理方法中，调用 checkStatus 方法，显示不同状态码对应的信息<img src="/LF_blog/notes/no-030/2.png" class=""></p><h4 id="3-封装辅助类函数"><a href="#3-封装辅助类函数" class="headerlink" title="3. 封装辅助类函数"></a><strong>3. 封装辅助类函数</strong></h4><p>下面的这两个方法，在请求之前处理 config 中会用到，都是与时间有关的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> isObject<span class="token punctuation">,</span> isString <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/utils/is'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">DATE_TIME_FORMAT</span> <span class="token operator">=</span> <span class="token string">'YYYY-MM-DD HH:mm'</span><span class="token punctuation">;</span><span class="token comment">/** * @description: 拼接时间戳 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">joinTimestamp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">join</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> restful <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token operator">|</span> object <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>join<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> restful <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>restful<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">?_t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>now<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">_t</span><span class="token operator">:</span> now <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * @description: 格式化请求参数中的时间 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">formatRequestDate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">params</span><span class="token operator">:</span> Recordable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>_isAMomentObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">DATE_TIME_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">formatRequestDate</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-取消重复请求"><a href="#4-取消重复请求" class="headerlink" title="4. 取消重复请求"></a><strong>4. 取消重复请求</strong></h4><p>当发起一个请求还没得到响应时，又发起相同的请求，为了节省网络资源，此时需要将前一个请求取消，保留最近发起的请求。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios<span class="token punctuation">,</span> <span class="token punctuation">{</span> AxiosRequestConfig<span class="token punctuation">,</span> Canceler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> isFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/is/index'</span><span class="token punctuation">;</span><span class="token comment">// 声明一个 Map 用于存储每个请求的标识 和 取消函数</span><span class="token keyword">let</span> pendingMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Canceler<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getPendingUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> AxiosRequestConfig</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">[</span>config<span class="token punctuation">.</span>method<span class="token punctuation">,</span> config<span class="token punctuation">.</span>url<span class="token punctuation">,</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AxiosCanceler</span> <span class="token punctuation">{</span>  <span class="token comment">/**   * 添加请求   * @param {Object} config   */</span>  <span class="token function">addPending</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> AxiosRequestConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removePending</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">getPendingUrl</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span>cancelToken <span class="token operator">=</span>      config<span class="token punctuation">.</span>cancelToken <span class="token operator">||</span>      <span class="token keyword">new</span> <span class="token class-name">axios<span class="token punctuation">.</span>CancelToken</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cancel</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pendingMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 如果 pending 中不存在当前请求，则添加进去</span>          pendingMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> cancel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * @description: 清空所有pending   */</span>  <span class="token function">removeAllPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pendingMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cancel</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      cancel <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>cancel<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pendingMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * 移除请求   * @param {Object} config   */</span>  <span class="token function">removePending</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> AxiosRequestConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">getPendingUrl</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 如果在 pending 中存在当前请求标识，需要取消当前请求，并且移除</span>      <span class="token keyword">const</span> cancel <span class="token operator">=</span> pendingMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>      cancel <span class="token operator">&amp;&amp;</span> <span class="token function">cancel</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>      pendingMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * @description: 重置   */</span>  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    pendingMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Canceler<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AxiosCanceler 类的使用时机：首先准备一个 Map 用于存储每个请求的标识和取消函数，在请求拦截器中调用添加请求的方法，然后判断 Map 结构中是否已有该请求，如果是重复请求，则将之前的请求取消掉，axios.CancelToken 可以实现取消请求；反之将该请求放入 Map 结构中；在响应拦截器中，当请求已经完成后，调用方法从 Map 结构中移除请求。</p><img src="/LF_blog/notes/no-030/3.png" class=""><h4 id="5-错误请求重连"><a href="#5-错误请求重连" class="headerlink" title="5. 错误请求重连"></a><strong>5. 错误请求重连</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosError<span class="token punctuation">,</span> AxiosInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token comment">/** *  请求重试机制 */</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AxiosRetry</span> <span class="token punctuation">{</span>  <span class="token comment">/**   * 重试   */</span>  <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">axiosInstance</span><span class="token operator">:</span> AxiosInstance<span class="token punctuation">,</span> <span class="token literal-property property">error</span><span class="token operator">:</span> AxiosError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// @ts-ignore</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>response<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> waitTime<span class="token punctuation">,</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token operator">?.</span>requestOptions<span class="token operator">?.</span>retryRequest <span class="token operator">??</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span>__retryCount <span class="token operator">=</span> config<span class="token punctuation">.</span>__retryCount <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>__retryCount <span class="token operator">&gt;=</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    config<span class="token punctuation">.</span>__retryCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//请求返回后config的header不正确造成重试请求失败,删除返回headers采用默认headers</span>    <span class="token keyword">delete</span> config<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">axiosInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * 延迟   */</span>  <span class="token keyword">private</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">waitTime</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> waitTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样是在响应错误处理方法中使用 AxiosRetry 类，可以在请求参数中配置是否开启请求重连，同时可以设置最大重试次数以及等待时间：</p><img src="/LF_blog/notes/no-030/4.png" class=""><img src="/LF_blog/notes/no-030/5.png" class=""><h4 id="6-拦截器具体逻辑、数据（错误）处理"><a href="#6-拦截器具体逻辑、数据（错误）处理" class="headerlink" title="6. 拦截器具体逻辑、数据（错误）处理"></a><strong>6. 拦截器具体逻辑、数据（错误）处理</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> type <span class="token punctuation">{</span> AxiosRequestConfig<span class="token punctuation">,</span> AxiosResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> type <span class="token punctuation">{</span> RequestOptions<span class="token punctuation">,</span> Result <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/#/axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> checkStatus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./checkStatus'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RequestEnum<span class="token punctuation">,</span> ResultEnum<span class="token punctuation">,</span> ConfigEnum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/enums/httpEnum'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/hooks/web/useMessage'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> isString <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/utils/is'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/utils/auth'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useErrorLogStoreWithOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/store/modules/errorLog'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> setObjToUrlParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/utils'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> joinTimestamp<span class="token punctuation">,</span> formatRequestDate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./helper'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStoreWithOut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/store/modules/user'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosRetry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/utils/http/axios/axiosRetry'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> createMessage<span class="token punctuation">,</span> createErrorModal <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CreateAxiosOptions</span> <span class="token keyword">extends</span> <span class="token class-name">AxiosRequestConfig</span> <span class="token punctuation">{</span>  authenticationScheme<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>transform<span class="token operator">?</span><span class="token operator">:</span> AxiosTransform<span class="token punctuation">;</span>requestOptions<span class="token operator">?</span><span class="token operator">:</span> RequestOptions<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> abstract <span class="token keyword">class</span> <span class="token class-name">AxiosTransform</span> <span class="token punctuation">{</span>  <span class="token comment">/**   * @description: Process configuration before request   * @description: Process configuration before request   */</span>  beforeRequestHook<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> RequestOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosRequestConfig<span class="token punctuation">;</span>  <span class="token comment">/**   * @description: Request successfully processed   */</span>  transformRequestHook<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> RequestOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token punctuation">;</span>  <span class="token comment">/**   * @description: 请求失败处理   */</span>  requestCatchHook<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> Error<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> RequestOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">/**   * @description: 请求之前的拦截器   */</span>  requestInterceptors<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> CreateAxiosOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosRequestConfig<span class="token punctuation">;</span>  <span class="token comment">/**   * @description: 请求之后的拦截器   */</span>  responseInterceptors<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosResponse<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">/**   * @description: 请求之前的拦截器错误处理   */</span>  requestInterceptorsCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">error</span><span class="token operator">:</span> Error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token comment">/**   * @description: 请求之后的拦截器错误处理   */</span>  responseInterceptorsCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">error</span><span class="token operator">:</span> Error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @description: 数据处理，方便区分多种处理方式 */</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> AxiosTransform <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">/**   * @description: 处理请求数据。如果数据不是预期格式，可直接抛出错误   */</span>  <span class="token function-variable function">transformRequestHook</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> RequestOptions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> isTransformResponse<span class="token punctuation">,</span> isReturnNativeResponse <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>    <span class="token comment">// 是否返回原生响应头 比如：需要获取响应头时使用该属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isReturnNativeResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 不进行任何处理，直接返回</span>    <span class="token comment">// 用于页面代码可能需要直接获取code，data，message这些信息时开启</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isTransformResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 错误的时候返回</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请求出错，请稍候重试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//  这里 code，result，message为 后台统一的字段，需要修改为自己项目中的接口返回格式</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> result<span class="token punctuation">,</span> message<span class="token punctuation">,</span> success<span class="token punctuation">,</span> info<span class="token punctuation">,</span> msg <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token comment">// 这里逻辑可以根据项目进行修改</span>    <span class="token comment">// 兼容导出接口</span>    <span class="token keyword">let</span> hasSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      hasSuccess <span class="token operator">=</span> data <span class="token operator">&amp;&amp;</span> Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">SUCCESS</span> <span class="token operator">||</span> code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> message <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>successMessageMode <span class="token operator">===</span> <span class="token string">'success'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//信息成功提示</span>        createMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 兼容导出接口</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 在此处根据自己项目的实际情况对不同的code执行不同的操作</span>    <span class="token comment">// 如果不希望中断当前请求，请return数据，否则直接抛出异常即可</span>    <span class="token keyword">let</span> timeoutMsg <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">TIMEOUT</span><span class="token operator">:</span>        timeoutMsg <span class="token operator">=</span> <span class="token string">'登录超时,请重新登录!'</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStoreWithOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userStore<span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userStore<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>          timeoutMsg <span class="token operator">=</span> message<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// errorMessageMode=‘modal’的时候会显示modal错误弹窗，而不是消息提示，用于一些比较重要的错误</span>    <span class="token comment">// errorMessageMode='none' 一般是调用时明确表示不希望自动弹出错误提示</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>errorMessageMode <span class="token operator">===</span> <span class="token string">'modal'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">createErrorModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'错误提示'</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> timeoutMsg <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>errorMessageMode <span class="token operator">===</span> <span class="token string">'message'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      createMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>timeoutMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>timeoutMsg <span class="token operator">||</span> <span class="token string">'请求出错，请稍候重试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 请求之前处理config</span>  <span class="token function-variable function">beforeRequestHook</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> apiUrl<span class="token punctuation">,</span> joinPrefix<span class="token punctuation">,</span> joinParamsToUrl<span class="token punctuation">,</span> formatDate<span class="token punctuation">,</span> joinTime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> urlPrefix <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>joinPrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>      config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>urlPrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>apiUrl <span class="token operator">&amp;&amp;</span> <span class="token function">isString</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> params <span class="token operator">=</span> config<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> config<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    formatDate <span class="token operator">&amp;&amp;</span> data <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">formatRequestDate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>method<span class="token operator">?.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> RequestEnum<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 给 get 请求加上时间戳参数，避免从缓存中拿数据。</span>        config<span class="token punctuation">.</span>params <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>params <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">joinTimestamp</span><span class="token punctuation">(</span>joinTime<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 兼容restful风格</span>        config<span class="token punctuation">.</span>url <span class="token operator">=</span> config<span class="token punctuation">.</span>url <span class="token operator">+</span> params <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">joinTimestamp</span><span class="token punctuation">(</span>joinTime<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        formatDate <span class="token operator">&amp;&amp;</span> <span class="token function">formatRequestDate</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          config<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>          config<span class="token punctuation">.</span>params <span class="token operator">=</span> params<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment">// 非GET请求如果没有提供data，则将params视为data</span>          config<span class="token punctuation">.</span>data <span class="token operator">=</span> params<span class="token punctuation">;</span>          config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>joinParamsToUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>          config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token function">setObjToUrlParams</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url <span class="token keyword">as</span> string<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>params<span class="token punctuation">,</span> config<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 兼容restful风格</span>        config<span class="token punctuation">.</span>url <span class="token operator">=</span> config<span class="token punctuation">.</span>url <span class="token operator">+</span> params<span class="token punctuation">;</span>        config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * @description: 请求拦截器处理   */</span>  <span class="token function-variable function">requestInterceptors</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">config</span><span class="token operator">:</span> Recordable<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 请求之前处理config</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>config <span class="token keyword">as</span> Recordable<span class="token punctuation">)</span><span class="token operator">?.</span>requestOptions<span class="token operator">?.</span>withToken <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// jwt token</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> options<span class="token punctuation">.</span>authenticationScheme <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>options<span class="token punctuation">.</span>authenticationScheme<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> token<span class="token punctuation">;</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>ConfigEnum<span class="token punctuation">.</span><span class="token constant">TOKEN</span><span class="token punctuation">]</span> <span class="token operator">=</span> token<span class="token punctuation">;</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'ClientToken'</span><span class="token punctuation">]</span> <span class="token operator">=</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * @description: 响应拦截器处理   */</span>  <span class="token function-variable function">responseInterceptors</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> AxiosResponse<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">/**   * @description: 响应错误处理   */</span>  <span class="token function-variable function">responseInterceptorsCatch</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">error</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> errorLogStore <span class="token operator">=</span> <span class="token function">useErrorLogStoreWithOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    errorLogStore<span class="token punctuation">.</span><span class="token function">addAjaxErrorInfo</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> response<span class="token punctuation">,</span> code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> error <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> errorMessageMode <span class="token operator">=</span> config<span class="token operator">?.</span>requestOptions<span class="token operator">?.</span>errorMessageMode <span class="token operator">||</span> <span class="token string">'none'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> string <span class="token operator">=</span> response<span class="token operator">?.</span>data<span class="token operator">?.</span>message <span class="token operator">??</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token literal-property property">err</span><span class="token operator">:</span> string <span class="token operator">=</span> error<span class="token operator">?.</span>toString<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> errMessage <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token string">'ECONNABORTED'</span> <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        errMessage <span class="token operator">=</span> <span class="token string">'接口请求超时,请刷新页面重试!'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'Network Error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        errMessage <span class="token operator">=</span> <span class="token string">'网络异常，请检查您的网络连接是否正常!'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>errMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMessageMode <span class="token operator">===</span> <span class="token string">'modal'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">createErrorModal</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'错误提示'</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> errMessage <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMessageMode <span class="token operator">===</span> <span class="token string">'message'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          createMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">checkStatus</span><span class="token punctuation">(</span>error<span class="token operator">?.</span>response<span class="token operator">?.</span>status<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> errorMessageMode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加自动重试机制 保险起见 只针对GET请求</span>    <span class="token keyword">const</span> retryRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AxiosRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> isOpenRetry <span class="token punctuation">}</span> <span class="token operator">=</span> config<span class="token punctuation">.</span>requestOptions<span class="token punctuation">.</span>retryRequest<span class="token punctuation">;</span>    config<span class="token punctuation">.</span>method<span class="token operator">?.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> RequestEnum<span class="token punctuation">.</span><span class="token constant">GET</span> <span class="token operator">&amp;&amp;</span>      isOpenRetry <span class="token operator">&amp;&amp;</span>      <span class="token comment">// @ts-ignore</span>      retryRequest<span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span>axiosInstance<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-请求配置项、调用入口"><a href="#7-请求配置项、调用入口" class="headerlink" title="7. 请求配置项、调用入口"></a><strong>7. 请求配置项、调用入口</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// axios配置  可自行根据项目进行更改，只需更改该文件即可，其他文件可以不动</span><span class="token keyword">import</span> <span class="token punctuation">{</span> VAxios <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ContentTypeEnum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/enums/httpEnum'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useGlobSetting <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/hooks/setting'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> deepMerge <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CreateAxiosOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./types'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> transform <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./axiosTransform'</span><span class="token punctuation">;</span><span class="token keyword">const</span> globSetting <span class="token operator">=</span> <span class="token function">useGlobSetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> urlPrefix <span class="token operator">=</span> globSetting<span class="token punctuation">.</span>urlPrefix <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createAxios</span><span class="token punctuation">(</span><span class="token parameter">opt<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>CreateAxiosOptions<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VAxios</span><span class="token punctuation">(</span>    <span class="token function">deepMerge</span><span class="token punctuation">(</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>        <span class="token literal-property property">authenticationScheme</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token comment">// 接口前缀</span>        <span class="token literal-property property">prefixUrl</span><span class="token operator">:</span> urlPrefix<span class="token punctuation">,</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> ContentTypeEnum<span class="token punctuation">.</span><span class="token constant">JSON</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 数据处理方式</span>        transform<span class="token punctuation">,</span>        <span class="token comment">// 配置项，下面的选项都可以在独立的接口请求中覆盖</span>        <span class="token literal-property property">requestOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token comment">// 默认将prefix 添加到url</span>          <span class="token literal-property property">joinPrefix</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">// 是否返回原生响应头 比如：需要获取响应头时使用该属性</span>          <span class="token literal-property property">isReturnNativeResponse</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment">// 需要对返回数据进行处理</span>          <span class="token literal-property property">isTransformResponse</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">// post请求的时候添加参数到url</span>          <span class="token literal-property property">joinParamsToUrl</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment">// 格式化提交参数时间</span>          <span class="token literal-property property">formatDate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">// 消息提示类型</span>          <span class="token literal-property property">errorMessageMode</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>          <span class="token comment">// 接口地址</span>          <span class="token literal-property property">apiUrl</span><span class="token operator">:</span> globSetting<span class="token punctuation">.</span>apiUrl<span class="token punctuation">,</span>          <span class="token comment">// 接口拼接地址</span>          <span class="token literal-property property">urlPrefix</span><span class="token operator">:</span> urlPrefix<span class="token punctuation">,</span>          <span class="token comment">//  是否加入时间戳</span>          <span class="token literal-property property">joinTime</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">// 忽略重复请求</span>          <span class="token literal-property property">ignoreCancelToken</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">// 是否携带token</span>          <span class="token literal-property property">withToken</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token literal-property property">retryRequest</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">isOpenRetry</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token literal-property property">waitTime</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      opt <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">createAxios</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果项目中多个不同 api 地址，直接在这里导出多个，在请求配置中使用不同的 url 即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createAxios</span><span class="token punctuation">(</span><span class="token parameter">opt<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>CreateAxiosOptions<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> defHttp <span class="token operator">=</span> <span class="token function">createAxios</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createAxios2</span><span class="token punctuation">(</span><span class="token parameter">opt<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>CreateAxiosOptions<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> defHttp2 <span class="token operator">=</span> <span class="token function">createAxios2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-项目中使用并调用接口"><a href="#8-项目中使用并调用接口" class="headerlink" title="8. 项目中使用并调用接口"></a><strong>8. 项目中使用并调用接口</strong></h4><p>为了统一管理项目中使用到的接口，可以专门新建个 api.ts 文件存放某个模块的接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defHttp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/utils/http/axios'</span><span class="token punctuation">;</span><span class="token keyword">enum</span> Api <span class="token punctuation">{</span>  page <span class="token operator">=</span> <span class="token string">'/server/page/list'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token comment">/** *  页面配置列表 * @param params * @returns */</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">list</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> defHttp<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">url</span><span class="token operator">:</span> Api<span class="token punctuation">.</span>page<span class="token punctuation">,</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面逻辑代码中引入接口并调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> list <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./api.ts'</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">getList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">.</span>value<span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">.</span>value<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">list</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataSource <span class="token operator">=</span> res<span class="token punctuation">.</span>items <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里二次封装 Axios 请求已经基本完成，本文代码中会引用到许多其他地方的模块，我们可以忽略，只需关注 axios 相关的处理逻辑。其实我的代码是基于 vue-vben-admin 模板的，所以有些地方也许会过度封装，我们主要关注<code>封装的逻辑以及注意事项</code>即可我司的管理后台项目便是基于该模板，因此趁着周末梳理了一遍 axios 相关的代码，并做了一些总结分享给大家，如果有错误以及不合理的地方希望指出，共同进步！</p><h4 id="9-请求参数加密"><a href="#9-请求参数加密" class="headerlink" title="9. 请求参数加密"></a>9. 请求参数加密</h4><h5 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h5><ul><li>由于用户标识为各项参数的组合，需要防止被分析出标识规则</li><li>前后端数据为明文传输，用户可通过开发者工具查看数据</li></ul><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>由于项目创建之前后端设计不合理，导致详情页链接参数id为顺序序数(例：1,2,3…等等)，安全系数非常低（虽然我们前端做了菜单权限、按钮权限、Api权限等等），现在要前端解决下浏览器链接/接口参数实现加密</p><blockquote><p>项目正常链接：<a href="http://xxx.com/xx/contract/draft/contract-draft-detail">http://xxx.com/xx/contract/draft/contract-draft-detail</a>?<br>id=26197&amp;type=news&amp;key=1667198460529</p></blockquote><p>我们最终需要base64加密成这种（如果不想base64加密也可换成其他加密方式 👇<br>如：RSA加密、AES加密、MD5加密、SHA256加密以及国密）</p><blockquote><p>加密后的：ontract/draft/contract-draft-detail?__params=eyJpZCI6MjYxOTcsInR5cGUiOiJuZXciLCJrZXkiOjE2NjcxOTg0NjA1Mjl9</p></blockquote><h5 id="要想将参数加密，我这里设计的是，将所有参数以对象的形式进行加密，如下"><a href="#要想将参数加密，我这里设计的是，将所有参数以对象的形式进行加密，如下" class="headerlink" title="要想将参数加密，我这里设计的是，将所有参数以对象的形式进行加密，如下"></a>要想将参数加密，我这里设计的是，将所有参数以对象的形式进行加密，如下</h5><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">正常参数格式： `id=26197&amp;type=news&amp;key=1667198460529`,转化成对象:  {id: 26197,type: 'news',key: '1667198460529'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="正常情况下，可直接-route-query-获取参数对象，或-window-location-search-格式化获取，格式化函数如下"><a href="#正常情况下，可直接-route-query-获取参数对象，或-window-location-search-格式化获取，格式化函数如下" class="headerlink" title="正常情况下，可直接 $route.query 获取参数对象，或 window.location.search 格式化获取，格式化函数如下"></a>正常情况下，可直接 $route.query 获取参数对象，或 window.location.search 格式化获取，格式化函数如下</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// URL参数转成对象</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">urlPasseObj</span><span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> isUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>isUrl <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> arr <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> value    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> obj<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加密后都放到一个参数中，这里我命名为 <strong>__params</strong></p><h4 id="10-加-解密方法实现"><a href="#10-加-解密方法实现" class="headerlink" title="10. 加/解密方法实现"></a>10. 加/解密方法实现</h4><blockquote><p>这里要注意的是base64加密正常是字符串(String类型)进行加密，对对象(Object)进行加密，需要通过_<strong>JSON.parse</strong>_进行转义成String类型</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * base64(解密) * @param {String} str 跳转参数为base64字符串 * @returns */</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">decryptBase64</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 添加decodeURIComponent解决其他特殊字符，如等号(=)会转成%3D，导致base64解密失败</span>  <span class="token keyword">const</span> decryptQuery <span class="token operator">=</span> str <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> decryptQuery<span class="token punctuation">}</span><span class="token comment">/** * base64(加密) * @param {Object || String} param 跳转参数可以为对象或路径字符串 * @returns */</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">encryptBase64</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> encryptStr <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span>  <span class="token keyword">return</span> encryptStr<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="加密处处理，路由拦截请求-处理get请求参数"><a href="#加密处处理，路由拦截请求-处理get请求参数" class="headerlink" title="加密处处理，路由拦截请求(处理get请求参数)"></a>加密处处理，路由拦截请求(处理get请求参数)</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    config<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment">// 判断是否有携带参数</span>    <span class="token keyword">const</span> isHash <span class="token operator">=</span> config<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 将url上的参数调整到params中，然后调整清除url上的参数</span>      <span class="token comment">// urlPasseObj方法在上方</span>      <span class="token keyword">const</span> urlParam <span class="token operator">=</span> <span class="token function">urlPasseObj</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      config<span class="token punctuation">.</span>params <span class="token operator">=</span> config<span class="token punctuation">.</span>params <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">.</span>params<span class="token punctuation">,</span> <span class="token operator">...</span>urlParam <span class="token punctuation">}</span> <span class="token operator">:</span> urlParam      config<span class="token punctuation">.</span>url <span class="token operator">=</span> config<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>      config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">__params</span><span class="token operator">:</span> <span class="token function">encryptBase64</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>params<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">,</span> errorHandler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="解密的处理"><a href="#解密的处理" class="headerlink" title="解密的处理"></a>解密的处理</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token string-property property">'$route.query'</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>__params<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">const</span> newQuery <span class="token operator">=</span> <span class="token function">decryptBase64</span><span class="token punctuation">(</span>val<span class="token operator">?.</span>__params<span class="token punctuation">)</span>         <span class="token comment">// 在vue原型上定义一个</span>        <span class="token comment">//  Vue.prototype.$route_query = newQuery</span>        <span class="token comment">//  return</span>       <span class="token punctuation">}</span>      <span class="token comment">//  Vue.prototype.$route_query = val || {}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 项目将 babel-loader 换成 swc-lodder 提升打包速度</title>
      <link href="/LF_blog/notes/no-029.html"/>
      <url>/LF_blog/notes/no-029.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道 webpack 项目中默认的 loader 是用的 <code>babel-loader</code>，而在打包工具这么卷的今天 babel 打包的速度实在是不敢恭维…</p><p>今天给大家介绍一款号称比 babel 速度快 10 倍的 swc-loader</p><p>我们先来看看 babel 打包项目的速度</p><img src="/LF_blog/notes/no-029/1.jpeg" class=""><p>打包将近 100s，这还是我本地的打包速度，如果是在服务器上打包的话，那么打包时间就更长了</p><p>接下来我们来看看 <code>swc-loader</code> 的打包速度</p><img src="/LF_blog/notes/no-029/2.jpeg" class=""><p>打包时间只相当于 babel 的一半，这个速度真的是快了不少</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>接下来我们来看看如何使用 <code>swc-loader</code></p><p>首先我们需要安装 <code>swc-loader</code> 和 <code>@swc/core</code></p><p><code>swc-loder</code> 是 webpack 的 loader，<code>@swc/core</code> 是 swc 的核心库是 <code>swc-loader</code> 的依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> i swc-loader @swc/core <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们需要在<code>webpack.config.js</code>中配置<code>swc-loader</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'swc-loader'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们在打包的时候使用的就是<code>swc-loader</code>了</p><h2 id="swc-loader-的配置"><a href="#swc-loader-的配置" class="headerlink" title="swc-loader 的配置"></a>swc-loader 的配置</h2><p><code>swc-loader</code> 的配置和 <code>babel-loader</code> 的配置基本上是一样的，我们来看看如何配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'swc-loader'</span><span class="token punctuation">,</span>            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token literal-property property">jsc</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token comment">// jsc配置</span>                <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token comment">// 解析器配置</span>                  <span class="token literal-property property">syntax</span><span class="token operator">:</span> <span class="token string">'typescript'</span><span class="token punctuation">,</span> <span class="token comment">// 支持的语法</span>                  <span class="token literal-property property">tsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持tsx</span>                  <span class="token literal-property property">dynamicImport</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持动态导入</span>                  <span class="token literal-property property">decorators</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持装饰器</span>                  <span class="token literal-property property">privateMethod</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持私有方法</span>                  <span class="token literal-property property">functionBind</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持函数绑定</span>                  <span class="token literal-property property">exportDefaultFrom</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持export default from</span>                  <span class="token literal-property property">exportNamespaceFrom</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持export * as ns from</span>                  <span class="token literal-property property">nullishCoalescing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持空值合并</span>                  <span class="token literal-property property">optionalChaining</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持可选链</span>                  <span class="token literal-property property">classPrivateProperty</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持私有属性</span>                  <span class="token literal-property property">classPrivateMethod</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持私有方法</span>                  <span class="token literal-property property">classProperty</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持类属性</span>                  <span class="token literal-property property">numericSeparator</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持数字分隔符</span>                  <span class="token literal-property property">bigInt</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持大整数</span>                  <span class="token literal-property property">importMeta</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持import.meta</span>                  <span class="token literal-property property">throwExpressions</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持throw表达式</span>                  <span class="token literal-property property">pipelineOperator</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持管道操作符</span>                  <span class="token literal-property property">nullishCoalescingOperator</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持空值合并操作符</span>                  <span class="token literal-property property">optionalChainingOperator</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持可选链操作符</span>                  <span class="token literal-property property">logicalAssignment</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持逻辑赋值</span>                  <span class="token literal-property property">partialApplication</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持部分应用</span>                  <span class="token literal-property property">privateIn</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持私有in</span>                  <span class="token literal-property property">recordAndTuple</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持record和tuple</span>                  <span class="token literal-property property">topLevelAwait</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持顶级await</span>                  <span class="token literal-property property">importAssertions</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持import断言</span>                  <span class="token literal-property property">moduleAttributes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持模块属性</span>                  <span class="token literal-property property">exportExtensions</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持导出扩展</span>                  <span class="token literal-property property">functionSent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持函数sent</span>                  <span class="token literal-property property">exportNamespaceFrom</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持export * as ns from</span>                  <span class="token literal-property property">exportDefaultFrom</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持export default from</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>swc-loader</code>的配置和<code>babel-loader</code>的配置基本上是一样的，但是<code>swc-loader</code>的打包速度比<code>babel-loader</code>快了不少</p><p>当然并没有什么技术是完美的，<code>swc-loader</code>也有一些缺点，比如<code>swc-loader</code>不支持<code>@babel/plugin-transform-runtime</code>这个插件，所以如果你的项目中使用了这个插件的话，那么你就不能使用 swc-loader 了</p><p><code>babel</code>毕竟是一个成熟的打包工具，所以在使用<code>swc-loader</code>的时候还是要谨慎一些，毕竟<code>swc-loader</code>还是一个新的打包工具，可能会有一些 bug，所以在使用的时候还是要多多注意一些，如果是早期的成熟项目的话，还是建议使用<code>babel-loader</code></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0里为什么要用 Proxy API 替代 defineProperty API</title>
      <link href="/LF_blog/interview/no-053.html"/>
      <url>/LF_blog/interview/no-053.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Object-defineProperty"><a href="#一、Object-defineProperty" class="headerlink" title="一、Object.defineProperty"></a>一、Object.defineProperty</h2><p>定义：<code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</p><h3 id="为什么能实现响应式"><a href="#为什么能实现响应式" class="headerlink" title="为什么能实现响应式"></a>为什么能实现响应式</h3><p>通过<code>defineProperty</code> 两个属性，<code>get</code>及<code>set</code></p><ul><li>get</li></ul><p>属性的 getter 函数，当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值</p><ul><li>set</li></ul><p>属性的 setter 函数，当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。默认为 undefined</p><p>下面通过代码展示：</p><p>定义一个响应式函数<code>defineReactive</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  app<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> val    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        val <span class="token operator">=</span> newVal        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>defineReactive</code>，数据发生变化触发<code>update</code>方法，实现数据响应式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在对象存在多个<code>key</code>情况下，需要进行遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果存在嵌套对象的情况，还需要在<code>defineReactive</code>中进行递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> val    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        val <span class="token operator">=</span> newVal        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当给<code>key</code>赋值为对象的时候，还需要在<code>set</code>属性中进行递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token comment">// 新值是对象的情况</span>    <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述例子能够实现对一个对象的基本响应式，但仍然存在诸多问题</p><p>现在对一个对象进行删除与添加属性操作，无法劫持到</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">"bar"</span><span class="token punctuation">}</span><span class="token function">observe</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>foo <span class="token comment">// no ok</span>obj<span class="token punctuation">.</span>jar <span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token comment">// no ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们对一个数组进行监听的时候，并不那么好使了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arrData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arrData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token function">defineProperty</span><span class="token punctuation">(</span>arrData<span class="token punctuation">,</span>index<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>arrData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// no ok</span>arrData<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// no ok</span>arrDate<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span> <span class="token comment">// ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到数据的<code>api</code>无法劫持到，从而无法实现数据响应式，</p><p>所以在<code>Vue2</code>中，增加了<code>set</code>、<code>delete</code> API，并且对数组<code>api</code>方法进行一个重写</p><p>还有一个问题则是，如果存在深层的嵌套对象关系，需要深层的进行监听，造成了性能的极大问题</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>检测不到对象属性的添加和删除</li><li>数组<code>API</code>方法无法监听到</li><li>需要对每个属性进行遍历监听，如果嵌套对象，需要深层监听，造成性能问题</li></ul><h2 id="二、proxy"><a href="#二、proxy" class="headerlink" title="二、proxy"></a>二、proxy</h2><p><code>Proxy</code>的监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作，这就完全可以代理所有属性了</p><p>在<code>ES6</code>系列中，我们详细讲解过<code>Proxy</code>的使用，就不再述说了</p><p>下面通过代码进行展示：</p><p>定义一个响应式方法<code>reactive</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span>  <span class="token comment">// Proxy相当于在对象外层加拦截</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">获取</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">设置</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">删除</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> observed<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下简单数据的操作，发现都能劫持</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 1.获取</span>state<span class="token punctuation">.</span>foo <span class="token comment">// ok</span><span class="token comment">// 2.设置已存在属性</span>state<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'fooooooo'</span> <span class="token comment">// ok</span><span class="token comment">// 3.设置不存在属性</span>state<span class="token punctuation">.</span>dong <span class="token operator">=</span> <span class="token string">'dong'</span> <span class="token comment">// ok</span><span class="token comment">// 4.删除属性</span><span class="token keyword">delete</span> state<span class="token punctuation">.</span>dong <span class="token comment">// ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再测试嵌套对象情况，这时候发现就不那么 OK 了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 设置嵌套对象属性</span>state<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// no ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要解决，需要在<code>get</code>之上再进行一层代理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span>  <span class="token comment">// Proxy相当于在对象外层加拦截</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">获取</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> res    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">return</span> observed<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p><code>Object.defineProperty</code>只能遍历对象属性进行劫持</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Proxy</code>直接可以劫持整个对象，并返回一个新对象，我们可以只操作新的对象达到响应式目的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span>  <span class="token comment">// Proxy相当于在对象外层加拦截</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">获取</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">设置</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">删除</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> observed<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Proxy</code>可以直接监听数组的变化（<code>push</code>、<code>shift</code>、<code>splice</code>）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> proxtObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">psuh</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Proxy</code>有多达13种拦截方法,不限于<code>apply</code>、<code>ownKeys</code>、<code>deleteProperty</code>、<code>has</code>等等，这是<code>Object.defineProperty</code>不具备的</p><p>正因为<code>defineProperty</code>自身的缺陷，导致<code>Vue2</code>在实现响应式过程需要实现其他的方法辅助（如重写数组方法、增加额外<code>set</code>、<code>delete</code>方法）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 数组重写</span><span class="token keyword">const</span> originalProto <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originalProto<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'shift'</span><span class="token punctuation">,</span> <span class="token string">'unshift'</span><span class="token punctuation">,</span> <span class="token string">'splice'</span><span class="token punctuation">,</span> <span class="token string">'reverse'</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      originalProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span>      dep<span class="token punctuation">.</span><span class="token function">notice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// set、delete</span>Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token punctuation">,</span><span class="token string">'newbar'</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Proxy</code> 不兼容IE，也没有 <code>polyfill</code>, <code>defineProperty</code> 能支持到IE9</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack本质</title>
      <link href="/LF_blog/notes/no-052.html"/>
      <url>/LF_blog/notes/no-052.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><font style="color:rgb(85, 85, 85);">Webpack本质上一种基于事件流的编程范例，其实就是一系列的插件运行</font></p></blockquote><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Webpack</font><font style="color:rgb(44, 62, 80);">主要使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Compiler</font><font style="color:rgb(44, 62, 80);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Compilation</font><font style="color:rgb(44, 62, 80);">两个类来控制</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Webpack</font><font style="color:rgb(44, 62, 80);">的整个生命周期。他们都继承了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Tapabel</font><font style="color:rgb(44, 62, 80);">并且通过Tapabel来注册了生命周期中的每一个流程需要触发的事件</font></p><h3 id="Tapabel"><a href="#Tapabel" class="headerlink" title="Tapabel"></a>Tapabel</h3><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Tapabel</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">是一个类似于</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Node.js</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">的</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">EventEmitter</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">的库，主要是控制钩子函数的发布与订阅，是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Webpack</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">插件系统的大管家</font></p><p><strong>Tapabel提供的钩子及示例</strong></p><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Tapable</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">库为插件提供了很多 Hook以便挂载。</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>  SyncHook<span class="token punctuation">,</span>                   <span class="token comment">// 同步钩子</span>  SyncBailHook<span class="token punctuation">,</span>               <span class="token comment">// 同步熔断钩子</span>  SyncWaterfallHook<span class="token punctuation">,</span>          <span class="token comment">// 同步流水钩子</span>  SyncLoopHook<span class="token punctuation">,</span>               <span class="token comment">// 同步循环钩子</span>  AsyncParalleHook<span class="token punctuation">,</span>           <span class="token comment">// 异步并发钩子</span>  AsyncParallelBailHook<span class="token punctuation">,</span>      <span class="token comment">// 异步并发熔断钩子</span>  AsyncSeriesHook<span class="token punctuation">,</span>            <span class="token comment">// 异步串行钩子</span>  AsyncSeriesBailHook<span class="token punctuation">,</span>        <span class="token comment">// 异步串行熔断钩子</span>  AsyncSeriesWaterfallHook     <span class="token comment">// 异步串行流水钩子</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"tapable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Tabpack</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">提供了同步&amp;异步绑定钩子的方法，方法如下所示：</font></p><table><thead><tr><th><font style="color:rgb(44, 62, 80);">Async</font></th><th><font style="color:rgb(44, 62, 80);">Sync</font></th></tr></thead><tbody><tr><td><font style="color:rgb(44, 62, 80);">绑定：</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">tapAsync/tapPromise/tap</font></td><td><font style="color:rgb(44, 62, 80);">绑定：</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">tap</font></td></tr><tr><td><font style="color:rgb(44, 62, 80);">执行：</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">callAsync/promise</font></td><td><font style="color:rgb(44, 62, 80);">执行：</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">call</font></td></tr></tbody></table><p><strong><font style="color:rgb(44, 62, 80);">Tabpack简单示例</font></strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> demohook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"arg1"</span><span class="token punctuation">,</span> <span class="token string">"arg2"</span><span class="token punctuation">,</span> <span class="token string">"arg3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定事件到webpack事件流</span>demohook<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">"hook1"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1 2 3</span><span class="token comment">// 执行绑定的事件</span><span class="token function">demohook</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><h4 id="1-初始化启动之Webpack的入口文件"><a href="#1-初始化启动之Webpack的入口文件" class="headerlink" title="1. 初始化启动之Webpack的入口文件"></a>1. 初始化启动之Webpack的入口文件</h4><ul><li><font style="color:rgb(44, 62, 80);">追本溯源，第一步我们要找到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Webpack</font><font style="color:rgb(44, 62, 80);">的入口文件。</font></li><li><font style="color:rgb(44, 62, 80);">当通过命令行启动Webpack后，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">npm</font><font style="color:rgb(44, 62, 80);">会让命令行工具进入</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">node_modules.bin</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(44, 62, 80);">目录。</font></li><li><font style="color:rgb(44, 62, 80);">然后查找是否存在</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack.sh</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(44, 62, 80);">或者 webpack.cmd 文件，如果存在，就执行它们，不存在就会抛出错误。</font></li><li><font style="color:rgb(44, 62, 80);">实际的入口文件是：</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">node_modules/webpack/bin/webpack.js</font><font style="color:rgb(44, 62, 80);">，让我们来看一下里面的核心函数。</font></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/bin/webpack.js</span><span class="token comment">// 正常执行返回</span>process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 运行某个命令                               </span><span class="token keyword">const</span> <span class="token function-variable function">runCommand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">command<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment">// 判断某个包是否安装</span><span class="token keyword">const</span> <span class="token function-variable function">isInstalled</span> <span class="token operator">=</span> <span class="token parameter">packageName</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment">// webpack可用的CLI：webpacl-cli和webpack-command</span><span class="token keyword">const</span> CLIs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment">// 判断是否两个CLI是否安装了</span><span class="token keyword">const</span> installedClis <span class="token operator">=</span> CLIs<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">cli</span><span class="token operator">=&gt;</span>cli<span class="token punctuation">.</span>installed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据安装数量进行处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>installedClis<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span>   <span class="token punctuation">(</span>installedClis<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">启动后，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Webpack</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">最终会找到</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack-cli /webpack-command</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">的</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">npm</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">包，并且 执行</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">CLI</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">。</font></p><h4 id="2-webpack-cli"><a href="#2-webpack-cli" class="headerlink" title="2. webpack-cli"></a>2. webpack-cli</h4><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">搞清楚了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Webpack</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">启动的入口文件后，接下来让我们把目光转移到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack-cli</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">，看看它做了哪些事儿。</font></p><ul><li><font style="color:rgb(44, 62, 80);">引入</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">yargs</font><font style="color:rgb(44, 62, 80);">，对命令行进行定制分析命令行参数，对各个参数进行转换，组成编译配置项引用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack</font><font style="color:rgb(44, 62, 80);">，根据配置项进行编译和构建</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack-cli</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(44, 62, 80);">会处理不需要经过编译的命令。</font></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack-cli/bin/cli.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token constant">NON_COMPILATION_ARGS</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./utils/constants"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">NON_COMPILATION_CMD</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">arg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">===</span> <span class="token string">"serve"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>argv <span class="token operator">=</span> global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">a</span> <span class="token operator">=&gt;</span> a <span class="token operator">!==</span> <span class="token string">"serve"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span>argv <span class="token operator">=</span> global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token constant">NON_COMPILATION_ARGS</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">a</span> <span class="token operator">=&gt;</span> a <span class="token operator">===</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NON_COMPILATION_CMD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./utils/prompt-command"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">NON_COMPILATION_CMD</span><span class="token punctuation">,</span><span class="token operator">...</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack-cli</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">提供的不需要编译的命令如下</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack-cli/bin/untils/constants.js</span><span class="token keyword">const</span> <span class="token constant">NON_COMPILATION_ARGS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">"init"</span><span class="token punctuation">,</span>                 <span class="token comment">// 创建一份webpack配置文件</span>  <span class="token string">"migrate"</span><span class="token punctuation">,</span>              <span class="token comment">// 进行webpack版本迁移</span>  <span class="token string">"add"</span><span class="token punctuation">,</span>                  <span class="token comment">// 往webpack配置文件中增加属性</span>  <span class="token string">"remove"</span><span class="token punctuation">,</span>               <span class="token comment">// 往webpack配置文件中删除属性</span>  <span class="token string">"serve"</span><span class="token punctuation">,</span>                <span class="token comment">// 运行webpack-serve</span>  <span class="token string">"generate-loader"</span><span class="token punctuation">,</span>      <span class="token comment">// 生成webpack loader代码</span>  <span class="token string">"generate-plugin"</span><span class="token punctuation">,</span>      <span class="token comment">// 生成webpack plugin代码</span>  <span class="token string">"info"</span>                  <span class="token comment">// 返回与本地环境相关的一些信息</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack-cli</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">使用命令行工具包</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">yargs</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack-cli/bin/config/config-yargs.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span>  <span class="token constant">CONFIG_GROUP</span><span class="token punctuation">,</span>  <span class="token constant">BASIC_GROUP</span><span class="token punctuation">,</span>  <span class="token constant">MODULE_GROUP</span><span class="token punctuation">,</span>  <span class="token constant">OUTPUT_GROUP</span><span class="token punctuation">,</span>  <span class="token constant">ADVANCED_GROUP</span><span class="token punctuation">,</span>  <span class="token constant">RESOLVE_GROUP</span><span class="token punctuation">,</span>  <span class="token constant">OPTIMIZE_GROUP</span><span class="token punctuation">,</span>  <span class="token constant">DISPLAY_GROUP</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token constant">GROUPS</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack-cli</font><font style="color:rgb(44, 62, 80);">对配置文件和命令行参数进行转换最终生成配置选项参数</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">options</font><font style="color:rgb(44, 62, 80);">，最终会根据配置参数实例化webpack对象，然后执行构建流程。</font></li><li><font style="color:rgb(44, 62, 80);">除此之外，让我们回到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">node_modules/webpack/lib/webpack.js</font><font style="color:rgb(44, 62, 80);">里来看一下</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Webpack</font><font style="color:rgb(44, 62, 80);">还做了哪些准备工作。</font></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/webpack.js</span><span class="token keyword">const</span> <span class="token function-variable function">webpack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebpackOptionsDefaulter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>  compiler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compiler</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">NodeEnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">...</span>  compiler<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebpackOptionsApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">...</span>  webpack<span class="token punctuation">.</span>WebpackOptionsDefaulter <span class="token operator">=</span> WebpackOptionsDefaulter<span class="token punctuation">;</span>  webpack<span class="token punctuation">.</span>WebpackOptionsApply <span class="token operator">=</span> WebpackOptionsApply<span class="token punctuation">;</span>  <span class="token operator">...</span>  webpack<span class="token punctuation">.</span>NodeEnvironmentPlugin <span class="token operator">=</span> NodeEnvironmentPlugin<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WebpackOptionsDefaulter</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">的功能是设置一些默认的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Options</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">(代码比较多不贴了，大家自行查看</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">node_modules/webpack/lib/WebpackOptionsDefaulter.js</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">)</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/node/NodeEnvironmentPlugin.js</span><span class="token keyword">class</span> <span class="token class-name">NodeEnvironmentPlugin</span> <span class="token punctuation">{</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeRun<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">"NodeEnvironmentPlugin"</span><span class="token punctuation">,</span> <span class="token parameter">compiler</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">.</span>inputFileSystem <span class="token operator">===</span> inputFileSystem<span class="token punctuation">)</span> inputFileSystem<span class="token punctuation">.</span><span class="token function">purge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">从上面的代码我们可以知道，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">NodeEnvironmentPlugin</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">插件监听了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">beforeRun</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">钩子，它的作用是清除缓存</font></p><h4 id="3-WebpackOptionsApply"><a href="#3-WebpackOptionsApply" class="headerlink" title="3. WebpackOptionsApply"></a>3. WebpackOptionsApply</h4><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WebpackOptionsApply</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">会将所有的配置</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">options</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">参数转换成</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">内部插件。</font></p><p><strong><font style="color:rgb(44, 62, 80);">使用默认插件列表</font></strong></p><ul><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">output.library</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(44, 62, 80);">-&gt;</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">LibraryTemplatePlugin</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">externals</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(44, 62, 80);">-&gt;</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">ExternalsPlugin</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">devtool</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(44, 62, 80);">-&gt;</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">EvalDevtoolModulePlugin, SourceMapDevToolPlugin</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">AMDPlugin</font><font style="color:rgb(44, 62, 80);">,</font><font style="color:rgb(44, 62, 80);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">CommonJsPlugin</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">RemoveEmptyChunksPlugin</font></li></ul><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">// node_modules/webpack/lib/WebpackOptionsApply.jsnew EntryOptionPlugin().apply(compiler);compiler.hooks.entryOption.call(options.context, options.entry);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">实际上，插件最后都会变成</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">compiler</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">对象上的实例。</font></p><h4 id="4-EntryOptionPlugin"><a href="#4-EntryOptionPlugin" class="headerlink" title="4. EntryOptionPlugin"></a>4. EntryOptionPlugin</h4><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">下来让我们进入</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">EntryOptionPlugin</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">插件，看看它做了哪些事儿。</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/EntryOptionPlugin.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">EntryOptionPlugin</span> <span class="token punctuation">{</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>entryOption<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">"EntryOptionPlugin"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> entry <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">||</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">itemToPlugin</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> entry <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">itemToPlugin</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> entry<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> entry <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">DynamicEntryPlugin</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font style="color:rgb(44, 62, 80);">如果是数组，则转换成多个</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">entry</font><font style="color:rgb(44, 62, 80);">来处理，如果是对象则转换成一个个</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">entry</font><font style="color:rgb(44, 62, 80);">来处理。</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">compiler</font><font style="color:rgb(44, 62, 80);">实例化是在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">node_modules/webpack/lib/webpack.js</font><font style="color:rgb(44, 62, 80);">里完成的。通过</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">EntryOptionPlugin</font><font style="color:rgb(44, 62, 80);">插件进行参数校验。通过</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WebpackOptionsDefaulter</font><font style="color:rgb(44, 62, 80);">将传入的参数和默认参数进行合并成为新的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">options</font><font style="color:rgb(44, 62, 80);">，创建compiler，以及相关plugin，最后通过</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WebpackOptionsApply</font><font style="color:rgb(44, 62, 80);">将所有的配置</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">options</font><font style="color:rgb(44, 62, 80);">参数转换成</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Webpack</font><font style="color:rgb(44, 62, 80);">内部插件。</font></li><li><font style="color:rgb(44, 62, 80);">再次来到我们的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">node_modules/webpack/lib/webpack.js</font><font style="color:rgb(44, 62, 80);">中</font></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>watch <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">o</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>watch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> watchOptions <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token operator">?</span> options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">o</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>watchOptions <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">:</span> options<span class="token punctuation">.</span>watchOptions <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> compiler<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>watchOptions<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">实例</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">compiler</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">后会根据</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">options</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">的watch判断是否启动了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">watch</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">，如果启动</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">watch</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">了就调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">compiler.watch</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">来监控构建文件，否则启动</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">compiler.run</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">来构建文件。</font></p><h3 id="编译构建"><a href="#编译构建" class="headerlink" title="编译构建"></a>编译构建</h3><h4 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h4><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">首先会实例化</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">NormalModuleFactory</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">ContextModuleFactory</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">。然后进入到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">run</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">方法。</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/Compiler.js</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token operator">...</span>  <span class="token comment">// beforeRun 如上文NodeEnvironmentPlugin插件清除缓存</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeRun<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行run Hook开始编译</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readRecords</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">finalCallback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行compile</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>onCompiled<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">在执行</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">this.hooks.compile</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">之前会执行</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">this.hooks.beforeCompile</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">，来对编译之前需要处理的插件进行执行。紧接着</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">this.hooks.compile</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">执行后会实例化</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Compilation</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">对象</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/compiler.js</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newCompilationParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeCompile<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 进入compile阶段</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> compilation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newCompilation</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 进入make阶段</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>make<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      compilation<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 进入seal阶段</span>        compilation<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterCompile<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> compilation<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="make"><a href="#make" class="headerlink" title="make"></a>make</h4><ul><li><font style="color:rgb(44, 62, 80);">一个新的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Compilation</font><font style="color:rgb(44, 62, 80);">创建完毕，将从</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Entry</font><font style="color:rgb(44, 62, 80);">开始读取文件，根据文件类型和配置的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Loader</font><font style="color:rgb(44, 62, 80);">对文件进行编译，编译完成后再找出该文件依赖的文件，递归的编译和解析。</font></li><li><font style="color:rgb(44, 62, 80);">我们来看一下</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">make</font><font style="color:rgb(44, 62, 80);">钩子被监听的地方。</font></li><li><font style="color:rgb(44, 62, 80);">如代码中注释所示，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">addEntry</font><font style="color:rgb(44, 62, 80);">是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">make</font><font style="color:rgb(44, 62, 80);">构建阶段真正开始的标志</font></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/SingleEntryPlugin.js</span>compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>make<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span>  <span class="token string">"SingleEntryPlugin"</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> entry<span class="token punctuation">,</span> name<span class="token punctuation">,</span> context <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    cosnt dep <span class="token operator">=</span> SingleEntryPlugin<span class="token punctuation">.</span><span class="token function">createDependency</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// make构建阶段开始标志 </span>    compilation<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> dep<span class="token punctuation">,</span> name<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">addEntry</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">实际上调用了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_addModuleChain</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">方法，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_addModuleChain</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">方法将模块添加到依赖列表中去，同时进行模块构建。构建时会执行如下函数</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/Compilation.js</span><span class="token comment">// addEntry -&gt; addModuleChain</span><span class="token function">_addModuleChain</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> dependency<span class="token punctuation">,</span> onModule<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildModule</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">...</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">如果模块构建完成，会触发</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">finishModules</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">。</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/Compilation.js</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>finishModules<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>modules<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> modules<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> module <span class="token operator">=</span> modules<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reportDependencyErrorsAndWarnings</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><font style="color:rgb(44, 62, 80);">1. Module</font></strong></p><ul><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Module</font><font style="color:rgb(44, 62, 80);">包括</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">NormalModule</font><font style="color:rgb(44, 62, 80);">(普通模块)、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">ContextModule(./src/a ./src/b)</font><font style="color:rgb(44, 62, 80);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">ExternalModule(module.exports=jQuery)</font><font style="color:rgb(44, 62, 80);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">DelegatedModule(manifest)</font><font style="color:rgb(44, 62, 80);">以及</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">MultiModule(entry:[‘a’, ‘b’])</font><font style="color:rgb(44, 62, 80);">。</font></li><li><font style="color:rgb(44, 62, 80);">本文以</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">NormalModule(普通模块)</font><font style="color:rgb(44, 62, 80);">为例子，看一下构建(</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Compilation</font><font style="color:rgb(44, 62, 80);">)的过程。</font></li></ul><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">使用</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">loader-runner</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">运行</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">loadersLoader</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">转换完后，使用</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">acorn</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">解析生成</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">AST</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">使用</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">ParserPlugins</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);"> </font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">添加依赖</font></p><p><strong><font style="color:rgb(44, 62, 80);">2. loader-runner</font></strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/NormalModule.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> getContext<span class="token punctuation">,</span> runLoaders <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"loader-runner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">runLoaders</span><span class="token punctuation">(</span>    <span class="token operator">...</span>  <span class="token punctuation">)</span>    <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token operator">...</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">doBuild</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">会去加载资源，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">doBuild</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">中会传入资源路径和插件资源去调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">loader-runner</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">插件的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">runLoaders</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">方法去加载和执行</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">loader</font></p><p><strong><font style="color:rgb(44, 62, 80);">3. acorn</font></strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/Parser.jsconst acorn = require("acorn");</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">acorn</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">解析转换后的内容，输出对应的抽象语法树(</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">AST</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">)。</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/Compilation.js</span><span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">buildModule</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">failedModule</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">succeedModule</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font style="color:rgb(44, 62, 80);">成功就触发</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">succeedModule</font><font style="color:rgb(44, 62, 80);">，失败就触发</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">failedModule</font><font style="color:rgb(44, 62, 80);">。</font></li><li><font style="color:rgb(44, 62, 80);">最终将上述阶段生成的产物存放到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Compilation.js</font><font style="color:rgb(44, 62, 80);">的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">this.modules = []</font><font style="color:rgb(44, 62, 80);">;上。</font></li></ul><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">完成后就到了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">seal</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">阶段。</font></p><p><font style="color:rgb(44, 62, 80);">这里补充介绍一下Chunk生成的算法</font></p><p><strong><font style="color:rgb(44, 62, 80);">4. Chunk生成算法</font></strong></p><ul><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">webpack</font><font style="color:rgb(44, 62, 80);">首先会将</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">entry</font><font style="color:rgb(44, 62, 80);">中对应的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">module</font><font style="color:rgb(44, 62, 80);">都生成一个新的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">chunk</font><font style="color:rgb(44, 62, 80);">。</font></li><li><font style="color:rgb(44, 62, 80);">遍历</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">module</font><font style="color:rgb(44, 62, 80);">的依赖列表，将依赖的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">module</font><font style="color:rgb(44, 62, 80);">也加入到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">chunk</font><font style="color:rgb(44, 62, 80);">中。</font></li><li><font style="color:rgb(44, 62, 80);">如果一个依赖</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">module</font><font style="color:rgb(44, 62, 80);">是动态引入的模块，会根据这个</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">module</font><font style="color:rgb(44, 62, 80);">创建一个新的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">chunk</font><font style="color:rgb(44, 62, 80);">，继续遍历依赖。</font></li><li><font style="color:rgb(44, 62, 80);">重复上面的过程，直至得到所有的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">chunk</font><font style="color:rgb(44, 62, 80);">。</font></li></ul><h4 id="seal"><a href="#seal" class="headerlink" title="seal"></a>seal</h4><ul><li><font style="color:rgb(44, 62, 80);">所有模块及其依赖的模块都通过</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Loader</font><font style="color:rgb(44, 62, 80);">转换完成，根据依赖关系开始生成</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Chunk</font><font style="color:rgb(44, 62, 80);">。</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">seal</font><font style="color:rgb(44, 62, 80);">阶段也做了大量的的优化工作，进行了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">hash</font><font style="color:rgb(44, 62, 80);">的创建以及对内容进行生成(</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">createModuleAssets</font><font style="color:rgb(44, 62, 80);">)。</font></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/Compilation.jsthis.createHash();</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">modifyHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createModuleAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/Compilation.js</span><span class="token function">createModuleAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>buildInfo<span class="token punctuation">.</span>assets<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> assetName <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>buildInfo<span class="token punctuation">.</span>assets<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>assets<span class="token punctuation">[</span>fileName<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">.</span>buildInfo<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>assetName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">moduleAsset</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">seal</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">阶段经历了很多的优化，比如</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">tree shaking</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">就是在这个阶段执行。最终生成的代码会存放在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Compilation</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">assets</font><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">属性上</font></p><h4 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h4><p><font style="color:rgb(85, 85, 85);background-color:rgb(255, 249, 249);">将输出的内容输出到磁盘，创建目录生成文件，文件生成阶段结束。</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// node_modules/webpack/lib/compiler.js</span><span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  outputPath <span class="token operator">=</span> compilation<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>outputPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>outputFileSystem<span class="token punctuation">.</span><span class="token function">mkdirp</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">,</span> emitFiles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p><font style="color:rgb(199, 37, 78);">Webpack</font><font style="color:rgb(85, 85, 85);">在启动阶段对配置参数和命令行参数以及默认参数进行了合并，并进行了插件的初始化工作。完成初始化的工作后调用</font><font style="color:rgb(199, 37, 78);">Compiler</font><font style="color:rgb(85, 85, 85);">的</font><font style="color:rgb(199, 37, 78);">run</font><font style="color:rgb(85, 85, 85);">开启</font><font style="color:rgb(199, 37, 78);">Webpack</font><font style="color:rgb(85, 85, 85);">编译构建过程，构建主要流程包括</font><font style="color:rgb(199, 37, 78);">compile</font><font style="color:rgb(85, 85, 85);">、</font><font style="color:rgb(199, 37, 78);">make</font><font style="color:rgb(85, 85, 85);">、</font><font style="color:rgb(199, 37, 78);">build</font><font style="color:rgb(85, 85, 85);">、</font><font style="color:rgb(199, 37, 78);">seal</font><font style="color:rgb(85, 85, 85);">、</font><font style="color:rgb(199, 37, 78);">emit</font><font style="color:rgb(85, 85, 85);">等阶段。</font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何选择Webpack和Rollup</title>
      <link href="/LF_blog/notes/no-051.html"/>
      <url>/LF_blog/notes/no-051.html</url>
      
        <content type="html"><![CDATA[<p>Rollup 是一款 ES Modules 打包器。它也可以将项目中散落的细小模块打包为整块代码，从而使得这些划分的模块可以更好地运行在浏览器环境或者 Node.js 环境。</p><p>从作用上来看，Rollup 与 Webpack 非常类似。不过相比于 Webpack，Rollup 要小巧的多。因为 Webpack 在配合一些插件的使用下，几乎可以完成开发过程中绝大多数前端工程化的工作。而 Rollup 可以说仅仅是一个 ES Modules 打包器，没有更多其他的功能了。</p><p>例如，在 Webpack 中支持 HMR 这种对开发过程十分友好的功能，而在 Rollup 中就没有办法完全支持。</p><p>Rollup 诞生的目的并不是要与 Webpack 这样的工具全面竞争。它的初衷只是希望能够<strong>提供一个高效的 ES Modules 打包器，充分利用 ES Modules 的各项特性，构建出结构扁平，性能出众的类库</strong>。</p><p>至于它的其他特点和优势，我们需要上手过后才能深入了解。</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>这里我准备了一个简单的示例，具体结构如下：</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">.├── src│   ├── index.js│   ├── logger.js│   └── messages.js└── package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例的源代码中我准备了三个文件，并且使用 ES Modules 组织的代码模块化。部分代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/messages.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">hi</span><span class="token operator">:</span> <span class="token string">'Hey Guys, I am zce~'</span><span class="token punctuation">}</span><span class="token comment">// ./src/logger.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------- INFO ----------'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'--------------------------'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">error</span> <span class="token operator">=</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'---------- ERROR ----------'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'---------------------------'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// ./src/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> log <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./logger'</span><span class="token keyword">import</span> messages <span class="token keyword">from</span> <span class="token string">'./messages'</span><span class="token function">log</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span>hi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上述代码所示，其中：</p><ul><li>messages.js: 文件中以默认导出的方式导出了一个对象；</li><li>logger.js: 文件中单个导出了两个函数成员；</li><li>最后在 index.js: 文件中导入了这两个模块，并且使用了它们。</li></ul><p>接下来，我们尝试使用 Rollup 完成这个示例应用的打包。这里需要先通过 npm 安装 rollup 这个模块。具体命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i rollup --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成过后，rollup 这个模块同样会在 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">node_modules/.bin </font>目录中为我们提供一个 CLI 程序，我们就可以通过这个 CLI 去使用 Rollup 打包。具体命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx rollup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>P.S. 对于 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">node_modules/.bin </font>目录下的 CLI，我们可以使用 npx 命令或者 yarn 命令直接启动。</p><p>执行 rollup 命令，在不传递任何参数的情况下，这个命令会自动打印出它的帮助信息。具体如下图：</p><img src="/LF_blog/notes/no-051/1718875254964-1f3360dd-a13e-467f-ae57-3c3a5e070409-128006.png" class=""><p>在这个帮助信息的一开始，就已经告诉我们 rollup 命令的正确用法了：我们应该通过参数指定一个打包入口文件。正确命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx rollup ./src/index.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里指定的打包入口是 src/index.js 文件。再次执行 rollup 命令，具体执行结果如下：</p><img src="/LF_blog/notes/no-051/1718875253914-15c9b199-9846-43aa-a366-fdb86e133afd-575435.png" class=""><p>根据控制台的输出结果，我们发现 Rollup 直接将打包结果打印到控制台中了。</p><p>当然，正常情况下我们还是需要将打包结果输出到一个文件中。具体就是通过 CLI 的 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">–file </font>参数指定输出文件路径，具体命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx rollup ./src/index.js <span class="token parameter variable">--file</span> ./dist/bundle.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样打包的结果就会输出到文件中。</p><p>完成以后，我们找到 Rollup 打包输出的文件，具体结果如下：</p><img src="/LF_blog/notes/no-051/1718875253938-3d8777d8-ba62-42d1-af1d-8b8023343027-312197.png" class=""><p>在这个文件中我们的第一印象就是，Rollup 打包结果惊人的简洁，基本上就跟我们手写的代码一样。相比于 Webpack 大量的引导代码和一堆的模块函数，这里的输出结果没有任何多余代码，就是把打包过程中的各个模块按照依赖顺序，先后拼接到了一起。</p><p>而且我们仔细观察打包结果，你会发现，在我们输出的结果中只会保留那些用到的部分，对于未引用部分都没有输出。这是因为 Rollup 默认会自动开启 Tree-shaking 优化输出结果，Tree-shaking 的概念最早也就是 Rollup 这个工具提出的。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Rollup 同样支持以配置文件的方式去配置打包过程中的各项参数，我们可以在项目的根目录下新建一个 rollup.config.js 的配置文件。具体结构如下：</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">.<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">├── src</span><span class="token prefix unchanged"> </span><span class="token line">│   ├── index.js</span><span class="token prefix unchanged"> </span><span class="token line">│   ├── logger.js</span><span class="token prefix unchanged"> </span><span class="token line">│   └── messages.js</span><span class="token prefix unchanged"> </span><span class="token line">├── package.json</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">└── rollup.config.js</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件虽然同样是运行在 Node.js 环境中，但是 Rollup 会额外处理配置文件，所以在 rollup.config.js 中我们可以直接使用 ES Modules 标准。具体代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./rollup.config.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">'src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">'dist/bundle.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'es'</span> <span class="token comment">// 输出格式</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件中需要导出一个配置对象，在这个对象中我们可以通过 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">input </font>属性指定打包的入口文件路径，通过 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">output </font>指定输出相关配置，<font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">output </font>属性是一个对象，在 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">output </font>对象中可以使用 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">file </font>属性指定输出的文件名，<font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">format </font>属性指定输出代码的格式。</p><p>完成以后，我们回到命令行，再次执行 rollup 命令，不过需要注意的是，这里需要通过 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">–config </font>参数来表明使用项目中的配置文件。你也可以通过这个参数来指定不同的配置文件名称。具体命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx rollup <span class="token parameter variable">--config</span>  使用默认配置文件$ npx rollup <span class="token parameter variable">--config</span> rollup.prod.js  指定配置文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>Rollup 打包支持多种输出格式，这里我们回到配置文件中，配置同时输出所有格式下的文件，具体配置如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./rollup.config.js</span><span class="token comment">// 所有 Rollup 支持的格式</span><span class="token keyword">const</span> formats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'es'</span><span class="token punctuation">,</span> <span class="token string">'amd'</span><span class="token punctuation">,</span> <span class="token string">'cjs'</span><span class="token punctuation">,</span> <span class="token string">'iife'</span><span class="token punctuation">,</span> <span class="token string">'umd'</span><span class="token punctuation">,</span> <span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> formats<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">format</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">'src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">dist/bundle.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>format<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    format  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个配置当中我们导出了一个数组，数组中的每个成员都是一个单独的打包配置，这样 Rollup 就会分别按照每个配置单独打包。这一点与 Webpack 非常相似。</p><p>配置完成之后，我们回到命令行终端，再次运行 Rollup 打包。那这次打包过后，dist 目录下就会生成不同格式的输出结果，如下图所示：</p><img src="/LF_blog/notes/no-051/1718875253893-7f2d2dd4-525d-486a-be76-d1c4d115898b-550963.png" class=""><p>你可以自己依次去了解一下每种格式的输出结果，其实不同的输出格式大都是为了适配不同的运行环境，并没有什么需要额外理解的地方。</p><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>Rollup 自身的功能就只是 ES Modules 模块的合并，如果有更高级的要求，例如加载其他类型的资源文件或者支持导入 CommonJS 模块，又或是编译 ES 新特性，这些额外的需求 Rollup 同样支持使用插件去扩展实现。</p><p>Webpack 中划分了 Loader、Plugin 和 Minimizer 三种扩展方式，而插件是 Rollup 的唯一的扩展方式。</p><p>这里我们先来尝试使用一个可以让我们在代码中导入 JSON 文件的插件：<a href="https://github.com/rollup/plugins/tree/master/packages/json">@rollup/plugin-json(opens new window)</a>，通过这个过程来了解如何在 Rollup 中使用插件。</p><p>首先我们需要将 @rollup/plugin-json 作为项目的开发依赖安装进来。具体安装命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i @rollup/plugin-json --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成过后，我们打开配置文件。由于 rollup 的配置文件中可以直接使用 ES Modules，所以我们这里使用 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">import </font>导入这个插件模块。具体代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./rollup.config.js</span><span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-json'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">'src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">'dist/bundle.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'es'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@rollup/plugin-json 模块的默认导出就是一个插件函数。我们可以将这个函数的调用结果添加到配置对象的 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">plugins </font>数组中，注意这里是将调用结果放到数组中，而不是将这个函数直接放进去。</p><p>配置好这个插件过后，我们就可以在代码中通过 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">import </font>导入 json 文件了。我们回到 index.js 文件中，这里我们尝试通过 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">import </font>导入 package.json，具体代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> version <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../package.json'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那这个 JSON 文件中的每一个属性都会作为单独的导出成员。我们可以提取一下 JSON 中的 name 和 version，然后把它打印出来。</p><p>完成以后，我们打开命令行终端，再次运行 Rollup 打包。打包完成以后，我们找到输出的 bundle.js，具体结果如下：</p><img src="/LF_blog/notes/no-051/1718875253902-b25b35ac-a4f4-43a4-8b94-a518e326338a-404282.png" class=""><p>此时你就能看到，package.json 中的 name 和 version 正常被打包进来了，而且其他没用到的属性也都被 Tree-shaking 移除掉了。</p><p>以上就是 Rollup 中插件的使用。</p><h3 id="加载-NPM-模块"><a href="#加载-NPM-模块" class="headerlink" title="加载 NPM 模块"></a>加载 NPM 模块</h3><p>Rollup 默认只能够按照文件路径的方式加载本地的模块文件，对于 node_modules 目录中的第三方模块，并不能像 Webpack 一样，直接通过模块名称直接导入。</p><p>为了抹平这个差异，Rollup 给出了一个 <a href="https://github.com/rollup/plugins/tree/master/packages/node-resolve">@rollup/plugin-node-resolve(opens new window)</a>插件，通过使用这个插件，我们就可以在代码中直接使用模块名称导入模块了。</p><p>同样，我们需要先安装这个插件，具体命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i @rollup/plugin-node-resolve --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成过后，打开配置文件，这里同样导入插件函数，然后把它配置到 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">plugins </font>数组中。具体配置如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./rollup.config.js</span><span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-json'</span><span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-node-resolve'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">'src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">'dist/bundle.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'es'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成以后我们就可以回到代码中直接导入 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">node_modules </font>中的第三方模块了。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> camelCase <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'lodash-es'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">camelCase</span><span class="token punctuation">(</span><span class="token string">'hello rollup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里我导入的是我提前安装好的一个 <a href="https://www.npmjs.com/package/lodash-es">lodash-es(opens new window)</a>模块，这个模块就是常用的 Lodash 模块的 ESM 版本。导入过后我们就可以使用这个模块所提供的工具方法了。</p><blockquote><p>P.S. 相比于普通的 lodash，lodash-es 可以更好地支持 Tree-shaking。</p></blockquote><p>完成过后我们再次打开命令行终端，运行 Rollup 打包，此时 lodash 就能够打包到我们的 bundle.js 中了。</p><p>这里使用 Lodash 的 ESM 版本而不是 Lodash 普通版本的原因是 Rollup 默认只能处理 ESM 模块。如果要使用普通版本则需要额外处理。</p><h3 id="加载-CommonJS-模块"><a href="#加载-CommonJS-模块" class="headerlink" title="加载 CommonJS 模块"></a>加载 CommonJS 模块</h3><p>由于 Rollup 设计的是只处理 ES Modules 模块的打包，所以如果在代码中导入 CommonJS 模块，默认是不被支持的。但是目前大量的 NPM 模块还是使用 CommonJS 方式导出成员，所以为了兼容这些模块。官方给出了一个插件，叫作 <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs">@rollup/plugin-commonjs(opens new window)</a>。</p><p>这个插件在用法上跟前面两个插件是一样的，我就不单独演示了。我们直接看一下这个插件的效果。这里我添加了一个 cjs-module.js 文件，具体代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/cjs-module.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件中使用 CommonJS 的方式导出了一个对象。然后回到入口文件中通过 ES Modules 的方式导入，具体代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/index.js</span><span class="token comment">// 导入 CommonJS 模块成员</span><span class="token keyword">import</span> cjs <span class="token keyword">from</span> <span class="token string">'./cjs-module'</span><span class="token comment">// 使用模块成员</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cjs<span class="token punctuation">)</span> <span class="token comment">// cjs =&gt; { foo: 'bar' }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>入口文件导入的结果就是 cjs-module.js 中导出的对象了。</p><h2 id="Code-Splitting"><a href="#Code-Splitting" class="headerlink" title="Code Splitting"></a>Code Splitting</h2><p>Rollup 的最新版本中已经开始支持代码拆分了。我们同样可以使用符合 ES Modules 标准的动态导入方式实现模块的按需加载。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./src/index.js</span><span class="token comment">// 动态导入的模块会自动分包</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./logger'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> log <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'code splitting~'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rollup 内部也会处理代码拆分。不过按照之前的配置方式，这里直接打包会报出一个错误：</p><img src="/LF_blog/notes/no-051/1718875255639-44c06cab-7e37-4391-b2fb-5cc43f33dbe4-915856.png" class=""><p>出现这个错误的原因是：在 Rollup 在分包过后会输出多个 JS 文件，需要我们在配置中指定输出的目录，而不是一个具体的文件名，具体配置如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./rollup.config.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">'src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// file: 'dist/bundle.js', // code splitting 输出的是多个文件</span>    <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'es'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们将 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">output </font>配置中的 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">file </font>选项删掉，取而代之的是添加一个 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">dir </font>选项，把它设置为 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">‘dist’</font>，也就是输出到 dist 目录中。</p><p>这样的话，再次打包就可以正常输出了。具体输出结果如下：</p><img src="/LF_blog/notes/no-051/1718875255625-81586c13-4658-48b0-a7ab-aac3f5feb22f-907245.png" class=""><p>这次打包过程中，Rollup 就会自动提取动态导入的模块到单独的 JS 文件中了。</p><h3 id="输出格式问题"><a href="#输出格式问题" class="headerlink" title="输出格式问题"></a>输出格式问题</h3><p>目前采用的输出格式是 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">es</font>，所以自动分包过后，得到的代码还是使用 ES Modules 实现的动态模块加载，具体输出结果如下：</p><img src="/LF_blog/notes/no-051/1718875255678-43fd14ed-7922-468b-a5ac-14b8c7d9f5d4-442449.png" class=""><p>很明显，这种方式的代码仍然会存在环境兼容性问题：如果在低版本浏览器，这种输出结果是无法正常执行的。</p><p>解决这个问题的办法就是修改 Rollup 打包输出的格式。目前所有支持动态导入的输出格式中，只有 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">amd</font> 和 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">system</font> 两种格式打包的结果适合于浏览器环境。</p><p>所以在这种情况下，我们可以选择以 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">amd</font> 或者 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">system</font> 格式输出。这里我们以 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">amd</font> 为例，这里我们先将 Rollup 配置中的 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">format</font> 设置为 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">‘amd’</font>。具体配置如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ./rollup.config.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">'src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'amd'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的话，再次打包输出的结果就是采用 AMD 标准组织的代码了，具体如下：</p><img src="/LF_blog/notes/no-051/1718875256744-2ff2e9fd-b06d-42ba-9d31-2d051d92ebc8-151828.png" class=""><p>需要注意一点，这种 AMD 标准在浏览器中也不是直接支持的，也就是说我们还是需要使用一个支持这个标准的库来加载这些输出的模块，例如 <a href="https://requirejs.org/">Require.js(opens new window)</a>，具体使用方式参考：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>AMD Format output<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/requirejs@2.3.6/require.js<span class="token punctuation">"</span></span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dist/index.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>通过以上的探索，我们发现 Rollup 确实有它的优势：</p><ul><li>输出结果更加扁平，执行效率更高；</li><li>自动移除未引用代码；</li><li>打包结果依然完全可读。</li></ul><p>但是它的缺点也同样明显：</p><ul><li>加载非 ESM 的第三方模块比较复杂；</li><li>因为模块最终都被打包到全局中，所以无法实现 HMR；</li><li>浏览器环境中，代码拆分功能必须使用 Require.js 这样的 AMD 库。</li></ul><p>综合以上特点，我们发现如果我们开发的是一个应用程序，需要大量引用第三方模块，同时还需要 HMR 提升开发体验，而且应用过大就必须要分包。那这些需求 Rollup 都无法满足。</p><p>而如果我们是开发一个 JavaScript 框架或者库，那这些优点就特别有必要，而缺点呢几乎也都可以忽略，所以在很多像 React 或者 Vue 之类的框架中都是使用的 Rollup 作为模块打包器，而并非 Webpack。</p><p>但是到目前为止，开源社区中大多数人还是希望这两个工具共同存在，并且能够相互支持和借鉴，原因很简单：让更专业的工具完成更专业的事情。</p><p>总结一下：<strong>Webpack 大而全，Rollup 小而美</strong>。</p><p>在对它们的选择上，我的基本原则是：<strong>应用开发使用 Webpack，类库或者框架开发使用 Rollup</strong>。</p><p><strong>不过这并不是绝对的标准，只是经验法则</strong>。因为 Rollup 也可用于构建绝大多数应用程序，而 Webpack 同样也可以构建类库或者框架。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http 强缓和协商缓存</title>
      <link href="/LF_blog/interview/no-062.html"/>
      <url>/LF_blog/interview/no-062.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、http缓存"><a href="#一、http缓存" class="headerlink" title="一、http缓存"></a>一、http缓存</h2><ul><li><code>HTTP</code> 缓存策略分为: <code>强制缓存</code> 和 <code>协商缓存</code></li><li>为什么需要 <code>HTTP</code> 缓存 呢 ? 👇</li><li>直接使用缓存速度 <code>&gt;&gt;</code> 远比重新请求快</li><li>缓存对象有那些呢 ？👇</li><li><code>图片</code> <code>JS文件</code> <code>CSS文件</code> 等等</li></ul><h2 id="二、强缓存"><a href="#二、强缓存" class="headerlink" title="二、强缓存"></a>二、强缓存</h2><img src="/LF_blog/interview/no-062/1.jpg" class=""><ul><li>强制缓存 依赖于 <code>Response Header</code> 中的<code>Cache-Control</code>属性</li><li><code>Cache-Control</code> 属性值有两种 ：「<code>no-cache</code>」 和 「<code>max-age= xxx</code>」</li></ul><blockquote><p>① 属性为「<code>no-cache</code>」 时 👉 表示不需要 <code>强制缓存</code> , 每次需要重新调接口 ；</p></blockquote><hr><blockquote><p>② 属性为「<code>max-age= xxx</code>」 时 👉 表示需要 <code>强制缓存</code> , 缓存时长为 <code>xxx</code> 秒，超过时长需要重新请求 ；</p></blockquote><img src="/LF_blog/interview/no-062/2.jpg" class=""><h2 id="三、协商缓存"><a href="#三、协商缓存" class="headerlink" title="三、协商缓存"></a>三、协商缓存</h2><ul><li>协商缓存，则需要判断再次请求以后，数据是否更新？👇</li></ul><blockquote><p>「数据发生更新」：返回 状态码 <code>200</code>，返回最新数据，<code>取最新数据</code>；<br><br>「数据未发生更新」：返回 状态码 <code>304</code>，<code>取缓存数据</code>；</p></blockquote><ul><li>协商缓存 ，存在 <code>2</code> 中形式</li></ul><h3 id="第Ⅰ种形式-，涉及参数-👇"><a href="#第Ⅰ种形式-，涉及参数-👇" class="headerlink" title="第Ⅰ种形式 ，涉及参数 👇"></a>第Ⅰ种形式 ，涉及参数 👇</h3><ul><li>① <code>Last-Modified</code> ：资源最后更新时间；</li><li>② <code>If-Modified-Since</code> ： 传递给服务端的参数 ，判断与最新资源更新时间比较 👇</li></ul><blockquote><p>「相等」 =&gt; 返回 <code>304</code> ； 「不相等」 =&gt; 重新设置 <code>Last-Modified</code> ，返回 <code>200</code> 获取最新数据；</p></blockquote><img src="/LF_blog/interview/no-062/3.jpg" class=""><h3 id="第Ⅱ种形式-，涉及参数-👇"><a href="#第Ⅱ种形式-，涉及参数-👇" class="headerlink" title="第Ⅱ种形式 ，涉及参数 👇"></a>第Ⅱ种形式 ，涉及参数 👇</h3><ul><li>① <code>Etag</code> ：内容唯一标识符</li><li>② <code>if-none-match</code> ：用来判断与服务端的 <code>Etag</code> 是否相同</li></ul><img src="/LF_blog/interview/no-062/4.jpg" class=""><h3 id="两种形式的区别-👇"><a href="#两种形式的区别-👇" class="headerlink" title="两种形式的区别 👇"></a>两种形式的区别 👇</h3><ul><li>判断过程 两种是 相同的，</li><li>不同点在于 <code>Etag</code> 可以精确到 毫秒 ， 而 <code>Last-Modified</code> 只能判断秒级别的</li><li><strong>更推荐 第二种形式</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中组件和插件有什么区别</title>
      <link href="/LF_blog/notes/no-055.html"/>
      <url>/LF_blog/notes/no-055.html</url>
      
        <content type="html"><![CDATA[<h3 id="编写形式"><a href="#编写形式" class="headerlink" title="编写形式"></a>编写形式</h3><h4 id="1-编写组件"><a href="#1-编写组件" class="headerlink" title="1. 编写组件"></a>1. 编写组件</h4><p>编写一个组件，可以有很多方式，我们最常见的就是<code>vue</code>单文件的这种格式，每一个<code>.vue</code>文件我们都可以看成是一个组件</p><p><code>vue</code>文件标准格式</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;/template&gt;&lt;script&gt;  export default{     ...      }&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以通过<code>template</code>属性来编写一个组件，如果组件内容多，我们可以在外部定义<code>template</code>组件内容，如果组件内容并不多，我们可直接写在<code>template</code>属性上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"testComponent"</span><span class="token operator">&gt;</span>     <span class="token comment">// 组件显示的内容</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>component<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'componentA'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>   <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#testComponent'</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;component&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>  <span class="token comment">// 组件内容少可以通过这种形式</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-编写插件"><a href="#2-编写插件" class="headerlink" title="2. 编写插件"></a>2. 编写插件</h4><p><code>vue</code>插件的实现应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">MyPlugin<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 1. 添加全局方法或 property</span>  Vue<span class="token punctuation">.</span><span class="token function-variable function">myGlobalMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">}</span>  <span class="token comment">// 2. 添加全局资源</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 3. 注入组件选项</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">}</span>      <span class="token operator">...</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 4. 添加实例方法</span>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">methodOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注册形式"><a href="#注册形式" class="headerlink" title="注册形式"></a>注册形式</h3><h4 id="1-组件注册"><a href="#1-组件注册" class="headerlink" title="1. 组件注册"></a>1. 组件注册</h4><p><code>vue</code>组件注册主要分为全局注册与局部注册</p><p>全局注册通过<code>Vue.component</code>方法，第一个参数为组件的名称，第二个参数为传入的配置项</p><p>Vue.component(‘my-component-name’, { /* … */ })</p><p>局部注册只需在用到的地方通过<code>components</code>属性注册一个组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const component1 = {...} // 定义一个组件  export default {  components:{  component1   // 局部注册  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-插件注册"><a href="#2-插件注册" class="headerlink" title="2. 插件注册"></a>2. 插件注册</h4><p>插件的注册通过<code>Vue.use()</code>的方式进行注册（安装），第一个参数为插件的名字，第二个参数是可选择的配置项</p><p>Vue.use(插件名字,{ /* … */} )</p><p>注意的是：</p><p>注册插件的时候，需要在调用 <code>new Vue()</code> 启动应用之前完成</p><p><code>Vue.use</code>会自动阻止多次注册相同插件，只会注册一次</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>组件 <code>(Component)</code> 是用来构成你的 <code>App</code> 的业务模块，它的目标是 <code>App.vue</code></p><p>插件 <code>(Plugin)</code> 是用来增强你的技术栈的功能模块，它的目标是 <code>Vue</code> 本身</p><p>简单来说，插件就是指对<code>Vue</code>的功能的增强或补充</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九种前端常见的设计模式</title>
      <link href="/LF_blog/notes/no-050.html"/>
      <url>/LF_blog/notes/no-050.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-外观模式"><a href="#1-外观模式" class="headerlink" title="1. 外观模式"></a>1. 外观模式</h3><blockquote><p>外观模式是最常见的设计模式之一，它为子系统中的一组接口提供一个统一的高层接口，使子系统更容易使用。简而言之外观设计模式就是把多个子系统中复杂逻辑进行抽象，从而提供一个更统一、更简洁、更易用的API。很多我们常用的框架和库基本都遵循了外观设计模式，比如JQuery就把复杂的原生DOM操作进行了抽象和封装，并消除了浏览器之间的兼容问题，从而提供了一个更高级更易用的版本。其实在平时工作中我们也会经常用到外观模式进行开发，只是我们不自知而已</p></blockquote><p><strong>兼容浏览器事件绑定</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">addMyEvent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> ev<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> ev<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    el<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> ev<span class="token punctuation">]</span> <span class="token operator">=</span> fn  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装接口</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myEvent <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span>  <span class="token function-variable function">stop</span><span class="token operator">:</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>场景</strong></p><ul><li>设计初期，应该要有意识地将不同的两个层分离，比如经典的三层结构，在数据访问层和业务逻辑层、业务逻辑层和表示层之间建立外观Facade</li><li>在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观Facade可以提供一个简单的接口，减少他们之间的依赖。</li><li>在维护一个遗留的大型系统时，可能这个系统已经很难维护了，这时候使用外观Facade也是非常合适的，为系系统开发一个外观Facade类，为设计粗糙和高度复杂的遗留代码提供比较清晰的接口，让新系统和Facade对象交互，Facade与遗留代码交互所有的复杂工作。</li></ul><p><strong>优点</strong></p><ul><li>减少系统相互依赖。</li><li>提高灵活性。</li><li>提高了安全性</li></ul><p><strong>缺点</strong></p><p>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p><h3 id="2-代理模式"><a href="#2-代理模式" class="headerlink" title="2. 代理模式"></a>2. 代理模式</h3><blockquote><p>是为一个对象提供一个代用品或占位符，以便控制对它的访问</p></blockquote><p>假设当A 在心情好的时候收到花，小明表白成功的几率有60%，而当A 在心情差的时候收到花，小明表白的成功率无限趋近于0。小明跟A 刚刚认识两天，还无法辨别A 什么时候心情好。如果不合时宜地把花送给A，花被直接扔掉的可能性很大，这束花可是小明吃了7 天泡面换来的。但是A 的朋友B 却很了解A，所以小明只管把花交给B，B 会监听A 的心情变化，然后选择A 心情好的时候把花转交给A，代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">Flower</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">sendFlower</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flower</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    target<span class="token punctuation">.</span><span class="token function">receiveFlower</span><span class="token punctuation">(</span>flower<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">receiveFlower</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">flower</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">listenGoodMood</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">receiveFlower</span><span class="token punctuation">(</span>flower<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">receiveFlower</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">flower</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到花'</span><span class="token operator">+</span> flower<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">listenGoodMood</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>xiaoming<span class="token punctuation">.</span><span class="token function">sendFlower</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>场景</strong></p><p>HTML元 素事件代理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"ul"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong></p><ul><li>代理模式能将代理对象与被调用对象分离，降低了系统的耦合度。代理模式在客户端和目标对象之间起到一个中介作用，这样可以起到保护目标对象的作用</li><li>代理对象可以扩展目标对象的功能；通过修改代理对象就可以了，符合开闭原则；</li></ul><p><strong>缺点</strong></p><p>处理请求速度可能有差别，非直接访问存在开销</p><h3 id="3-工厂模式"><a href="#3-工厂模式" class="headerlink" title="3. 工厂模式"></a>3. 工厂模式</h3><blockquote><p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fun'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>  <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// use</span><span class="token keyword">let</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> p <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'p1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>场景</strong></p><ul><li>如果你不想让某个子系统与较大的那个对象之间形成强耦合，而是想运行时从许多子系统中进行挑选的话，那么工厂模式是一个理想的选择</li><li>将new操作简单封装，遇到new的时候就应该考虑是否用工厂模式；</li><li>需要依赖具体环境创建不同实例，这些实例都有相同的行为,这时候我们可以使用工厂模式，简化实现的过程，同时也可以减少每种对象所需的代码量，有利于消除对象间的耦合，提供更大的灵活性</li></ul><p><strong>优点</strong></p><ul><li>创建对象的过程可能很复杂，但我们只需要关心创建结果。</li><li>构造函数和创建者分离, 符合“开闭原则”</li><li>一个调用者想创建一个对象，只要知道其名称就可以了。</li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li></ul><p><strong>缺点</strong></p><ul><li>添加新产品时，需要编写新的具体产品类,一定程度上增加了系统的复杂度</li><li>考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度</li></ul><p><strong>什么时候不用</strong></p><p>当被应用到错误的问题类型上时,这一模式会给应用程序引入大量不必要的复杂性.除非为创建对象提供一个接口是我们编写的库或者框架的一个设计上目标,否则我会建议使用明确的构造器,以避免不必要的开销。</p><p>由于对象的创建过程被高效的抽象在一个接口后面的事实,这也会给依赖于这个过程可能会有多复杂的单元测试带来问题。</p><h3 id="4-单例模式"><a href="#4-单例模式" class="headerlink" title="4. 单例模式"></a>4. 单例模式</h3><blockquote><p>顾名思义，单例模式中Class的实例个数最多为1。当需要一个对象去贯穿整个系统执行某些任务时，单例模式就派上了用场。而除此之外的场景尽量避免单例模式的使用，因为单例模式会引入全局状态，而一个健康的系统应该避免引入过多的全局状态。</p></blockquote><p><strong>实现单例模式需要解决以下几个问题：</strong></p><ul><li>如何确定Class只有一个实例？</li><li>如何简便的访问Class的唯一实例？</li><li>Class如何控制实例化的过程？</li><li>如何将Class的实例个数限制为1？</li></ul><p>我们一般通过实现以下两点来解决上述问题：</p><ul><li>隐藏Class的构造函数，避免多次实例化</li><li>通过暴露一个 <font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">getInstance() </font>方法来创建/获取唯一实例</li></ul><p>Javascript中单例模式可以通过以下方式实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 单例构造器</span><span class="token keyword">const</span> FooServiceSingleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 隐藏的Class的构造函数</span>  <span class="token keyword">function</span> <span class="token function">FooService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 未初始化的单例对象</span>  <span class="token keyword">let</span> fooService<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建/获取单例对象的函数</span>    <span class="token function-variable function">getInstance</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fooService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fooService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FooService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> fooService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现的关键点有：</strong></p><ul><li>使用 IIFE创建局部作用域并即时执行；</li><li>getInstance() 为一个 闭包 ，使用闭包保存局部作用域中的单例对象并返回。</li></ul><p>我们可以验证下单例对象是否创建成功：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fooService1 <span class="token operator">=</span> FooServiceSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fooService2 <span class="token operator">=</span> FooServiceSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooService1 <span class="token operator">===</span> fooService2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>场景例子</strong></p><ul><li>定义命名空间和实现分支型方法</li><li>登录框</li><li>vuex 和 redux中的store</li></ul><p><strong>优点</strong></p><ul><li>划分命名空间，减少全局变量</li><li>增强模块性，把自己的代码组织在一个全局变量名下，放在单一位置，便于维护</li><li>且只会实例化一次。简化了代码的调试和维护</li></ul><p><strong>缺点</strong></p><ul><li>由于单例模式提供的是一种单点访问，所以它有可能导致模块间的强耦合</li><li>从而不利于单元测试。无法单独测试一个调用了来自单例的方法的类，而只能把它与那个单例作为一 个单元一起测试。</li></ul><h3 id="5-策略模式"><a href="#5-策略模式" class="headerlink" title="5. 策略模式"></a>5. 策略模式</h3><blockquote><p>策略模式简单描述就是：对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。把它们一个个封装起来，并且使它们可以互相替换</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>策略模式<span class="token operator">-</span>校验表单<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>meta content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span> http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>form id <span class="token operator">=</span> <span class="token string">"registerForm"</span> method<span class="token operator">=</span><span class="token string">"post"</span> action<span class="token operator">=</span><span class="token string">"http://xxxx.com/api/register"</span><span class="token operator">&gt;</span>  用户名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"userName"</span><span class="token operator">&gt;</span>  密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">&gt;</span>  手机号码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"phoneNumber"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>  <span class="token comment">// 策略对象</span>  <span class="token keyword">const</span> strategies <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">isNoEmpty</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> errorMsg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">isNoSpace</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> errorMsg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">minLength</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> length<span class="token punctuation">,</span> errorMsg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">maxLength</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> length<span class="token punctuation">,</span> errorMsg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">isMobile</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> errorMsg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|17[7]|18[0|1|2|3|5|6|7|8|9])\d{8}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 验证类</span><span class="token keyword">class</span> <span class="token class-name">Validator</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> rules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rule<span class="token punctuation">;</span> rule <span class="token operator">=</span> rules<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> strategyAry <span class="token operator">=</span> rule<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> errorMsg <span class="token operator">=</span> rule<span class="token punctuation">.</span>errorMsg      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> strategy <span class="token operator">=</span> strategyAry<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        strategyAry<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        strategyAry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span>        <span class="token keyword">return</span> strategies<span class="token punctuation">[</span>strategy<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> strategyAry<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> validatorFunc<span class="token punctuation">;</span> validatorFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> errorMsg <span class="token operator">=</span> <span class="token function">validatorFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorMsg      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 调用代码</span><span class="token keyword">let</span> registerForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'registerForm'</span><span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token function-variable function">validataFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isNoEmpty'</span><span class="token punctuation">,</span>    <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'用户名不可为空'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isNoSpace'</span><span class="token punctuation">,</span>    <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'不允许以空白字符命名'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'minLength:2'</span><span class="token punctuation">,</span>    <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'用户名长度不能小于2位'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>    <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'minLength:6'</span><span class="token punctuation">,</span>    <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'密码长度不能小于6位'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>phoneNumber<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isMobile'</span><span class="token punctuation">,</span>    <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'请输入正确的手机号码格式'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> validator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>registerForm<span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> errorMsg <span class="token operator">=</span> <span class="token function">validataFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>场景例子</strong></p><ul><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的’行为’，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li><li>一个系统需要动态地在几种算法中选择一种。</li><li>表单验证</li></ul><p><strong>优点</strong></p><ul><li>利用组合、委托、多态等技术和思想，可以有效的避免多重条件选择语句</li><li>提供了对开放-封闭原则的完美支持，将算法封装在独立的strategy中，使得它们易于切换，理解，易于扩展</li><li>利用组合和委托来让Context拥有执行算法的能力，这也是继承的一种更轻便的代替方案</li></ul><p><strong>缺点</strong></p><ul><li>会在程序中增加许多策略类或者策略对象</li><li>要使用策略模式，必须了解所有的strategy，必须了解各个strategy之间的不同点，这样才能选择一个合适的strategy</li></ul><h3 id="6-迭代器模式"><a href="#6-迭代器模式" class="headerlink" title="6. 迭代器模式"></a>6. 迭代器模式</h3><blockquote><p>如果你看到这，ES6中的迭代器 Iterator 相信你还是有点印象的，上面第60条已经做过简单的介绍。迭代器模式简单的说就是提供一种方法顺序一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p></blockquote><p><strong>迭代器模式解决了以下问题：</strong></p><ul><li>提供一致的遍历各种数据结构的方式，而不用了解数据的内部结构</li><li>提供遍历容器（集合）的能力而无需改变容器的接口</li></ul><p><strong>一个迭代器通常需要实现以下接口：</strong></p><ul><li>hasNext()：判断迭代是否结束，返回Boolean</li><li>next()：查找并返回下一个元素</li></ul><p>为Javascript的数组实现一个迭代器可以这么写：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> items<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Iterator</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">hasNext</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证一下迭代器是否工作：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Iterator</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出：1, red, false, 3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES6提供了更简单的迭代循环语法 for…of，使用该语法的前提是操作对象需要实现 可迭代协议（The iterable protocol），简单说就是该对象有个Key为 Symbol.iterator 的方法，该方法返回一个iterator对象。</p><p>比如我们实现一个 Range 类用于在某个数字区间进行迭代：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> start<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> end <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证一下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>num <span class="token keyword">of</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 输出：1, 2, 3, 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-观察者模式"><a href="#7-观察者模式" class="headerlink" title="7. 观察者模式"></a>7. 观察者模式</h3><blockquote><p>观察者模式又称发布-订阅模式（Publish/Subscribe Pattern），是我们经常接触到的设计模式，日常生活中的应用也比比皆是，比如你订阅了某个博主的频道，当有内容更新时会收到推送；又比如JavaScript中的事件订阅响应机制。观察者模式的思想用一句话描述就是：被观察对象（subject）维护一组观察者（observer），当被观察对象状态改变时，通过调用观察者的某个方法将这些变化通知到观察者。</p></blockquote><p><strong>观察者模式中Subject对象一般需要实现以下API：</strong></p><ul><li>subscribe(): 接收一个观察者observer对象，使其订阅自己</li><li>unsubscribe(): 接收一个观察者observer对象，使其取消订阅自己</li><li>fire(): 触发事件，通知到所有观察者</li></ul><p><strong>用JavaScript手动实现观察者模式：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 被观察者</span><span class="token keyword">function</span> <span class="token function">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Subject</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 订阅</span>  <span class="token function-variable function">subscribe</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 取消订阅</span>  <span class="token function-variable function">unsubscribe</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">observerToRemove</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> observer <span class="token operator">!==</span> observerToRemove<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 事件触发</span>  <span class="token function-variable function">fire</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">observer</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证一下订阅是否成功：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">observer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer 1 Firing!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">observer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer 2 Firing!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：</span>Observer <span class="token number">1</span> Firing<span class="token operator">!</span> Observer <span class="token number">2</span> Firing<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证一下取消订阅是否成功：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">subject<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：</span>Observer <span class="token number">1</span> Firing<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>场景</strong></p><ul><li>DOM事件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>vue 响应式</li></ul><p><strong>优点</strong></p><ul><li>支持简单的广播通信，自动通知所有已经订阅过的对象</li><li>目标对象与观察者之间的抽象耦合关系能单独扩展以及重用</li><li>增加了灵活性</li><li>观察者模式所做的工作就是在解耦，让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响到另一边的变化。</li></ul><p><strong>缺点</strong></p><p>过度使用会导致对象与对象之间的联系弱化，会导致程序难以跟踪维护和理解</p><h3 id="8-中介者模式"><a href="#8-中介者模式" class="headerlink" title="8. 中介者模式"></a>8. 中介者模式</h3><ul><li>在中介者模式中，中介者（Mediator）包装了一系列对象相互作用的方式，使得这些对象不必直接相互作用，而是由中介者协调它们之间的交互，从而使它们可以松散偶合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用，保证这些作用可以彼此独立的变化。</li><li>中介者模式和观察者模式有一定的相似性，都是一对多的关系，也都是集中式通信，不同的是中介者模式是处理同级对象之间的交互，而观察者模式是处理Observer和Subject之间的交互。中介者模式有些像婚恋中介，相亲对象刚开始并不能直接交流，而是要通过中介去筛选匹配再决定谁和谁见面。</li></ul><p><strong>场景</strong></p><p>例如购物车需求，存在商品选择表单、颜色选择表单、购买数量表单等等，都会触发change事件，那么可以通过中介者来转发处理这些事件，实现各个事件间的解耦，仅仅维护中介者对象即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> goods <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment">//手机库存</span>  <span class="token string-property property">'red|32G'</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token string-property property">'red|64G'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string-property property">'blue|32G'</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token string-property property">'blue|32G'</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//中介者</span><span class="token keyword">var</span> mediator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> colorSelect <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'colorSelect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> memorySelect <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'memorySelect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> numSelect <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'numSelect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function-variable function">changed</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">switch</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token literal-property property">colorSelect</span><span class="token operator">:</span>          <span class="token comment">//TODO</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token literal-property property">memorySelect</span><span class="token operator">:</span>          <span class="token comment">//TODO</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token literal-property property">numSelect</span><span class="token operator">:</span>          <span class="token comment">//TODO</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>colorSelect<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  mediator<span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>memorySelect<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  mediator<span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>numSelect<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  mediator<span class="token punctuation">.</span><span class="token function">changed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>聊天室里</li></ul><p>聊天室成员类：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Member</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>chatroom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Member</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 发送消息</span>  <span class="token function-variable function">send</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> toMember</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>chatroom<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> toMember<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 接收消息</span>  <span class="token function-variable function">receive</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> fromMember</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fromMember<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>聊天室类：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Chatroom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>members <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Chatroom</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 增加成员</span>  <span class="token function-variable function">addMember</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">member</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>members<span class="token punctuation">[</span>member<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> member<span class="token punctuation">;</span>    member<span class="token punctuation">.</span>chatroom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 发送消息</span>  <span class="token function-variable function">send</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> fromMember<span class="token punctuation">,</span> toMember</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    toMember<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> fromMember<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试一下：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> chatroom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chatroom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bruce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span><span class="token string">'bruce'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> frank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Member</span><span class="token punctuation">(</span><span class="token string">'frank'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chatroom<span class="token punctuation">.</span><span class="token function">addMember</span><span class="token punctuation">(</span>bruce<span class="token punctuation">)</span><span class="token punctuation">;</span>chatroom<span class="token punctuation">.</span><span class="token function">addMember</span><span class="token punctuation">(</span>frank<span class="token punctuation">)</span><span class="token punctuation">;</span>bruce<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hey frank'</span><span class="token punctuation">,</span> frank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：bruce to frank: hello frank</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong></p><ul><li>使各对象之间耦合松散，而且可以独立地改变它们之间的交互</li><li>中介者和对象一对多的关系取代了对象之间的网状多对多的关系</li><li>如果对象之间的复杂耦合度导致维护很困难，而且耦合度随项目变化增速很快，就需要中介者重构代码</li></ul><p><strong>缺点</strong></p><p>系统中会新增一个中介者对象，因为对象之间交互的复杂性，转移成了中介者对象的复杂性，使得中介者对象经常是巨大的。中介 者对象自身往往就是一个难以维护的对象。</p><h3 id="9-访问者模式"><a href="#9-访问者模式" class="headerlink" title="9. 访问者模式"></a>9. 访问者模式</h3><blockquote><p>访问者模式 是一种将算法与对象结构分离的设计模式，通俗点讲就是：访问者模式让我们能够在不改变一个对象结构的前提下能够给该对象增加新的逻辑，新增的逻辑保存在一个独立的访问者对象中。访问者模式常用于拓展一些第三方的库和工具。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 访问者  </span><span class="token keyword">class</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">visitConcreteElement</span><span class="token punctuation">(</span><span class="token parameter">ConcreteElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConcreteElement<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 元素类  </span><span class="token keyword">class</span> <span class="token class-name">ConcreteElement</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ConcreteElement.operation invoked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token function">accept</span><span class="token punctuation">(</span><span class="token parameter">visitor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    visitor<span class="token punctuation">.</span><span class="token function">visitConcreteElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// client</span><span class="token keyword">let</span> visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Visitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>elementA<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>访问者模式的实现有以下几个要素：</strong></p><ul><li>Visitor Object：访问者对象，拥有一个visit()方法</li><li>Receiving Object：接收对象，拥有一个 accept() 方法</li><li>visit(receivingObj)：用于Visitor接收一个Receiving Object</li><li>accept(visitor)：用于Receving Object接收一个Visitor，并通过调用Visitor的 visit() 为其提供获取Receiving Object数据的能力</li></ul><p>简单的代码实现如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Receiving Object：<span class="token keyword">function</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> salary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Employee</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">getSalary</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salary<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">setSalary</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">salary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">accept</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">visitor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Visitor Object：<span class="token keyword">function</span> <span class="token function">Visitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token class-name">Visitor</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function-variable function">visit</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">employee</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    employee<span class="token punctuation">.</span><span class="token function">setSalary</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证一下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">'bruce'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Visitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>employee<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>场景</p><p>对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作</p><p>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。</p><p><strong>优点</strong></p><ul><li>符合单一职责原则</li><li>优秀的扩展性</li><li>灵活性</li></ul><p><strong>缺点</strong></p><ul><li>具体元素对访问者公布细节，违反了迪米特原则</li><li>违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</li><li>具体元素变更比较困难</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器中 JS 的事件循环机制</title>
      <link href="/LF_blog/interview/no-049.html"/>
      <url>/LF_blog/interview/no-049.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-事件循环机制"><a href="#1-事件循环机制" class="headerlink" title="1.事件循环机制"></a>1.事件循环机制</h3><img src="/LF_blog/interview/no-049/1.png" class=""><p>浏览器执行JS代码大致可以分为三个步骤，而这三个步骤的往复构成了JS的事件循环机制（如图）。</p><blockquote><p><strong>第一步：主线程（JS引擎线程）中执行JS整体代码或回调函数（也就是宏任务），执行过程中会将对象存储到堆（heap）中，将函数的参数和局部变量加入到栈（stack）中，执行完毕后会释放堆或退出栈。执行完这个宏任务后，会判断微任务队列（microtask queue）是否为空，如果不为空，则会将所有的微任务依次取出并执行。如果在这个过程中触发了任何 Web APIs 将进行第二步操作。</strong><br><br><strong>第二步：调用 Web API，并在合适的时候将回调函数加入到事件回调队列（event queue）中。比如执行了</strong> <font style="color:rgb(192, 52, 29);">setTimeout(callback1, 1000)</font> <strong>，会创建一个计时器，并且在另一个线程（浏览器定时触发线程）里面监听计时器是否过期，等到计时器过期后，会将对应回调</strong> <font style="color:rgb(192, 52, 29);">callback1</font> <strong>加入事件回调队列中。</strong><br><br><strong>第三步：等到第一步中的微任务执行完毕之后，会判断事件回调队列（event queue）是否为空。如果不为空，则会取出并执行最先进入队列的回调函数，执行过程如同第一步。如果为空，则会视情况进行等待或挂起主线程。</strong><br><br><strong>补充说明：浏览器的内核是多线程的，常驻线程有浏览器 GUI 渲染线程、JavaScript 引擎线程、浏览器定时触发器线程、浏览器事件触发线程、浏览器 http 异步请求线程。</strong></p></blockquote><h3 id="2-宏任务与微任务"><a href="#2-宏任务与微任务" class="headerlink" title="2.宏任务与微任务"></a>2.宏任务与微任务</h3><p><strong>宏任务（macrotask）：script（整体代码）、setTimeout/setInterval、I/O、UI rendering等</strong><br><strong>微任务（microtask）：Promise、MutationObserver等</strong></p><p>JS代码执行过程——宏任务与微任务的执行示意图：</p><img src="/LF_blog/interview/no-049/2.png" class=""><p>如图，可以看出JS执行过程中，是先执行一个宏任务，再执行这个宏任务产生的对应微任务，执行完毕后，再执行后面的宏任务，以此往复。</p><h3 id="3-实例分析"><a href="#3-实例分析" class="headerlink" title="3.实例分析"></a>3.实例分析</h3><p><strong>使用浏览器：Chrome Version 80.0.3987.163</strong></p><p><strong>第一组：</strong></p><p><strong>比较 setTimeout 与 Promise</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'microtask: promise'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果：</strong></p><img src="/LF_blog/interview/no-049/3.png" class=""><p><strong>分析：</strong></p><p><strong>以JS的事件循环机制来分析。首先，script（整体代码）算是一个宏任务，执行完毕，会先后输出”start”和”end”，然后执行这个过程中产生的微任务，即promis.then中的回调，输出”microtask: promise”；这个过程中也调用了 Web API 中的 setTimeout，会创建一个计时器，过期后将回调添加到事件回调队列中；然后再执行回调（第二个宏任务），输出”setTimeout”。与浏览器运行输出一致，符合预期。</strong></p><p><strong>第二组：</strong></p><p><strong>宏任务与微任务的执行顺序对比</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'func1'</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'microtask.promise1'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'func2'</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'microtask.promise2'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>func1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>func2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果：</strong></p><img src="/LF_blog/interview/no-049/4.png" class=""><p><strong>分析：</strong></p><p><strong>从输出结果可以看出，当一个宏任务执行完毕后，会接着执行相应的所有微任务，执行完毕后，再执行后续的宏任务，并以往复，与预期相符。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面白屏如何优化</title>
      <link href="/LF_blog/notes/no-048.html"/>
      <url>/LF_blog/notes/no-048.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>当用户点开一个链接或者是直接在浏览器中输入URL开始进行访问时，就开始等待页面的展示。页面渲染的时间越短，用户等待的时间就越短，用户感知到页面的速度就越快。这样可以极大的提升用户的体验，减少用户的跳出，提升页面的留存率。</p></blockquote><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>白屏时间：即用户点击一个链接或打开浏览器输入URL地址后，从屏幕空白到显示第一个画面的时间。</p><p>白屏时间的长短将会直接影响用户对该APP/网站的第一印象。</p><h3 id="二、白屏时间计算："><a href="#二、白屏时间计算：" class="headerlink" title="二、白屏时间计算："></a>二、白屏时间计算：</h3><p>在 &lt;/head&gt; 标签前的 &lt;script&gt; 标签内加入代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>navigationStart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、页面白屏到加载完成的过程"><a href="#三、页面白屏到加载完成的过程" class="headerlink" title="三、页面白屏到加载完成的过程"></a>三、页面白屏到加载完成的过程</h3><p>从输入url，到页面的画面展示的过程：</p><p>DNS解析（即浏览器查找域名的IP地址）</p><p>TCP连接</p><p>发送HTTP请求</p><p>服务器处理请求并返回HTTP报文</p><p>浏览器解析、渲染页面</p><p>连接结束</p><p>1、首先，在浏览器地址栏中输入url</p><p>2、浏览器先查看浏览器缓存-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三步操作。</p><p>3、在发送http请求前，需要域名解析(DNS解析)，解析获取相应的IP地址。</p><p>4、浏览器向服务器发起tcp连接，与浏览器建立tcp三次握手。</p><p>5、握手成功后，浏览器向服务器发送http请求，请求数据包。</p><p>6、服务器处理收到的请求，将数据返回至浏览器</p><p>7、浏览器收到HTTP响应</p><p>8、读取页面内容，浏览器渲染，解析html源码</p><p>9、生成Dom树、解析css样式、js交互,渲染显示页面</p><p>浏览器下载HTML后，首先解析头部代码，进行样式表下载，然后继续向下解析HTML代码，构建DOM树，同时进行样式下载。当DOM树构建完成后，立即开始构造CSSOM树。理想情况下，样式表下载速度够快，DOM树和CSSOM树进入一个并行的过程，当两棵树构建完毕，构建渲染树，然后进行绘制。</p><p>浏览器安全解析策略对解析HTML会造成以下影响：</p><p>当解析HTML时遇到内联JS代码，会阻塞DOM树的构建，会先执行完JS代码;</p><p>当CSS样式文件没有下载完成时，浏览器解析HTML遇到了内联JS代码，此时，浏览器暂停JS脚本执行，暂停HTML解析。直到CSS文件下载完成，完成CSSOM树构建，重新恢复原来的解析。</p><p>JavaScript 会阻塞 DOM 生成，而样式文件又会阻塞 JavaScript 的执行</p><h3 id="四、白屏性能优化的手段"><a href="#四、白屏性能优化的手段" class="headerlink" title="四、白屏性能优化的手段"></a>四、白屏性能优化的手段</h3><p>DNS解析优化</p><p>针对DNS Lookup环节，我们可以针对性的进行DNS解析优化。</p><p>使用 meta 标签</p><p>使用 link 标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x-dns-prefetch-control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>DNS缓存优化</p><p>DNS预加载策略</p><p>稳定可靠的DNS服务器</p><p>TCP网络链路优化</p><p>服务端处理优化，对于大型网站，可以使用服务器端缓存，如使用Redis、Memcached等技术缓存数据；</p><p>减少DOM操作和重排操作，避免频繁改变页面结构和样式，提高页面渲染优化；</p><p>压缩代码：使用工具将 HTML、CSS、JS 等文件进行压缩，减小文件大小，加快加载速度。</p><p>合并文件：将多个小文件合并成一个大文件，减少浏览器请求次数，加快加载速度。</p><p>避免使用Flash或其它插件，因为它们会增加页面的加载时间和减缓页面的渲染；</p><p>将JavaScript脚本放到页面底部，减少页面的加载时间和渲染时间；</p><p>减小图片大小：使用图片压缩工具，将图片大小减小，减少加载时间。</p><p>延迟加载：将页面上不必要展示的图片、视频等资源延迟加载，减少首屏加载时间。</p><p>延迟加载：将页面上不必要展示的图片、视频等资源延迟加载，减少首屏加载时间。</p><p>优化网络请求：避免重定向、减少 HTTP 请求头大小、使用 HTTP/2 等技术优化网络请求，加快加载速度。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战项目中，常用的TS</title>
      <link href="/LF_blog/notes/no-047.html"/>
      <url>/LF_blog/notes/no-047.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-泛型的使用"><a href="#1-泛型的使用" class="headerlink" title="1. 泛型的使用"></a>1. 泛型的使用</h3><p>泛型可以让我们编写更具灵活性、可重用性和类型安全性的代码。在 TypeScript 中，泛型通常使用类型参数来定义一个通用的类型或函数，并在使用时指定具体的类型。</p><p>我们想编写一个函数来反转任意数组，假设我们不使用泛型，代码可能是这样<code>↓</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reverseStrings</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">items</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">reverseNumbers</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">items</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这种方法显然不够优雅，因为我们需要分别编写两个函数来处理 <code>string</code> 和 <code>number</code> 类型的数组，并且当我们需要处理其他类型的数组时，我们必须再次编写新的函数。</p><p>使用泛型，我们可以很容易地创建一个通用的函数来处理任何类型的数组：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> reverse<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>items<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> reversedWords <span class="token operator">=</span> reverse<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversedWords<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['world', 'hello']</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> reversedNumbers <span class="token operator">=</span> reverse<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversedNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-利用交叉类型和联合类型"><a href="#2-利用交叉类型和联合类型" class="headerlink" title="2. 利用交叉类型和联合类型"></a>2. 利用交叉类型和联合类型</h3><p>交叉类型（Intersection Types）允许将多个类型合并为一个类型，新类型将具有所有类型的特性。我们可以使用符号 <code>&amp;</code> 运算符将两个或多个类型组合成一个交叉类型。</p><p>联合类型（Union Types）表示一个值可以有多种类型之一。我们可以使用符号 <code>|</code> 运算符将两个或多个类型组合成一个联合类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 交叉类型</span><span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>  <span class="token function">meow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type Pet <span class="token operator">=</span> Dog <span class="token operator">&amp;</span> Cat<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token literal-property property">myPet</span><span class="token operator">:</span> Pet <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'walking'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">meow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'meowing'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>联合类型的使用也非常简单，用法就是使用 <code>|</code> 运算符将多个类型组合在一起</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>  <span class="token literal-property property">side</span><span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>  <span class="token literal-property property">radius</span><span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">shape</span><span class="token operator">:</span> Square <span class="token operator">|</span> Circle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'side'</span> <span class="token keyword">in</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> shape<span class="token punctuation">.</span>side <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-类型推断"><a href="#3-类型推断" class="headerlink" title="3. 类型推断"></a>3. 类型推断</h3><p>类型推断（Type Inference）是 TypeScript 的一个强大的特性。它允许编译器根据上下文自动推断出变量的类型，从而减少手动输入类型的工作量，同时也提高了代码的可维护性和可读性。</p><p><strong>栗子</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-keyof"><a href="#4-keyof" class="headerlink" title="4. keyof"></a>4. keyof</h3><p><code>keyof</code> 是 TypeScript 中的一个关键字，用于获取对象类型的所有键的联合类型。它可以帮助我们在编写泛型函数或操作对象属性时，提供更好的类型安全性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span> <span class="token operator">|</span> <span class="token string">'female'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> getProperty<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token literal-property property">person</span><span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'female'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> gender <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-映射类型"><a href="#5-映射类型" class="headerlink" title="5. 映射类型"></a>5. 映射类型</h3><p>TypeScript 中的映射类型（Mapped Types）是一种非常强大的类型操作符，它可以根据一个已有的对象类型，生成一个新的对象类型。映射类型可以帮助我们进行一些常见的类型转换和操作，如将所有属性变成可选属性、添加或删除属性、修改属性类型等等。</p><p>TypeScript 中的映射类型有以下四种：</p><ol><li><code>Partial&lt;T&gt;</code>：将类型 <code>T</code> 中所有属性变为可选属性。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span> <span class="token operator">|</span> <span class="token string">'female'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type PartialPerson <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token comment">// 等价于</span><span class="token comment">// interface PartialPerson {</span><span class="token comment">//   name?: string;</span><span class="token comment">//   age?: number;</span><span class="token comment">//   gender?: 'male' | 'female';</span><span class="token comment">// }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>Readonly&lt;T&gt;</code>：将类型 <code>T</code> 中所有属性变为只读属性。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span> <span class="token operator">|</span> <span class="token string">'female'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type ReadonlyPerson <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token comment">// 等价于</span><span class="token comment">// interface ReadonlyPerson {</span><span class="token comment">//   readonly name: string;</span><span class="token comment">//   readonly age: number;</span><span class="token comment">//   readonly gender: 'male' | 'female';</span><span class="token comment">// }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>Record&lt;K, T&gt;</code>：创建一个新的对象类型，其属性名类型为 <code>K</code>，属性值类型为 <code>T</code>。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">type Dictionary<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token literal-property property">dict</span><span class="token operator">:</span> Dictionary<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">456</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><code>Pick&lt;T, K&gt;</code>：从类型 <code>T</code> 中选择指定的属性 <code>K</code>，并返回一个新的对象类型。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'male'</span> <span class="token operator">|</span> <span class="token string">'female'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type PersonNameAndAge <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">'name'</span> <span class="token operator">|</span> <span class="token string">'age'</span><span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token comment">// 等价于</span><span class="token comment">// interface PersonNameAndAge {</span><span class="token comment">//   name: string;</span><span class="token comment">//   age: number;</span><span class="token comment">// }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一种映射类型叫做 <code>Keyof</code>，它用于获取一个对象类型中所有属性名组成的联合类型。这个类型在前面的问题中已经讲到过了，这里就不再赘述。</p><h3 id="6-类型别名和接口"><a href="#6-类型别名和接口" class="headerlink" title="6. 类型别名和接口"></a>6. 类型别名和接口</h3><h4 id="1-类型别名"><a href="#1-类型别名" class="headerlink" title="1. 类型别名"></a>1. 类型别名</h4><p>类型别名（Type Aliases）是一种给一个已经存在的类型起一个新的名字的方式。通过 <code>type</code> 关键字可以定义一个类型别名。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">type MyString <span class="token operator">=</span> string<span class="token punctuation">;</span>type MyNumber <span class="token operator">=</span> number<span class="token punctuation">;</span>type Person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型别名可以很方便地给复杂的类型定义一个简洁的名称，从而提高代码可读性，并且还可以使用联合类型、交叉类型等高级类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">type Color <span class="token operator">=</span> <span class="token string">'red'</span> <span class="token operator">|</span> <span class="token string">'green'</span> <span class="token operator">|</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>type Shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">'circle'</span><span class="token punctuation">;</span> radius<span class="token operator">:</span> number <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">'square'</span><span class="token punctuation">;</span> length<span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">shape</span><span class="token operator">:</span> Shape<span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> Color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-接口"><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h4><p>接口（Interfaces）是一种描述对象结构的方式，在 TypeScript 中通过 <code>interface</code> 关键字来定义。接口可以包含属性、方法和索引签名等</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token literal-property property">person</span><span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口在描述对象结构时非常有用，它可以提供更好的代码组织性和可读性，并且也可以在一些特定场景下提供更好的类型安全性。另外需要注意的是，接口只能描述对象的形状，不能描述具体的实现方式。如果需要描述具体的实现方式，可以使用类或函数类型。</p><h3 id="7-装饰器"><a href="#7-装饰器" class="headerlink" title="7. 装饰器"></a>7. 装饰器</h3><p>装饰器是一种特殊的语法，它可以用来修饰类、方法、属性以及参数等元素，从而达到一些特定的目的。在 TypeScript 中，我们可以使用 <code>@</code> 符号来声明一个装饰器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">descriptor</span><span class="token operator">:</span> PropertyDescriptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> originalMethod <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Call </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> with args: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">originalMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>  @log  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TypeScript 中的装饰器可以用于很多场景，例如实现依赖注入、自动绑定事件、路由映射等等。常见的装饰器包括 <code>@Injectable</code>、<code>@Component</code>、<code>@ViewChild</code>、<code>@RouterConfig</code> 等等。</p><h3 id="8-类型守卫"><a href="#8-类型守卫" class="headerlink" title="8. 类型守卫"></a>8. 类型守卫</h3><p>类型守卫（Type Guards）是 TypeScript 中用来检测类型的一种机制，它可以帮助开发者在运行时检测某个变量的类型，并在不同的条件下提供不同的类型声明。</p><p>在 TypeScript 中，有四种常见的类型守卫方式：</p><ol><li><code>typeof</code> 类型守卫</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> number <span class="token operator">|</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// x is number</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// x is string</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>instanceof</code> 类型守卫</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyClass</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// x is an instance of MyClass</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>自定义类型守卫函数</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">isA</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> x is <span class="token constant">A</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x<span class="token punctuation">.</span>a <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isA</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// x is an instance of A</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// x is an instance of B</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><code>in</code> 操作符类型守卫</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">in</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// x is an instance of A</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// x is an instance of B</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-声明文件"><a href="#9-声明文件" class="headerlink" title="9. 声明文件"></a>9. 声明文件</h3><p>声明文件（Declaration File）是一种特殊的类型文件，用来描述外部 JavaScript 库、模块或对象的类型，以便在 TypeScript 代码中正确引用和使用它们。</p><p>TypeScript 编译器可以根据 JavaScript 库的源代码推断出其类型信息，但某些 JavaScript 库并没有提供类型定义文件，或者类型定义文件不完整或不准确，这时我们需要手动编写声明文件。声明文件的扩展名为 <code>.d.ts</code>，可以与 TypeScript 文件一起放置在项目目录中。声明文件的编写方式有以下几种：</p><ol><li>定义全局变量和函数</li></ol><p>如果我们需要在 TypeScript 代码中调用浏览器原生 API 或其他 JavaScript 库中的全局变量和函数，就需要手动编写声明文件来告诉 TypeScript 对应变量和函数的类型。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">declare <span class="token keyword">const</span> <span class="token function-variable function">$</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">selector</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#my-element'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>扩展已有类型</li></ol><p>有时候我们需要扩展已有的类型定义，以适应自己的需求，这时可以使用 <code>interface</code>、<code>namespace</code> 等关键字来定义和扩展类型。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>  <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello, world!'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "!dlrow ,olleH"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>模块声明</li></ol><p>如果我们要使用一个已有的 JavaScript 模块，但模块本身没有提供类型定义文件，或者类型定义文件不完整或不准确，这时我们需要手动编写声明文件来告诉 TypeScript 模块的类型信息。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">declare module <span class="token string">'my-module'</span> <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-类型化事件"><a href="#10-类型化事件" class="headerlink" title="10. 类型化事件"></a>10. 类型化事件</h3><p>类型化事件（Typed Event）是一种可以指定事件处理函数接收参数类型、返回值类型的事件机制。通过使用类型化事件，我们可以在编译时对事件处理函数的类型进行检查，以避免运行时因类型不匹配而导致的错误。</p><p><strong>举个栗子</strong>，如何定义和使用类型化事件<code>↓</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">EventHandler</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TypedEvent</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token literal-property property">handlers</span><span class="token operator">:</span> EventHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">handler</span><span class="token operator">:</span> EventHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">removeHandler</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">handler</span><span class="token operator">:</span> EventHandler<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">raise</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> handler <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 定义一个事件参数类型</span><span class="token keyword">interface</span> <span class="token class-name">MyEventArgs</span> <span class="token punctuation">{</span>  <span class="token literal-property property">message</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 创建一个类型化事件实例</span><span class="token keyword">const</span> myEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypedEvent</span><span class="token operator">&lt;</span>MyEventArgs<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加一个事件处理函数</span>myEvent<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">args</span><span class="token operator">:</span> MyEventArgs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 触发事件</span>myEvent<span class="token punctuation">.</span><span class="token function">raise</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Hello, world!'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见实战命令</title>
      <link href="/LF_blog/notes/no-046.html"/>
      <url>/LF_blog/notes/no-046.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 查看状态</span><span class="token command">$ git status      </span><span class="token comment"># 添加管理(将文件或目录添加到本地仓库的暂存区)</span><span class="token command">$ git add filename  # 将指定的文件添加到暂存区</span><span class="token command">$ git add path/     # 将指定的目录添加到暂存区</span><span class="token command">$ git add .         # 将当前目录所有内容(文件和文件夹)添加到暂存区</span><span class="token command">$ git add<span class="token parameter"> --all</span>     # 将当前目录所有内容(文件和文件夹)添加到暂存区</span><span class="token comment"># 将文件移出暂存区</span><span class="token command">$ git rm<span class="token parameter"> --cached</span> filenamed</span><span class="token comment"># 将暂存区的内容提交到本地仓库 （yarn lint:fix   处理eslint格式）</span><span class="token command">$ git commit<span class="token parameter"> -m</span> </span><span class="token string">''</span> build:用于修改项目构建系统，例如修改依赖库、外部接口或者升级Node 版本等; chore:用于对非业务性代码进行修改，例如修改构建流程或者工具配置等; ci: 用于修改持续集成流程，例如修改Travis、Jenkins等工作流配置;  docs:用于修改文档，例如修改README 文件、API 文档等;  style: 用于修改代码的样式，例如调整缩进、空格、空行等; refactor:用于重构代码，例如修改代码结构、变量名、函数名等但不修改功能逻辑; perf: 用于优化性能，例如提升代码的性能、减少内存占用等; test: 用于修改测试用例，例如添加、删除、修改代码的测试用例等。<span class="token comment"># 查看提交日志</span><span class="token command">$ git log</span><span class="token comment"># 恢复历史版本</span><span class="token command">$ git reset<span class="token parameter"> --hard</span> hash(前六位)</span><span class="token command">$ git push<span class="token parameter"> -f</span> origin xxx 推送到远程  </span><span class="token comment"># 恢复文件</span><span class="token command">$ git checkout filename</span><span class="token comment"># 查看分支</span><span class="token command">$ git branch</span><span class="token comment">#更新远程分支</span><span class="token command">$ git fetch origin</span><span class="token comment">#或者</span><span class="token command">$ git remote update origin<span class="token parameter"> --prune</span> </span><span class="token comment"># 创建分支</span><span class="token command">$ git branch 分支名</span><span class="token comment">#推送/拉取到远程分支 git pull是两个指令的组合：git fetch和git merge</span>$git push/pull origin 分支名<span class="token comment"># 切换分支</span><span class="token command">$ git checkout 分支名</span><span class="token comment"># 返回上游分支</span><span class="token command">$ git checkout -</span><span class="token comment"># 合并远程分支 </span><span class="token command">$ git merge 远程分支名</span><span class="token comment">#代码冲突后，放弃或者退出流程：</span><span class="token comment">#放弃,回到操作前的样子，就像什么都没发生过</span>$ gits cherry-pick --abort<span class="token comment">#退出,不回到操作前的样子,即保留已经 cherry-pick 成功的 commit，并退出 cherry-pick 流程：</span><span class="token command">$ git cherry-pick<span class="token parameter"> --quit</span></span><span class="token comment">#删除本地已合并的分支：</span><span class="token command">$ git branch<span class="token parameter"> -D</span> [branchName] </span><span class="token comment">#删除远程分支: </span><span class="token command">$ git push origin<span class="token parameter"> --delete</span> [branchname]</span><span class="token comment"># 添加远程仓库地址 并取名 origin</span><span class="token command">$ git remote add origin url    //一般新建仓库就有，直接复制</span><span class="token comment"># 创建并切换到 XXX 分支</span><span class="token command">$ git branch<span class="token parameter"> -M</span> XXX</span><span class="token comment"># 将本地仓库推送到远程仓库</span><span class="token command">$ git push<span class="token parameter"> -u</span> origin 分支名    //一般新建仓库就有，直接复制   //git push<span class="token parameter"> -u</span> origin master   主分支</span><span class="token comment">#如果返回： fatal: 远程 origin 已经存在。   此时只需要将远程配置删除，重新添加即可；</span><span class="token command">$ git remote rm origin</span><span class="token comment"># 克隆远程仓库(从无到有)</span><span class="token command">$ git clone https://github.com/jxsrzj0325/mi.com.git</span><span class="token comment"># 从远程仓库拉取分支(更新)</span><span class="token command">$ git pull origin master</span><span class="token comment"># 保存当前未commit的代码</span><span class="token command">$ git stash</span><span class="token comment"># 保存当前未commit的代码并添加备注</span><span class="token command">$ git stash save </span><span class="token string">"备注的内容"</span><span class="token comment"># 列出stash的所有记录</span><span class="token command">$ git stash list</span><span class="token comment"># 删除stash的所有记录</span><span class="token command">$ git stash clear</span><span class="token comment"># 应用最近一次的stash</span><span class="token command">$ git stash apply</span><span class="token comment"># 应用最近一次的stash，随后删除该记录</span><span class="token command">$ git stash pop</span><span class="token comment"># 删除最近的一次stash</span><span class="token command">$ git stash drop</span><span class="token comment"># 查看所有tag</span><span class="token command">$ git tag<span class="token parameter"> -l</span> </span><span class="token comment"># 打tag</span><span class="token command">$ git tag v1.0.0 </span><span class="token comment"># 提交tag</span><span class="token command">$ git push origin v1.0.0 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件内很多个input、select元素(如果有50多个元素) 怎么优雅的控制</title>
      <link href="/LF_blog/notes/no-045.html"/>
      <url>/LF_blog/notes/no-045.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果有多个表单元素，重复代码较多，可以将表单输入元素封装为子组件。这样可以提高代码的复用性和维护性。</p></blockquote><h3 id="子组件：FormInput-vue"><a href="#子组件：FormInput-vue" class="headerlink" title="子组件：FormInput.vue"></a>子组件：FormInput.vue</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'input'"</span> <span class="token operator">:</span>placeholder<span class="token operator">=</span><span class="token string">"label"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>select v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"type === 'select'"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>option v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"option in options"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"option"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"option"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> option <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">options</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>    <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>form<span class="token operator">-</span>input      v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(field, index) in formFields"</span>      <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span>      <span class="token operator">:</span>type<span class="token operator">=</span><span class="token string">"field.type"</span>      <span class="token operator">:</span>label<span class="token operator">=</span><span class="token string">"field.label"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"formData[field.name]"</span>      <span class="token operator">:</span>options<span class="token operator">=</span><span class="token string">"field.options"</span>    <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> FormInput <span class="token keyword">from</span> <span class="token string">'./FormInput.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> FormInput <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">formData</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">formFields</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Username'</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'input'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'gender'</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'Gender'</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'select'</span><span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Male'</span><span class="token punctuation">,</span> <span class="token string">'Female'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，通过创建一个通用的 <code>FormInput</code> 组件，父组件不需要重复每个输入元素的显示逻辑，只需维护表单数据和字段定义。</p><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>如果表单元素类型更多样，可以使用 Vue 的 <code>&lt;component&gt;</code> 标签动态渲染不同类型的输入组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(field, index) in formFields"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">"field.component"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"formData[field.name]"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"field.props"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> InputComponent <span class="token keyword">from</span> <span class="token string">'./InputComponent.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> SelectComponent <span class="token keyword">from</span> <span class="token string">'./SelectComponent.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>    InputComponent<span class="token punctuation">,</span>    SelectComponent  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">formData</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">formFields</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">'InputComponent'</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">placeholder</span><span class="token operator">:</span> <span class="token string">'Username'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'gender'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">'SelectComponent'</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Male'</span><span class="token punctuation">,</span> <span class="token string">'Female'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何编写一个 Webpack Plugin</title>
      <link href="/LF_blog/interview/no-044.html"/>
      <url>/LF_blog/interview/no-044.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-webpack-内部执行流程"><a href="#1-webpack-内部执行流程" class="headerlink" title="1. webpack 内部执行流程"></a>1. webpack 内部执行流程</h2><blockquote><p>一次完整的 webpack 打包大致是这样的过程：</p><ul><li>将命令行参数与 webpack 配置文件 合并、解析得到参数对象。</li><li>参数对象传给 webpack 执行得到 Compiler 对象。</li><li>执行 Compiler 的 run 方法开始编译。每次执行 run 编译都会生成一个 Compilation 对象。</li><li>触发 Compiler 的 make 方法分析入口文件，调用 compilation 的 buildModule 方法创建主模块对象。</li><li>生成入口文件 AST(抽象语法树)，通过 AST 分析和递归加载依赖模块。</li><li>所有模块分析完成后，执行 compilation 的 seal 方法对每个 chunk 进行整理、优化、封装。</li><li>最后执行 Compiler 的 emitAssets 方法把生成的文件输出到 output 的目录中。</li></ul></blockquote><h2 id="2-Plugin-作用"><a href="#2-Plugin-作用" class="headerlink" title="2. Plugin 作用"></a>2. Plugin 作用</h2><p>按我的理解，Webpack 插件的作用就是在 webpack 运行到某个时刻的时候，帮我们做一些事情。</p><p>在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p><p>官方解释是：</p><p>插件向第三方开发者提供了 webpack 引擎中完整的能力。使用阶段式的构建回调，开发者可以引入它们自己的行为到 webpack 构建流程中。</p><h2 id="3-编写-Plugin"><a href="#3-编写-Plugin" class="headerlink" title="3. 编写 Plugin"></a>3. 编写 Plugin</h2><p>webpack 插件的组成：</p><ul><li>一个 JS 命名函数或一个类（可以想下我们平时使用插件就是 <code>new XXXPlugin()</code>的方式）</li><li>在插件类/函数的 (prototype) 上定义一个 apply 方法。</li><li>通过 apply 函数中传入 compiler 并插入指定的事件钩子，在钩子回调中取到 compilation 对象</li><li>通过 compilation 处理 webpack 内部特定的实例数据</li><li>如果是插件是异步的，在插件的逻辑编写完后调用 webpack 提供的 callback</li></ul><p>比如我们写一个插件，生成一个版权的文件。</p><h3 id="3-1-基本雏形"><a href="#3-1-基本雏形" class="headerlink" title="3.1 基本雏形"></a>3.1 基本雏形</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CopyrightWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">CopyrightWebpackPlugin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">apply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> CopyrightWebpackPlugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以写成类的形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CopyrightWebpackPlugin</span> <span class="token punctuation">{</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> CopyrightWebpackPlugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>webpack 在启动之后，在读取配置的过程中会先执行<code>new CopyrightWebpackPlugin(options)</code>操作，初始化一个<code>CopyrightWebpackPlugin</code>实例对象。在初始化 compiler 对象之后，会调用上述实例对象的<code>apply</code>方法并将<code>compiler</code>对象传入。</p><p>在<code>apply</code>方法中，通过<code>compiler</code>对象来监听 webpack 生命周期中广播出来的事件，我们也可以通过 compiler 对象来操作 webpack 的输出。</p><h3 id="3-2-Compiler-和-Compilation"><a href="#3-2-Compiler-和-Compilation" class="headerlink" title="3.2 Compiler 和 Compilation"></a>3.2 Compiler 和 Compilation</h3><p>在插件开发中最重要的两个对象是 <code>compiler</code> 和 <code>compilation</code> 对象。</p><p>compiler 对象代表了完整的 webpack 环境配置，在初始化 compiler 对象之后，通过调用插件实例的 apply 方法，作为其参数传入。这个对象在启动 webpack 时被一次性建立，并包含了 webpack 环境的所有的配置信息，包括 options，loader 和 plugin。当在 webpack 环境中应用一个插件时，插件将收到此 compiler 对象的引用。可以使用它来访问 webpack 的主环境。</p><p>compilation 对象会作为 plugin 内置事件回调函数的参数，一个 compilation 对象包含了当前的模块资源、编译生成资源、变化的文件以及被跟踪依赖的状态信息。当 Webpack 以开发模式运行时，每当检测到一个文件变化，一次新的 compilation 将被创建。compilation 对象也提供了很多事件回调供插件做扩展。通过 compilation 也能读取到 compiler 对象。</p><h3 id="3-3-编码"><a href="#3-3-编码" class="headerlink" title="3.3 编码"></a>3.3 编码</h3><p>下面代码为生成一个版权 txt 文件，新建文件<code>src/plugins/copyright-webpack-plugin.js</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CopyrightWebpackPlugin</span> <span class="token punctuation">{</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// emit 钩子是生成资源到 output 目录之前执行，emit 是一个异步串行钩子，需要用 tapAsync 来注册</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">'CopyrightWebpackPlugin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 回调方式注册异步钩子</span>      <span class="token keyword">const</span> copyrightText <span class="token operator">=</span> <span class="token string">'版权归 JackySummer 所有'</span>      <span class="token comment">// compilation存放了这次打包的所有内容</span>      <span class="token comment">// 所有待生成的文件都在它的 assets 属性上</span>      compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">'copyright.txt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment">// 添加copyright.txt</span>        <span class="token function-variable function">source</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> copyrightText        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">size</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 文件大小</span>          <span class="token keyword">return</span> copyrightText<span class="token punctuation">.</span>length        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 必须调用</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> CopyrightWebpackPlugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>webpack 中许多对象扩展自 Tapable 类。这个类暴露 tap, tapAsync 和 tapPromise 方法，可以使用这些方法，注入自定义的构建步骤，这些步骤将在整个编译过程中不同时机触发。</p><p>使用 tapAsync 方法来访问插件时，需要调用作为最后一个参数提供的回调函数。</p><p>在 webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CopyrightWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/plugins/copyright-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CopyrightWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 webpack 命令，就会看到 dist 目录下生成<code>copyright.txt</code>文件</p><p>如果在配置文件使用 plugin 时传入参数该怎么获得呢，可以在插件类添加构造函数拿到：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">CopyrightWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'jacky'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>copyright-webpack-plugin.js</code>中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">CopyrightWebpackPlugin</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'options'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token comment">// options { name: 'jacky' }</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何编写一个 Webpack Loader</title>
      <link href="/LF_blog/interview/no-043.html"/>
      <url>/LF_blog/interview/no-043.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在平时自己由零搭建项目时，虽然基础配置都比较熟悉，比如配置 file-loader, url-loader, css-loader 等，配置不难，但究竟是怎么起作用的呢，今天就来说说如何编写一个 Webpack Loader。</p></blockquote><h2 id="1-Loader-作用"><a href="#1-Loader-作用" class="headerlink" title="1. Loader 作用"></a>1. Loader 作用</h2><p>按我自己的简单理解，loader 通常指打包的方案，即按什么方式来处理打包，打包的时候它可以拿到模块源代码，经过特定 loader 的转换后返回新的结果。</p><p>比如 sass-loader 可以把 SCSS 代码转换成 CSS 代码</p><h2 id="2-编写-Loader"><a href="#2-编写-Loader" class="headerlink" title="2. 编写 Loader"></a>2. 编写 Loader</h2><h3 id="2-1-保持功能单一"><a href="#2-1-保持功能单一" class="headerlink" title="2.1 保持功能单一"></a>2.1 保持功能单一</h3><p>我们项目中可能会配置很多，但要记住，要保持一个 Loader 的功能单一，避免做多种功能，只需完成一种功能转换即可。</p><p>所以如 less 文件转换成 css 文件，也不是一步到位，而是 less-loader, css-loader, style-loader 几个 loader 的链式调用才能完成转换。</p><h3 id="2-2-模块"><a href="#2-2-模块" class="headerlink" title="2.2 模块"></a>2.2 模块</h3><p>因为 Webpack 本身是运行在 Node.js 之上的，一个 loader 其实就是一个 node 模块，这个模块导出的是一个函数，即：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// source 为 compiler 传递给 Loader 的一个文件的原内容</span>  <span class="token comment">// 处理...</span>  <span class="token keyword">return</span> source <span class="token comment">// 需要返回处理后的内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个导出的函数的工作就是获得处理前的原内容，对原内容执行处理后，返回处理后的内容。</p><h3 id="2-3-替换字符串的-loader"><a href="#2-3-替换字符串的-loader" class="headerlink" title="2.3 替换字符串的 loader"></a>2.3 替换字符串的 loader</h3><p>比如我们打包时，想要替换源文件的字符串，这时可以考虑使用 Loader，因为 loader 就是获得源文件内容然后对其进行处理，再返回。</p><p>比如 src 目录下有三个文件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">src<span class="token operator">/</span>a<span class="token punctuation">.</span>js<span class="token keyword">export</span> <span class="token keyword">const</span> msg1 <span class="token operator">=</span> <span class="token string">'学习Vue'</span>src<span class="token operator">/</span>b<span class="token punctuation">.</span>js<span class="token keyword">export</span> <span class="token keyword">const</span> msg2 <span class="token operator">=</span> <span class="token string">'学习React'</span>src<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> msg1 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./a'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> msg2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./b'</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">输出：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做的事情则是把 a 和 b 两个文件导入，然后输出两个字符串。</p><p>我们要做的事也很简单，把”Vue”转为”Vue 框架”， “React”转为”React 框架”。</p><p>新建 <code>src/loaders/replaceLoader.js</code> 文件，</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">module.exports = function (source) {  const handleContent = source.replace('Vue', 'Vue 框架').replace('React', 'React框架')  return handleContent}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>就这样，loader 写完了！！！</p><p>上面我们讲到，source 是源文件内容，如果打印的话，则是：</p><blockquote><p>import { msg1 } from ‘./a’</p><p>import { msg2 } from ‘./b’</p><p>function print() {</p><p>  console.log(<code>输出：${msg1}, ${msg2}</code>)</p><p>}</p><p>print()</p><p>export const msg1 = ‘学习Vue框架’</p><p>export const msg2 = ‘学习React框架’</p></blockquote><h3 id="2-4-使用-Loader"><a href="#2-4-使用-Loader" class="headerlink" title="2.4 使用 Loader"></a>2.4 使用 Loader</h3><p>接下来，我们要来使用它，在根目录下新建文件 webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'./src/loaders/replaceLoader.js'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>npx webpack</code>, 查看打包结果<code>dist/main.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token string">'use strict'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'输出：学习React框架, 深入理解JavaScript'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>替换成功！</p><p>需要注意的是，<code>use</code>里面填写的 loader 是去<code>node_modules</code>目录里面找的，由于我们是自定义的 loader，所以不能直接写<code>use: 'replaceLoader'</code>，但直接写路径的方式未免难看点，我们可以通过 webpack 来配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'node_modules'</span><span class="token punctuation">,</span> <span class="token string">'./src/loaders'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// node_modules找不到，就去./src/loaders找</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'replaceLoader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-获取-loader-的-options"><a href="#2-5-获取-loader-的-options" class="headerlink" title="2.5 获取 loader 的 options"></a>2.5 获取 loader 的 options</h3><p>写完之后，让我们来想想，其实就是写一个功能函数嘛。</p><p>当然，这只是最简单的例子，如果 loader 可以传入参数呢，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'replaceLoader'</span><span class="token punctuation">,</span>        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token string">'replaceString'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候可以使用<code>this.query</code>来获取，通过<code>this.query.params</code>就能拿到，这里需要注意的是，this 上下文是有用的，所以这个 loader 导出函数不能是箭头函数。</p><p>但 webpack 更推荐<code>loader-utils</code>模块来获取，它提供了许多有用的工具，最常用的一种工具是获取传递给 loader 的选项。</p><p>首先要安装</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pnpm i <span class="token operator">-</span><span class="token constant">D</span> loader<span class="token operator">-</span>utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改<code>src/loaders/replaceLoader.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> getOptions <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'loader-utils'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { params: 'replaceString' }</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token comment">// replaceString</span>  <span class="token keyword">const</span> handleContent <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'Vue'</span><span class="token punctuation">,</span> <span class="token string">'Vue框架'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'React框架'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> handleContent<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意的是，<code>getOptions(this)</code>参数传入的是 this，也就是说</p><p>打印结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token string">'replaceString'</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token string">'replaceString'</span> <span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token string">'replaceString'</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-6-this-callback"><a href="#2-6-this-callback" class="headerlink" title="2.6 this.callback()"></a>2.6 this.callback()</h3><p>上面都是返回原来内容转换后的内容，但有些场景下还需要返回其他东西比如 sourceMap</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 告诉 Webpack 返回的结果</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> sourceMaps<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>另外也不需要 return 了，所以也可使用此 API 替代 return</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> getOptions <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'loader-utils'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> handleContent <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'Vue'</span><span class="token punctuation">,</span> <span class="token string">'Vue框架'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'React框架'</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> handleContent<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-自定义-loader-应用场景"><a href="#2-7-自定义-loader-应用场景" class="headerlink" title="2.7 自定义 loader 应用场景"></a>2.7 自定义 loader 应用场景</h3><ol><li>在所有 function 外面加一层 try catch 代码块捕获错误，避免手动繁琐添加。</li><li>实现中英文替换：可以将文字用占位符如<code>{{ title }}</code>包裹，检测到占位符则根据环境变量替换为中英文。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实现电子签名</title>
      <link href="/LF_blog/notes/no-040.html"/>
      <url>/LF_blog/notes/no-040.html</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>在现在的时代发展中，从以前的手写签名，逐渐衍生出了 <font color="red">电子签名</font>。电子签名和纸质手写签名一样具有法律效应。电子签名目前主要还是在需要个人确认的产品环节和司法类相关的产品上较多。<br><br>举个常用的例子，大家都用过<font color="red"> 钉钉</font>，钉钉上面就有电子签名，相信大家这肯定是知道的。<br><br>那作为前端的我们如何实现电子签名呢？其实在html5中已经出现了一个重要级别的辅助标签，是啥呢？那就是<font color="red"> canvas</font>。</p></blockquote><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img src="/LF_blog/notes/no-040/1.png" class=""><p>代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">            <span class="token selector">*</span> <span class="token punctuation">{</span>                <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'1px solid #000'</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//线宽</span>        ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span> <span class="token comment">//线颜色</span>        ctx<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> <span class="token string">'round'</span><span class="token punctuation">;</span> <span class="token comment">//线条的结束端点样式</span>        ctx<span class="token punctuation">.</span>lineJoin <span class="token operator">=</span> <span class="token string">'round'</span><span class="token punctuation">;</span> <span class="token comment">//两条线相交时，所创建的拐角类型</span>        <span class="token keyword">const</span> mobileStatus <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Mobile|Android|iPhone</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> offsetX<span class="token punctuation">,</span> offsetY<span class="token punctuation">,</span> pageX<span class="token punctuation">,</span> pageY <span class="token punctuation">}</span> <span class="token operator">=</span> mobileStatus                <span class="token operator">?</span> event<span class="token punctuation">.</span>changedTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token operator">:</span> event<span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//起始一条路径，或重置当前路径</span>            ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>pageX<span class="token punctuation">,</span> pageY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把路径移动到画布中的指定点，不创建线条</span>            window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>mobileStatus <span class="token operator">?</span> <span class="token string">'touchmove'</span> <span class="token operator">:</span> <span class="token string">'mousemove'</span><span class="token punctuation">,</span> draw<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> pageX<span class="token punctuation">,</span> pageY <span class="token punctuation">}</span> <span class="token operator">=</span> mobileStatus <span class="token operator">?</span> event<span class="token punctuation">.</span>changedTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> event<span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>pageX<span class="token punctuation">,</span> pageY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加一个新点，然后在画布中创建从该点到最后指定点的线条</span>            ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//绘制已定义的路径</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">cloaseDraw</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> draw<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>mobileStatus <span class="token operator">?</span> <span class="token string">'touchstart'</span> <span class="token operator">:</span> <span class="token string">'mousedown'</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>mobileStatus <span class="token operator">?</span> <span class="token string">'touchend'</span> <span class="token operator">:</span> <span class="token string">'mouseup'</span><span class="token punctuation">,</span> cloaseDraw<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在给定的矩形内清除指定的像素</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            canvas<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                a<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段HTML代码配合JavaScript实现了一个简单的绘图功能，允许用户在网页上通过鼠标或触摸设备绘制线条。下面是代码的解释：</p><ol><li>初始化画布:<br>  ○ 通过document.querySelector(‘canvas’)获取到页面上的元素，并存储在变量canvas中。   ○ 设置画布的宽度为500像素，高度为300像素。   ○ 给画布添加一个1像素宽的黑色边框。   ○ 通过canvas.getContext(‘2d’)获取2D绘图上下文，并存储在变量ctx中，用于后续的绘图操作。</li><li>设置绘图参数:<br>  ○ ctx.lineWidth = 3;设置线条的宽度为3像素。<br>  ○ ctx.strokeStyle = ‘red’;设置线条的颜色为红色。<br>  ○ ctx.lineCap = ‘round’;设置线条端点的样式为圆形。<br>  ○ ctx.lineJoin = ‘round’;设置线条相交时拐角的样式为圆形。</li><li>检测移动设备:<br>  ○ 使用正则表达式/Mobile|Android|iPhone/i检测用户代理字符串，判断当前设备是否为移动设备。如果是，mobileStatus为true，否则为false。</li><li>绘图逻辑:<br>  ○ start函数：当用户开始触摸或按下鼠标按钮时触发。它记录触摸或鼠标按下的位置，并开始一个新的路径。<br>  ○ draw函数：当用户移动触摸或鼠标时触发。它根据当前位置绘制一条线到上一个位置，然后重复这个过程直到用户停止移动。<br>  ○ cloaseDraw函数（注意这里可能是closeDraw的拼写错误）：当用户结束触摸或释放鼠标按钮时触发。它停止绘制线条。</li><li>事件监听:<br>  ○ 根据mobileStatus的值，为window添加相应的事件监听器：如果是移动设备，监听touchstart和touchend事件；如果不是，监听mousedown和mouseup事件。这些事件分别触发start和cloaseDraw函数。</li><li>清除和保存绘图:<br>  ○ cancel函数：清除画布上的所有内容。<br>  ○ save函数：将画布内容保存为一个PNG文件。它使用canvas.toBlob方法创建一个Blob对象，然后创建一个隐藏的链接(元素)，设置其下载属性为当前时间戳加上.png后缀，并将Blob对象的URL设置为链接的href属性。最后，自动触发点击事件以下载文件，并移除链接元素。 这段代码是一个简单的绘图应用的基础，展示了如何使用HTML5的元素和JavaScript来创建交互式绘图体验。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端如何部署项目，实战阿里云服务器</title>
      <link href="/LF_blog/notes/no-042.html"/>
      <url>/LF_blog/notes/no-042.html</url>
      
        <content type="html"><![CDATA[<h3 id="部署核心步骤"><a href="#部署核心步骤" class="headerlink" title="部署核心步骤"></a><strong>部署核心步骤</strong></h3><p><strong>1.准备打包好的前端代码（dist包）或者是一个html文件</strong><br><strong>2.购买阿里云服务器,并且连接</strong><br><strong>3.为阿里云服务器安装ngnix开启web服务</strong><br><strong>4.使用xshell和sftp将自己的前端代码放到服务器上</strong></p><h3 id="1-准备前端代码"><a href="#1-准备前端代码" class="headerlink" title="1.准备前端代码"></a>1.准备前端代码</h3><p>这部分很简单，可以随意准备。我这边就随便起了个vue脚手架，然后打了个dist包。</p><img src="/LF_blog/notes/no-042/1731399892141-b9b7706a-7d3a-4526-b0ca-2950435bad35-179871.png" class=""><h3 id="2-购买阿里云服务器"><a href="#2-购买阿里云服务器" class="headerlink" title="2.购买阿里云服务器"></a>2.购买阿里云服务器</h3><p>如果是作为练习的话，买最便宜的就OK了。其实没什么，地域选择国内，然后配置选最低的就行了，便宜。操作系统一般都是选centOS64 ，把免费分配公网ip勾上就行</p><img src="/LF_blog/notes/no-042/1731399947013-92bb6732-3120-46dd-bcef-e247ee9279f9-236014.png" class=""><p>购买完成后， 你需要点控制台，然后找到云服务器ECS</p><img src="/LF_blog/notes/no-042/1731400016582-b9aefb3b-ef4a-41f8-a875-64557aa45596-227556.png" class=""><img src="/LF_blog/notes/no-042/1731400055446-99cfc78f-dc56-43a0-9822-098d1e013b99-910040.png" class=""><p>然后你就能找到你的服务器了，其中最重要的就是实例（管理你的服务器状态）和安全组（控制可访问该服务器的端口号）</p><img src="/LF_blog/notes/no-042/1731400078958-4827ec1a-07ad-4e44-8e08-3125eb07f3c3-191683.png" class=""><p>点击实例中的远程连接，看是否能正常连接。 这里的ip地址（公）就是待会你要连接的服务器的ip地址，也是别人访问你网站的地址，可以注意一下。</p><img src="/LF_blog/notes/no-042/1731400163753-626dacb5-8d72-4973-a4de-055903b91805-767324.png" class=""><p>如果你的页面显示这个，说明你与远程连接已经成功了</p><img src="/LF_blog/notes/no-042/1731400193619-552abcc1-dab2-49e1-b995-2d9c5a9781ad-391811.png" class=""><h3 id="3-为阿里云服务器安装ngnix开启web服务"><a href="#3-为阿里云服务器安装ngnix开启web服务" class="headerlink" title="3.为阿里云服务器安装ngnix开启web服务"></a>3.为阿里云服务器安装ngnix开启web服务</h3><p><strong>a.准备工作：安装xshell（用来连接服务器）和xftp（用来上传你的文件）</strong>， 如果是window电脑</p><p><strong>b.打开xshell，然后连接你的远程服务器</strong></p><img src="/LF_blog/notes/no-042/1731400250244-eb2f486f-0632-42cb-bcda-a0234cff5316-002800.png" class=""><img src="/LF_blog/notes/no-042/1731400265323-f7d09863-1267-42ae-abe3-73143fd8707a-515424.png" class=""><p>之后会弹出让你输用户名（一般是root）和密码。最后就是连接成功了</p><img src="/LF_blog/notes/no-042/1731400292768-7f41708f-2316-4872-ae4c-ea61d33bf5a5-470468.png" class=""><p>恭喜你，此刻已经可以和服务器通信了。虽然刚才在云服务器上也可以远程连接，但是使用xshell一般比较方便</p><p><strong>注意点，如果你这里如果连接不上。那么你一定需要看我这一步！！！！很重要！！！去云服务器页面设置安全组，建议大家都去做这一步！！！！</strong></p><img src="/LF_blog/notes/no-042/1731400309742-a981cdd1-fcaa-402a-b39e-a04a3137faf2-254701.png" class=""><p>添加一个22的入口（这个和xshell连接的端口号需要是一致的，xshell默认是22），其他选择如图</p><img src="/LF_blog/notes/no-042/1731400330430-a55bc17f-1873-42f8-ad42-8913ca900628-786540.png" class=""><p><strong>再添加一个80的入口</strong>，用于nginx的,跟上面的一样的步骤</p><p><strong>c.安装反向代理nginx</strong><br>命令：yum install nginx</p><img src="/LF_blog/notes/no-042/1731400348961-fb760753-bb95-441b-9eaf-4a968d51c360-002305.png" class=""><p>然后中途会停一下让你选择，输入y再按回车就行了。最后就是安装成功。</p><img src="/LF_blog/notes/no-042/1731400368561-32a144e3-b253-4514-aabe-aa78364ca060-312711.png" class=""><p>有这个complete就说明成功了</p><p>但是此时你只是在服务器安装了nginx，并没有在远程服务器启动这个nginx的服务。这里就要用到几个命令了。我先全部放出来，后面会用到部分。 (注意千万不要把nginx打成了ngnix！！！！！！！！！！我老是打错)</p><p>安装nginx：yum install nginx</p><p>看是否有ngnix进程：netstat -anput | grep nginx</p><p>查看服务器端口占用情况：netstat -ntlp</p><p>nginx启动:nginx</p><p>nginx重启:nginx -s reload</p><p>关闭nginx：</p><p>nginx -s stop : 快速停止nginx</p><p>nginx -s quit ：完整有序的停止nginx</p><p>查看默认的nginx配置文件路径： nginx -t</p><p><strong>d.启动nginx</strong></p><p>命令：nginx，一般输完没有任何的反馈，如果你不确定有没有启动nginx，那么你可以使用netstat -anput | grep nginx这个命令看看有没有nginx的端口占用</p><p>—<img src="/LF_blog/notes/no-042/1731400386421-9c2c0513-8b94-4165-87ff-3fe6c4c49bb5-506221.png" class=""></p><p>上面这个图看不出来，可以输这个命令netstat -anput | grep nginx看看有没有端口占用</p><img src="/LF_blog/notes/no-042/1731400403111-02d5718e-879b-42af-a451-2a43533b22d4-101327.png" class=""><p>很明显我这里有nginx占用的80端口<br>然后在浏览器输入你对外的ip地址。如果页面出现了内容（一般是centos或者nginx页面）就说明你的nginx启动成功了，我这里是因为放了页面，所以有页面了,你们的应该不是这个页面，但是只要出现了有文字，就说明步骤是正确的</p><img src="/LF_blog/notes/no-042/1731400419642-d35a9514-b543-4ee5-858c-694fc06db624-985743.png" class=""><p><strong>e.将你的文件放置到服务器上</strong><br>点击你的xshell传输新建文件，会把刚才下载的xftp打开</p><img src="/LF_blog/notes/no-042/1731400471992-3939cee3-cfa1-4515-9267-d5782d2c6c0e-123983.png" class=""><p>此时右边就是你的云服务器的桌面了，右键新建一个web文件夹，再在里面新建一个html1文件夹，把你的dist文件传输上去</p><img src="/LF_blog/notes/no-042/1731400497020-fdb6cb08-980a-4119-97b1-b347667a58b3-001688.png" class=""><img src="/LF_blog/notes/no-042/1731400504938-095603a7-1e4a-4ca9-96e4-c759afd648c9-067474.png" class=""><p>怎么把本地的放上去？直接拖拽到文件夹的空白区域就行</p><img src="/LF_blog/notes/no-042/1731400528193-8100d7c9-7c6c-4fb1-83e7-f68308499a3d-803922.png" class=""><p><strong>f.修改nginx文件，让我们的nginx服务代理我们自己的html文件</strong><br>先找到默认的nginx配置文件路径： nginx -t</p><img src="/LF_blog/notes/no-042/1731400581658-47d61316-785a-4f6b-b97f-8ec3fb463f35-666682.png" class=""><p>在xftp上找到该文件传输到自己的电脑上（默认是传输到桌面上的）</p><img src="/LF_blog/notes/no-042/1731400598287-75f1a572-f1dc-4aff-af6e-1ded4d335321-196387.png" class=""><p>使用vscode（没有vscode，用webstorm和记事本也可以）编辑该文件，主要是改这里的路径改成我们刚才上传的路径</p><img src="/LF_blog/notes/no-042/1731400638272-30deb07a-a871-4575-b0ce-b486868cce11-338084.png" class=""><p>然后把该nginx.conf覆盖服务器上（就是上传到服务器，拖进去）的这个文件</p><img src="/LF_blog/notes/no-042/1731400650979-ced49915-30f4-461d-bf58-06ee79555051-524785.png" class=""><p><strong>g.重启nginx（nginx要求修改了nginx.conf配置之后必须重启后才生效）</strong><br>打开xshell：输入nginx -s reload，重启,重启之后没有任何反应，这是正常的不要慌</p><img src="/LF_blog/notes/no-042/1731400665057-b5cb42cb-0674-44ef-b6ec-52316b884af4-955713.png" class=""><p>此时用浏览器，打开你的ip地址。如果显示出来了你自己的网页，那就要说明你的网页已经上线成功了，你可以把你的ip发给任意一个人，他们都能访问你的网站了</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一套代码如何同时适配移动端和pc端</title>
      <link href="/LF_blog/notes/no-039.html"/>
      <url>/LF_blog/notes/no-039.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-媒体查询（Media-Query）-CSS-Flex-Grid（适用于简单布局）"><a href="#1-媒体查询（Media-Query）-CSS-Flex-Grid（适用于简单布局）" class="headerlink" title="1. 媒体查询（Media Query）+ CSS Flex/Grid（适用于简单布局）"></a>1. <strong>媒体查询（Media Query）+ CSS Flex/Grid</strong>（适用于简单布局）</h3><p>利用 CSS 的 <code>@media</code> 进行响应式设计，使页面在不同设备上适配。例如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 默认 PC 端样式 */</span><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 移动端适配 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector">.container</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 16px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用于：<br>✅ 结构简单、仅靠 CSS 即可完成适配的项目。<br>❌ 需要手动写多个 <code>@media</code> 规则，维护成本较高。</p><hr><h3 id="2-rem-vw-vh-适配（适用于移动端为主的场景）"><a href="#2-rem-vw-vh-适配（适用于移动端为主的场景）" class="headerlink" title="2. rem / vw+vh 适配（适用于移动端为主的场景）"></a>2. <strong>rem / vw+vh 适配</strong>（适用于移动端为主的场景）</h3><ul><li>rem 方案：根据 <code>html</code> 的 <code>font-size</code> 变化来调整页面比例。常与 <code>postcss-pxtorem</code> 配合使用。</li><li>vw / vh 方案：使用视口单位 <code>vw</code>（相对于视口宽度的 1%）进行布局。</li></ul><p>示例（rem 方案）：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span> <span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vw / 375 * 16<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 以 375px 设计稿为基准 */</span><span class="token punctuation">}</span><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 20rem<span class="token punctuation">;</span> <span class="token comment">/* 根据设计稿换算成 rem */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用于：<br>✅ 主要针对移动端，兼容 PC。<br>❌ 适配 PC 时可能会遇到一些尺寸问题。</p><hr><h3 id="3-使用-useMediaQuery-监听设备类型（更灵活的方式）"><a href="#3-使用-useMediaQuery-监听设备类型（更灵活的方式）" class="headerlink" title="3. 使用 useMediaQuery 监听设备类型（更灵活的方式）"></a>3. 使用 useMediaQuery 监听设备类型（更灵活的方式）</h3><p>可以用 Vue3 的 <code>ref</code> 或 <code>computed</code> 结合 <code>window.matchMedia</code> 来监听屏幕尺寸，动态切换组件或布局：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useDeviceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isMobile <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">"(max-width: 768px)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">updateDeviceType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    isMobile<span class="token punctuation">.</span>value <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">"(max-width: 768px)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> updateDeviceType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> updateDeviceType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> isMobile <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中使用：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;  import { useDeviceType } from "@/hooks/useDeviceType";  const { isMobile } = useDeviceType();&lt;/script&gt;&lt;template&gt;  &lt;div v-if="isMobile"&gt;移动端界面&lt;/div&gt;  &lt;div v-else&gt;PC 端界面&lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用于：<br>✅ 适配不同设备时可以动态渲染不同组件，减少无效的 DOM。<br>❌ 需要写额外的逻辑，稍微增加代码复杂度。</p><hr><h3 id="4-基于-vite-plugin-style-import-按需加载不同端的样式"><a href="#4-基于-vite-plugin-style-import-按需加载不同端的样式" class="headerlink" title="4. 基于 vite-plugin-style-import 按需加载不同端的样式"></a>4. 基于 vite-plugin-style-import 按需加载不同端的样式</h3><p>如果 UI 组件库支持不同端（如 <code>Vant</code> 针对移动端，<code>Ant Design Vue</code> 针对 PC 端），可以按需加载：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> styleImport <span class="token keyword">from</span> <span class="token string">'vite-plugin-style-import'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">styleImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">libs</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token literal-property property">libraryName</span><span class="token operator">:</span> <span class="token string">'vant'</span><span class="token punctuation">,</span>          <span class="token literal-property property">esModule</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token function-variable function">resolveStyle</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vant/es/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/style/index</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token literal-property property">libraryName</span><span class="token operator">:</span> <span class="token string">'ant-design-vue'</span><span class="token punctuation">,</span>          <span class="token literal-property property">esModule</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token function-variable function">resolveStyle</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ant-design-vue/es/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/style/index</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用于：<br>✅ 需要在 PC 端和移动端使用不同 UI 组件库的情况。<br>❌ 不能解决布局适配问题。</p><hr><h3 id="5-自动适配的-lib-flexible-postcss-pxtorem"><a href="#5-自动适配的-lib-flexible-postcss-pxtorem" class="headerlink" title="5. 自动适配的 lib-flexible + postcss-pxtorem"></a>5. 自动适配的 lib-flexible + postcss-pxtorem</h3><p>如果项目主要是移动端，同时希望在 PC 端也适配，可以用 <code>lib-flexible</code> + <code>postcss-pxtorem</code> 来自动转换 px：</p><ol><li>安装：</li></ol><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">npm install amfe-flexible postcss-pxtorem --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>在 <code>main.ts</code> 引入：</li></ol><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">import 'amfe-flexible'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>在 <code>postcss.config.js</code> 配置：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">"postcss-pxtorem"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">rootValue</span><span class="token operator">:</span> <span class="token number">37.5</span><span class="token punctuation">,</span> <span class="token comment">// 设计稿是 375px</span>      <span class="token literal-property property">propList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 需要转换的属性</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用于：<br>✅ 主要是移动端项目，同时希望 PC 端也能展示。<br>❌ 依赖 <code>amfe-flexible</code>，部分 UI 组件库可能不兼容。</p><hr><h3 id="6-Vue3-Tailwind-CSS（推荐）"><a href="#6-Vue3-Tailwind-CSS（推荐）" class="headerlink" title="6. Vue3 + Tailwind CSS（推荐）"></a>6. <strong>Vue3 + Tailwind CSS</strong>（推荐）</h3><p>如果不想写一堆 <code>@media</code>，可以用 Tailwind CSS 的 <code>sm</code>、<code>md</code>、<code>lg</code> 进行适配：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class="w-full p-4 text-center sm:bg-blue-200 md:bg-green-200 lg:bg-red-200"&gt;    &lt;p class="text-sm md:text-lg lg:text-2xl"&gt;不同屏幕尺寸显示不同颜色&lt;/p&gt;  &lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用于：<br>✅ 开箱即用，开发速度快。<br>❌ 需要学习 Tailwind 语法。</p><hr><h3 id="7-使用-VueUse-的-useWindowSize-进行监听"><a href="#7-使用-VueUse-的-useWindowSize-进行监听" class="headerlink" title="7. 使用 VueUse 的 useWindowSize 进行监听"></a>7. 使用 VueUse 的 useWindowSize 进行监听</h3><p><code>VueUse</code> 提供了 <code>useWindowSize</code> 来动态适配：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useWindowSize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@vueuse/core'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> width <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useWindowSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> isMobile <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> width<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token number">768</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用于：<br>✅ 需要动态判断设备类型的场景。<br>❌ 需要引入 <code>VueUse</code> 依赖。</p><hr><h3 id="8-双端组件（PC-Mobile-组件分开管理）"><a href="#8-双端组件（PC-Mobile-组件分开管理）" class="headerlink" title="8. 双端组件（PC / Mobile 组件分开管理）"></a>8. 双端组件（PC / Mobile 组件分开管理）</h3><p>可以维护两个独立的组件，在 <code>App.vue</code> 里按条件渲染：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;MobileLayout v-if="isMobile" /&gt;  &lt;PCLayout v-else /&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用于：<br>✅ 适配复杂项目，PC 和移动端 UI 差异较大时。<br>❌ 代码量增加，维护成本高。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><table><thead><tr><th>方案</th><th>适用场景</th><th>维护成本</th><th>适配能力</th></tr></thead><tbody><tr><td><strong>Media Query</strong></td><td>适用于简单布局</td><td>低</td><td>⭐⭐⭐</td></tr><tr><td><strong>rem/vw 适配</strong></td><td>主要移动端</td><td>中</td><td>⭐⭐⭐⭐</td></tr><tr><td><strong>useMediaQuery 监听</strong></td><td>组件级适配</td><td>中</td><td>⭐⭐⭐⭐</td></tr><tr><td><strong>vite-plugin-style-import</strong></td><td>UI 组件按需加载</td><td>低</td><td>⭐⭐⭐</td></tr><tr><td><strong>lib-flexible + pxtorem</strong></td><td>H5 项目</td><td>中</td><td>⭐⭐⭐⭐</td></tr><tr><td><strong>Tailwind CSS</strong></td><td>快速开发</td><td>低</td><td>⭐⭐⭐⭐</td></tr><tr><td><strong>useWindowSize 监听</strong></td><td>动态调整</td><td>中</td><td>⭐⭐⭐⭐</td></tr><tr><td><strong>双端组件</strong></td><td>复杂项目</td><td>高</td><td>⭐⭐⭐⭐⭐</td></tr></tbody></table><h3 id="推荐方案"><a href="#推荐方案" class="headerlink" title="推荐方案"></a><strong>推荐方案</strong></h3><ul><li><strong>移动端为主</strong> ➝ <code>rem + vw/vh</code> 或 <code>lib-flexible</code></li><li><strong>PC &amp; 移动端共存</strong> ➝ <code>useMediaQuery</code> + <code>Tailwind CSS</code></li><li><strong>PC &amp; 移动端布局差异大</strong> ➝ <code>双端组件</code></li></ul><p>结论： 取决你的项目主要是 PC 还是移动端？</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3、Vue I18n 国际化配置</title>
      <link href="/LF_blog/notes/no-038.html"/>
      <url>/LF_blog/notes/no-038.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong><font style="color:rgb(62, 175, 124);">什么是Vue I18n?</font></strong><font style="color:rgb(123, 120, 120);"> Vue I18 n是Vue.js的国际化插件。它可以轻松地将一些本地化功能集成到Vue.js应用程序中。</font></p></blockquote><p><font style="color:rgb(51, 51, 51);">官网： </font><a href="https://vue-i18n.intlify.dev/">https://vue-i18n.intlify.dev/</a></p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">add</span> vue-i18n@latestor<span class="token function">npm</span> <span class="token function">install</span> vue-i18n@latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-接入到Vue3中"><a href="#2-接入到Vue3中" class="headerlink" title="2. 接入到Vue3中"></a>2. 接入到Vue3中</h2><p><strong>新建目录结构</strong></p><img src="/LF_blog/notes/no-038/1.png" class=""><p><strong>json文件夹下</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// zh.json 文件</span><span class="token punctuation">{</span>  <span class="token property">"hello"</span><span class="token operator">:</span> <span class="token string">"你好 世界！"</span><span class="token punctuation">,</span>  <span class="token property">"demo"</span><span class="token operator">:</span> <span class="token string">"演示"</span><span class="token punctuation">}</span><span class="token comment">// en.json 文件</span><span class="token punctuation">{</span>  <span class="token property">"hello"</span><span class="token operator">:</span> <span class="token string">"Hello World!"</span><span class="token punctuation">,</span>  <span class="token property">"demo"</span><span class="token operator">:</span> <span class="token string">"demo"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>index.js</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createI18n<span class="token punctuation">,</span> useI18n <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-i18n'</span><span class="token comment">//状态管理 pinia</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useOutsideSystemStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/stores/modules/system.js'</span><span class="token keyword">import</span> zhCN <span class="token keyword">from</span> <span class="token string">'./json/zh.json'</span><span class="token keyword">import</span> enUS <span class="token keyword">from</span> <span class="token string">'./json/en.json'</span><span class="token keyword">const</span> useSystem <span class="token operator">=</span> <span class="token function">useOutsideSystemStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token function">createI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 是否在vue应用程序上使用vue-i18n Legacy API（传统）模式</span>  <span class="token literal-property property">legacy</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 默认当前语言</span>  <span class="token literal-property property">locale</span><span class="token operator">:</span> useSystem<span class="token punctuation">.</span>language<span class="token punctuation">,</span>  <span class="token comment">// 是否为每个组件注入全局属性和函数（true 后 在template中可以直接使用$t('')）</span>  <span class="token literal-property property">globalInjection</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 语言合集</span>  <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">zh</span><span class="token operator">:</span> zhCN<span class="token punctuation">,</span>    <span class="token literal-property property">en</span><span class="token operator">:</span> enUS  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> locale <span class="token operator">=</span> i18n<span class="token punctuation">.</span>global<span class="token punctuation">.</span>locale<span class="token keyword">export</span> <span class="token punctuation">{</span> useI18n<span class="token punctuation">,</span> locale<span class="token punctuation">,</span> i18n <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>main.js</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> i18n <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/locales'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>i18n<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 因配置全局注入属性和方法，可以直接使用vue-i18n内置的$t方法 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{ $t('hello') }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> useI18n <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue-i18n"</span><span class="token punctuation">;</span>  <span class="token comment">// 在js中可以引入vue-i18提供的hook</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> t <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useI18n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue I18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化</title>
      <link href="/LF_blog/interview/no-037.html"/>
      <url>/LF_blog/interview/no-037.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-首屏性能指标"><a href="#1-首屏性能指标" class="headerlink" title="1. 首屏性能指标"></a>1. 首屏性能指标</h3><ul><li>FP&nbsp;First&nbsp;Paint/首次绘制</li><li>FCP&nbsp;First&nbsp;Contentful&nbsp;Paint/首内容绘制</li><li>FMP&nbsp;First&nbsp;Meaningful&nbsp;Paint/首次有效绘制</li><li>LCP&nbsp;Largest&nbsp;Contentful&nbsp;Paint/最大内容绘制</li></ul><blockquote><p>其中FP、FCP都可以用Performance工具检测。FMP我们可以自己使用MutationObserver来实现</p></blockquote><p>除了这些，还有我们平常不怎么关注的：</p><p><a href="https://web.dev/articles/fcp?hl=zh-cn">First&nbsp;Contentful&nbsp;Paint(FCP) </a>从网页开始加载到网页任何部分的内容呈现在屏幕上所用的时间</p><p><a href="https://web.dev/articles/lcp?hl=zh-cn">Largest&nbsp;Contentful&nbsp;Paint(LCP)</a>从网页开始加载到屏幕上呈现最大的文本块或图片元素所用的时间</p><p><a href="https://web.dev/articles/inp?hl=zh-cn">Interaction&nbsp;to&nbsp;Next&nbsp;Paint(INP)</a>与网页进行的每次点按、点击或键盘互动的延迟时间。根据互动次数，此指标选择网页的最差（或接近最差）互动延迟时间作为单个代表性值，以描述网页的整体响应能力</p><p><a href="https://web.dev/articles/tbt?hl=zh-cn">Total&nbsp;Blocking&nbsp;Time(TBT)</a>从FCP到可交互时间<a href="https://web.dev/articles/tti?hl=zh-cn">(TTI)</a>之间的总时长，其中主线程处于阻塞状态的时间足够长，足以</p><p>阻止输入响应能力</p><p><a href="https://web.dev/articles/cls?hl=zh-cn">Cumulative&nbsp;Layout&nbsp;Shift(CLS)</a>从页面开始加载到其生命周期状态更改为隐藏期间发生的所有意外布局偏移的累计得</p><p>分</p><p><a href="https://web.dev/articles/ttfb?hl=zh-cn">首字节时间(TTFB)</a>网络使用资源的第一个字节响应用户请求所需的时间</p><h3 id="2-减少首屏加载文件资源体积"><a href="#2-减少首屏加载文件资源体积" class="headerlink" title="2. 减少首屏加载文件资源体积"></a>2. 减少首屏加载文件资源体积</h3><ol><li>优化图片：使用合适的图片格式（如WebP),并对图片进行压缩。确保图片尺寸适合其显示区域，不要使用过大的图片。</li><li>延迟加载：使用懒加载(lazyloading)技术，只有在用户滚动到特定区域时才加载相关资源</li><li>精简CSS和JavaScript:</li></ol><p>代码压缩：移除代码中的空格、注释和多余字符，减少文件大小。</p><p>合并文件：将多个CSS和JavaScript文件合并为一个文件，减少HTTP请求次数。</p><p>树摇(TreeShaking):移除未使用的代码，减少打包文件的体积。</p><ol start="4"><li><p>使用CDN:将静态资源托管在内容分发网络(CDN)上，缩短资源加载的时间。</p></li><li><p>减少第三方库：评估和移除不必要的第三方库，使用更轻量级的替代方案。</p></li><li><p>启用浏览器缓存：设置适当的缓存策略，使浏览器能够缓存常用的文件，减少重复加载。</p></li><li><p>压缩文本资源：启用Gzip或Brotli压缩，减少HTML、CSS和JavaScript文件的体积。</p></li></ol><p>8.服务端渲染(SSR)和静态生成：使用服务端渲染或静态生成技术，减少客户端渲染的压力。</p><h3 id="3-预加载内容"><a href="#3-预加载内容" class="headerlink" title="3. 预加载内容"></a>3. 预加载内容</h3><p>1.使用&lt;link&nbsp;rel=”preload”&gt;标签：</p><p>预加载关键资源如字体、图片、CSS和JavaScript文件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"preload"</span> href<span class="token operator">=</span><span class="token string">"styles/main.css"</span> <span class="token keyword">as</span><span class="token operator">=</span><span class="token string">"style"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"preload"</span> href<span class="token operator">=</span><span class="token string">"scripts/main.js"</span> <span class="token keyword">as</span><span class="token operator">=</span><span class="token string">"script"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"preload"</span> href<span class="token operator">=</span><span class="token string">"fonts/myfont.woff2"</span> <span class="token keyword">as</span><span class="token operator">=</span><span class="token string">"font"</span> type<span class="token operator">=</span><span class="token string">"font/woff2"</span> crossorigin<span class="token operator">=</span><span class="token string">"anonymous"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.优先加载关键CSS:</p><p>将关键CSS直接嵌入到HTML文件的头部，减少首次渲染的阻塞。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;sytle&gt;<span class="token comment">/* Critical CSS */</span>  <span class="token selector">body</span> <span class="token punctuation">{</span> margin<span class="token punctuation">:</span> 0<span class="token punctuation">;</span> padding<span class="token punctuation">:</span> 0<span class="token punctuation">;</span> font-family<span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span> <span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.异步加载和延迟加载JavaScript:</p><p>使用async或defer属性来加载非关键的JavaScript文件，避免阻塞HTML解析。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scripts/main.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.预加载字体：</p><p>通过预加载字体资源，避免首次渲染时的字体闪烁(FOIT)。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">&lt;link rel="preload" href="fonts/myfont.woff2" as="font" type="font/woff2" crossorigin="anonymous"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.预加载关键图片：</p><p>对于首屏关键图片，可以使用预加载标签提前加载，确保它们尽快显示。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/1.png<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.置HTTP/2&nbsp;Server&nbsp;Push:</p><p>如果服务器支持HTTP/2,可以配置服务器在客户端请求HTML时推送关键资源。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>  <span class="token directive"><span class="token keyword">http2_push</span> /styles/main.css</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">http2_push</span> /scripts/main.js</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>7.优先加载核心框架：</p><p>对于使用JavaScript框架（如React、Vue)的应用，可以优先加载框架核心代码，确保应用尽快可交互。</p><h3 id="4-预渲染实现"><a href="#4-预渲染实现" class="headerlink" title="4. 预渲染实现"></a>4. 预渲染实现</h3><p><a href="https://github.com/Tofandel/prerenderer#readme">https://github.com/Tofandel/prerenderer#readme</a></p><p>正确使用@prerenderer/webpack-plugin和@prerenderer/renderer-puppeteer进行预渲染。以下是一个详细的配置示例：</p><p>表格开发，可能是大家平常开发过程中最常见的场景，表格的优化我们可以给出以下历程：</p><p>1.用库</p><p>2.初级：tabledom</p><p>3.中级：虚拟表格</p><p>4.高级：canvas&nbsp;table</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">CanvasTable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> canvasRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> canvas <span class="token operator">=</span> canvasRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rowHeigth <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> columnWidths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> data<span class="token punctuation">.</span>lenght <span class="token operator">*</span> rowHeigth<span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> columnWidths<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> rowIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> y <span class="token operator">=</span> rowHeigth <span class="token operator">*</span> rowIndex<span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">+</span> rowHeigth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> columnWidths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">+</span> rowHeigth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>        row<span class="token punctuation">.</span>age<span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        columnWidths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> columnWidths<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        y <span class="token operator">+</span> rowHeigth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span><span class="token function">strokeReact</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> rowHeigth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>canvasRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">10000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> i<span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Name </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CanvasTable</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.专家：canvas+tile技术</p><p>6.高级专家：skia+Webassembly</p><p> 结合给定的五个不同层级的实现方案，以下是详细说明如何在不同层次上实现高效的表格渲染方案：</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规的React项目(优化四)</title>
      <link href="/LF_blog/interview/no-036.html"/>
      <url>/LF_blog/interview/no-036.html</url>
      
        <content type="html"><![CDATA[<h1 id="React-的代码分割与懒加载"><a href="#React-的代码分割与懒加载" class="headerlink" title="React 的代码分割与懒加载"></a>React 的代码分割与懒加载</h1><p>通过 <strong><code>React.lazy</code></strong> 和 <strong><code>Suspense</code></strong> 实现动态加载组件，可以有效减少初始加载时间，提高页面的首屏性能。代码分割的核心思想是将大文件拆分为多个小文件，按需加载，从而避免一次性加载过多内容。</p><hr><h3 id="示例场景"><a href="#示例场景" class="headerlink" title="示例场景"></a><strong>示例场景</strong></h3><p>假设有一个应用包含以下三个页面组件：</p><ol><li><strong>HomePage</strong>（主页）</li><li><strong>AboutPage</strong>（关于页）</li><li><strong>ContactPage</strong>（联系我们）</li></ol><p>我们使用代码分割和懒加载实现按需加载页面组件。</p><hr><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><h4 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1. 项目结构"></a><strong>1. 项目结构</strong></h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">src/  components/    HomePage.tsx    AboutPage.tsx    ContactPage.tsx  App.tsx  index.tsx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="2-各页面组件"><a href="#2-各页面组件" class="headerlink" title="2. 各页面组件"></a><strong>2. 各页面组件</strong></h4><h5 id="HomePage-tsx"><a href="#HomePage-tsx" class="headerlink" title="HomePage.tsx"></a><strong><code>HomePage.tsx</code></strong></h5><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">HomePage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">欢迎来到主页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> HomePage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="AboutPage-tsx"><a href="#AboutPage-tsx" class="headerlink" title="AboutPage.tsx"></a><strong><code>AboutPage.tsx</code></strong></h5><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">AboutPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">这是关于页面</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> AboutPage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ContactPage-tsx"><a href="#ContactPage-tsx" class="headerlink" title="ContactPage.tsx"></a><strong><code>ContactPage.tsx</code></strong></h5><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">ContactPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">联系我们页面</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ContactPage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="3-主应用组件-App-tsx"><a href="#3-主应用组件-App-tsx" class="headerlink" title="3. 主应用组件 App.tsx"></a><strong>3. 主应用组件</strong> <strong><code>App.tsx</code></strong></h4><p>在 <code>App.tsx</code> 中使用 <strong><code>React.lazy</code></strong> 和 <strong><code>Suspense</code></strong> 来实现代码分割和懒加载。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense<span class="token punctuation">,</span> lazy<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment">// 动态加载组件</span><span class="token keyword">const</span> HomePage <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/HomePage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> AboutPage <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/AboutPage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ContactPage <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/ContactPage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>currentPage<span class="token punctuation">,</span> setCurrentPage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据当前页面选择显示的组件</span>  <span class="token keyword">const</span> <span class="token function-variable function">renderPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">"home"</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HomePage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"about"</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AboutPage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"contact"</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ContactPage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HomePage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCurrentPage</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">主页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCurrentPage</span><span class="token punctuation">(</span><span class="token string">"about"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">关于</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCurrentPage</span><span class="token punctuation">(</span><span class="token string">"contact"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">联系我们</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* Suspense 包裹懒加载的组件，设置加载中的 fallback */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">加载中...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token function">renderPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="关键点解释"><a href="#关键点解释" class="headerlink" title="关键点解释"></a><strong>关键点解释</strong></h3><ol><li><strong><code>React.lazy</code></strong> <strong>：</strong><ul><li>用于动态加载组件。</li><li>调用时返回一个 <code>Promise</code>，加载完成后返回组件。</li></ul></li></ol><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> HomePage <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/HomePage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><strong><code>Suspense</code></strong> <strong>：</strong><ul><li>用于包裹懒加载的组件，必须设置一个 <code>fallback</code> 属性，表示加载期间的占位内容。</li></ul></li></ol><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">加载中...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HomePage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>按需加载：</strong><ul><li><code>React.lazy</code> 会在用户真正访问到某个页面时，才加载对应的组件。</li><li>这样可以减少初始加载的 JS 文件体积，从而优化页面首屏加载性能。</li></ul></li></ol><hr><h3 id="验证效果"><a href="#验证效果" class="headerlink" title="验证效果"></a><strong>验证效果</strong></h3><ol><li><strong>初始加载：</strong><ul><li>打开应用时，只有主框架和当前页面的 JS 文件被加载。</li></ul></li><li><strong>切换页面：</strong><ul><li>当用户点击导航按钮时，React 会按需加载对应页面的组件文件。</li></ul></li><li><strong>性能提升：</strong><ul><li>通过开发者工具可以看到按需加载的 JS 文件大小和加载时机，从而验证性能优化效果。</li></ul></li></ol><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol><li><strong><code>Suspense</code> 的 <code>fallback</code>占位内容：</strong><ul><li>可以设计为用户友好的加载动画或提示，而不是简单的文本。</li></ul></li><li><strong>错误处理：</strong><ul><li>如果懒加载的组件加载失败，可以使用 <code>React Error Boundary</code> 捕获错误并显示错误提示。</li></ul></li><li><strong>搭配路由：</strong><ul><li>在实际项目中，通常会与路由库（如 <code>react-router</code>）结合使用，实现页面切换时的动态加载。</li></ul></li></ol><hr><h3 id="扩展示例：与-react-router-配合"><a href="#扩展示例：与-react-router-配合" class="headerlink" title="扩展示例：与 react-router 配合"></a><strong>扩展示例：与 <strong><code>react-router</code></strong> 配合</strong></h3><p>如果你的项目使用 <code>react-router</code>，可以结合 <code>React.lazy</code> 实现路由的代码分割：</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense<span class="token punctuation">,</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Routes<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">const</span> HomePage <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/HomePage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> AboutPage <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/AboutPage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ContactPage <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/ContactPage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">加载中...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HomePage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AboutPage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/contact<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ContactPage</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Router</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上方法，初始加载只包含主框架的代码，页面组件会按需加载，从而进一步优化性能！</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规的React项目(优化三)</title>
      <link href="/LF_blog/interview/no-035.html"/>
      <url>/LF_blog/interview/no-035.html</url>
      
        <content type="html"><![CDATA[<h1 id="合理使用useEffect，避免不必要的副作用"><a href="#合理使用useEffect，避免不必要的副作用" class="headerlink" title="合理使用useEffect，避免不必要的副作用"></a>合理使用useEffect，避免不必要的副作用</h1><blockquote><p>在 React 中，<code>useEffect</code> 是一个常用的钩子，用于处理副作用（例如数据获取、订阅等）。但是，如果 <strong>依赖数组</strong> 配置不当，会导致以下问题：</p><ol><li><strong>副作用重复执行</strong>：依赖数组过大或配置错误时，会触发不必要的副作用。</li><li><strong>副作用未更新</strong>：遗漏依赖项时，副作用无法感知到最新的状态或属性。</li><li><strong>性能问题</strong>：过多的无效副作用调用会浪费性能。</li></ol></blockquote><h3 id="1-未优化代码：依赖数组配置错误"><a href="#1-未优化代码：依赖数组配置错误" class="headerlink" title="1. 未优化代码：依赖数组配置错误"></a>1. <strong>未优化代码：依赖数组配置错误</strong></h3><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"React"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// useEffect 中依赖数组遗漏</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">计数器更新为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 此处未配置依赖数组，导致每次组件渲染时都会执行副作用</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">计数器: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">增加计数</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输入你的名字<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a><strong>问题分析：</strong></h4><ol><li><strong>未配置依赖数组：</strong><ul><li><code>useEffect</code> 在每次组件渲染时都会执行。</li><li>当 <code>name</code> 更新时，尽管与 <code>count</code> 无关，副作用仍会被触发。</li></ul></li><li><strong>性能浪费：</strong><ul><li>无关的副作用被频繁调用，浪费了计算资源。</li></ul></li></ol><hr><h4 id="1-1-优化代码：正确配置依赖数组"><a href="#1-1-优化代码：正确配置依赖数组" class="headerlink" title="1.1 优化代码：正确配置依赖数组"></a>1.1 <strong>优化代码：正确配置依赖数组</strong></h4><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"React"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 仅在 count 变化时执行副作用</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">计数器更新为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 配置依赖数组，只有 count 变化时触发</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">计数器: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">增加计数</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输入你的名字<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化效果："><a href="#优化效果：" class="headerlink" title="优化效果："></a><strong>优化效果：</strong></h4><ul><li>只有当 <code>count</code> 变化时，<code>useEffect</code> 才会执行副作用。</li><li>不再因为 <code>name</code> 的更新触发无意义的副作用。</li></ul><hr><h3 id="2-依赖遗漏问题"><a href="#2-依赖遗漏问题" class="headerlink" title="2. 依赖遗漏问题"></a><strong>2. 依赖遗漏问题</strong></h3><p>如果依赖项遗漏，可能会导致副作用无法感知到最新的状态：</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 副作用中使用了最新的 count，但未声明为依赖项</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">当前计数: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// count 始终是初始值 0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误：遗漏 count 依赖项</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">计数器: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">增加计数</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-修复遗漏依赖的代码"><a href="#2-2-修复遗漏依赖的代码" class="headerlink" title="2.2 修复遗漏依赖的代码"></a>2.2 <strong>修复遗漏依赖的代码</strong></h4><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 添加 count 作为依赖项</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">当前计数: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常输出最新值</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确：count 变化时重新设置定时器</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">计数器: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">增加计数</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Counter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="总结：如何避免不必要的副作用"><a href="#总结：如何避免不必要的副作用" class="headerlink" title="总结：如何避免不必要的副作用"></a><strong>总结：如何避免不必要的副作用</strong></h3><ol><li><strong>总是配置依赖数组：</strong><ul><li>如果副作用依赖某些状态或属性，务必将它们添加到依赖数组中。</li></ul></li><li><strong>空依赖数组：</strong><ul><li>如果副作用只需要在组件挂载和卸载时运行，使用空依赖数组 <code>[]</code>。</li></ul></li></ol><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件挂载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件卸载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅执行一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>注意回调函数闭包问题：</strong><ul><li>在副作用中使用状态时，确保将状态加入依赖数组，避免闭包问题。</li></ul></li><li><strong>避免多余的依赖：</strong><ul><li>使用 <code>useCallback</code> 或 <code>useMemo</code> 缓存依赖，减少依赖数组的大小。</li></ul></li></ol><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 缓存函数</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dependency<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过合理配置依赖数组，可以有效避免不必要的副作用执行，提高应用性能和可靠性！</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规的React项目(优化二)</title>
      <link href="/LF_blog/interview/no-034.html"/>
      <url>/LF_blog/interview/no-034.html</url>
      
        <content type="html"><![CDATA[<h1 id="优化图片和资源加载：使用现代图片格式和懒加载"><a href="#优化图片和资源加载：使用现代图片格式和懒加载" class="headerlink" title="优化图片和资源加载：使用现代图片格式和懒加载"></a>优化图片和资源加载：使用现代图片格式和懒加载</h1><p>提升图片和资源加载性能是前端优化的重要环节，尤其在页面中存在大量图片时。下面是优化的几种方法以及代码示例。</p><h3 id="优化方式"><a href="#优化方式" class="headerlink" title="优化方式"></a><strong>优化方式</strong></h3><ol><li><strong>现代图片格式：</strong><ul><li><strong>WebP</strong>、<strong>AVIF</strong> 是现代图片格式，具有更高的压缩率和更小的文件大小，且不损失明显质量。</li><li>浏览器兼容性良好（Can I use WebP?）。</li></ul></li><li><strong>图像懒加载：</strong><ul><li>使用 <code>loading="lazy"</code> 属性让图片在进入视口（viewport）时才加载，减少初始加载时间。</li></ul></li><li><strong>响应式图片：</strong><ul><li>使用 <code>srcset</code> 和 <code>sizes</code> 属性加载适合屏幕尺寸的图片。</li></ul></li><li><strong>CDN 服务：</strong><ul><li>利用 CDN 提供图片压缩、格式转换和分发。</li></ul></li></ol><hr><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a><strong>代码示例</strong></h3><h4 id="1-简单示例：使用现代图片格式和懒加载"><a href="#1-简单示例：使用现代图片格式和懒加载" class="headerlink" title="1. 简单示例：使用现代图片格式和懒加载"></a><strong>1. 简单示例：使用现代图片格式和懒加载</strong></h4><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">ImageGallery</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">图片库</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.webp<span class="token punctuation">"</span></span>        <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>示例图片<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span>        <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span>        <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span> <span class="token comment">// 懒加载属性</span>        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example2.webp<span class="token punctuation">"</span></span>        <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>示例图片2<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span>        <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span>        <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ImageGallery<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="2-响应式图片示例"><a href="#2-响应式图片示例" class="headerlink" title="2. 响应式图片示例"></a><strong>2. 响应式图片示例</strong></h4><p>通过 <code>srcset</code> 和 <code>sizes</code> 提供不同尺寸的图片，适应不同屏幕。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">ResponsiveImage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">响应式图片</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example-small.webp<span class="token punctuation">"</span></span> <span class="token comment">// 默认图片</span>        <span class="token attr-name">srcSet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        example-small.webp 600w,         example-medium.webp 1200w,         example-large.webp 2000w<span class="token punctuation">"</span></span>        <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(max-width: 600px) 600px,         (max-width: 1200px) 1200px,         2000px<span class="token punctuation">"</span></span> <span class="token comment">// 根据屏幕宽度加载不同尺寸的图片</span>        <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>响应式示例图片<span class="token punctuation">"</span></span>        <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ResponsiveImage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="3-配合图片占位符的懒加载"><a href="#3-配合图片占位符的懒加载" class="headerlink" title="3. 配合图片占位符的懒加载"></a><strong>3. 配合图片占位符的懒加载</strong></h4><p>在图片加载完成前，使用低质量图片或背景色作为占位符，提升用户体验。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">LazyImage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> src<span class="token punctuation">,</span> alt <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> alt<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isLoaded<span class="token punctuation">,</span> setIsLoaded<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        width<span class="token operator">:</span> <span class="token string">"600px"</span><span class="token punctuation">,</span>        height<span class="token operator">:</span> <span class="token string">"400px"</span><span class="token punctuation">,</span>        backgroundColor<span class="token operator">:</span> <span class="token string">"#f0f0f0"</span><span class="token punctuation">,</span> <span class="token comment">// 占位背景</span>        position<span class="token operator">:</span> <span class="token string">"relative"</span><span class="token punctuation">,</span>        overflow<span class="token operator">:</span> <span class="token string">"hidden"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>      <span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token operator">!</span>isLoaded <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>            position<span class="token operator">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>            width<span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>            height<span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>            display<span class="token operator">:</span> <span class="token string">"flex"</span><span class="token punctuation">,</span>            justifyContent<span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>            alignItems<span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span></span>          <span class="token punctuation">&gt;</span></span><span class="token plain-text">          加载中...        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>        <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>src<span class="token punctuation">}</span></span>        <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>alt<span class="token punctuation">}</span></span>        <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span>        <span class="token attr-name">onLoad</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setIsLoaded</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token comment">// 图片加载完成时更新状态</span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>          display<span class="token operator">:</span> isLoaded <span class="token operator">?</span> <span class="token string">"block"</span> <span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>          width<span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>          height<span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>        <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">懒加载图片示例</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LazyImage</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.webp<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>示例图片<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="4-使用第三方库（如-react-lazyload）"><a href="#4-使用第三方库（如-react-lazyload）" class="headerlink" title="4. 使用第三方库（如 react-lazyload）"></a><strong>4. 使用第三方库（如 <strong><code>react-lazyload</code></strong>）</strong></h4><p>当需要懒加载大量图片时，可以借助第三方库，比如 <code>react-lazyload</code>：</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> LazyLoad <span class="token keyword">from</span> <span class="token string">"react-lazyload"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">ImageGallery</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">使用 react-lazyload 懒加载</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LazyLoad</span></span> <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">400</span><span class="token punctuation">}</span></span> <span class="token attr-name">offset</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">}</span></span> <span class="token attr-name">placeholder</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">加载中...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example1.webp<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LazyLoad</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LazyLoad</span></span> <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">400</span><span class="token punctuation">}</span></span> <span class="token attr-name">offset</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">}</span></span> <span class="token attr-name">placeholder</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">加载中...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example2.webp<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片2<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LazyLoad</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ImageGallery<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="实际应用中的步骤"><a href="#实际应用中的步骤" class="headerlink" title="实际应用中的步骤"></a><strong>实际应用中的步骤</strong></h3><ol><li><strong>图片格式转换：</strong><ul><li>使用工具（如 <code>ImageMagick</code>、<code>Sharp</code> 或在线工具）将图片转换为 WebP 格式。</li></ul></li><li><strong>图片压缩：</strong><ul><li>使用 <code>tinypng.com</code> 或类似工具压缩图片。</li></ul></li><li><strong>使用 CDN：</strong><ul><li>利用 CDN（如 Cloudflare Images 或阿里云 OSS）处理图片的格式转换和优化。</li></ul></li><li><strong>加载动画：</strong><ul><li>使用简单的 CSS 动画或骨架屏提升加载体验。</li></ul></li><li><strong>渐进式图片加载：</strong><ul><li>利用低分辨率图片作为占位符，并逐步加载高清图片。</li></ul></li></ol><hr><h3 id="性能提升效果"><a href="#性能提升效果" class="headerlink" title="性能提升效果"></a><strong>性能提升效果</strong></h3><ul><li>使用 WebP 格式可以显著减少图片体积（减少 20%-30%）。</li><li>懒加载图片减少了初始加载体积（只加载首屏图片）。</li><li>响应式图片根据屏幕尺寸加载适配大小，避免加载过大的图片。</li></ul><p>通过这些优化措施，可以有效提高页面加载性能和用户体验！</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常规的React项目(优化一)</title>
      <link href="/LF_blog/interview/no-033.html"/>
      <url>/LF_blog/interview/no-033.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在优化 React 应用时，有许多具体的细节可以关注，以提升性能、可维护性和用户体验。以下是一些关键的优化细节</p></blockquote><h3 id="1-使用React-memo"><a href="#1-使用React-memo" class="headerlink" title="1. 使用React.memo"></a>1. 使用React.memo</h3><p>对于纯组件（Pure Components），使用 React.memo 包装 防止不必要的重复渲染</p><p>示例：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> myComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-useCallback-和-useMemo"><a href="#2-使用-useCallback-和-useMemo" class="headerlink" title="2. 使用 useCallback 和 useMemo"></a>2. 使用 useCallback 和 useMemo</h3><p> useCallback 用于缓存函数引用，避免子组件因为传入函数变化而重渲染。</p><p> useMemo用于缓存计算结果，避免每次渲染时都重新计算。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> memovizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-拆分组件"><a href="#3-拆分组件" class="headerlink" title="3. 拆分组件"></a>3. 拆分组件</h3><p>将大组件拆分更小的可复用组件，提高代码可读性和性能（通过减少必要的重渲染）</p><blockquote><p>场景说明：<br>一个简单的任务列表组件，允许用户添加任务和展示任务。如果任务列表和输入框逻辑都写在一个组件中，代码会显得臃肿，且每次状态更新时，整个组件都会重新渲染。通过拆分组件，我们可以优化其性能和结构。</p></blockquote><h4 id="3-1-未优化的代码（未拆分的大组件）"><a href="#3-1-未优化的代码（未拆分的大组件）" class="headerlink" title="3.1 未优化的代码（未拆分的大组件）"></a>3.1 未优化的代码（未拆分的大组件）</h4><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">TaskApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>tasks<span class="token punctuation">,</span> setTasks<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>newTask<span class="token punctuation">,</span> setNewTask<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">addTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newTask<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTasks</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>tasks<span class="token punctuation">,</span> newTask<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setNewTask</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">任务列表</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>newTask<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setNewTask</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>addTask<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">添加任务</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token punctuation">{</span>tasks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>task<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> TaskApp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题：</strong></p><ol><li>所有逻辑都集中在一个组件中，可读性和维护性差。</li><li>添加任务时，整个组件重新渲染，包括任务列表。</li></ol><h4 id="3-2优化后的代码（拆分组件）"><a href="#3-2优化后的代码（拆分组件）" class="headerlink" title="3.2优化后的代码（拆分组件）"></a>3.2优化后的代码（拆分组件）</h4><p><strong>优化结构，拆分为更小的组件</strong></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment">// 子组件：任务输入框</span><span class="token keyword">const</span> TaskInput <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> onAddTask <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">onAddTask</span><span class="token operator">:</span> <span class="token punctuation">(</span>task<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>inputValue<span class="token punctuation">,</span> setInputValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleAddTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">onAddTask</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setInputValue</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"TaskInput 渲染"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputValue<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setInputValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleAddTask<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">添加任务</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 子组件：任务列表</span><span class="token keyword">const</span> TaskList <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> tasks <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> tasks<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"TaskList 渲染"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>tasks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>task<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 主组件：任务应用</span><span class="token keyword">const</span> <span class="token function-variable function">TaskApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>tasks<span class="token punctuation">,</span> setTasks<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用 useCallback 优化回调函数，避免每次创建新函数</span>  <span class="token keyword">const</span> addTask <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>task<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setTasks</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevTasks<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>prevTasks<span class="token punctuation">,</span> task<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 依赖为空数组，表示回调函数不会因外部状态变化而重新创建</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">任务列表</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TaskInput</span></span> <span class="token attr-name">onAddTask</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>addTask<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TaskList</span></span> <span class="token attr-name">tasks</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>tasks<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> TaskApp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化后的特点</strong></p><p><strong>组件拆分：</strong></p><p><code>TaskInput</code>：负责处理用户输入和任务添加。</p><p><code>TaskList</code>：负责展示任务列表。</p><p>这样每个组件职责单一，易于维护和测试。</p><p><strong>性能优化：</strong></p><p>使用 React.memo 防止子组件在不必要的情况下重新渲染。</p><p>使用 useCallback 保证传递给子组件的 <code>onAddTask</code> 回调函数不会每次重新创建，减少子组件渲染。</p><p><strong>减少重渲染：</strong></p><p>添加任务时，仅 <code>TaskList</code> 和 <code>TaskInput</code> 中必要的部分会更新，而不会重新渲染整个组件树。</p><h3 id="4-避免匿名函数和对象"><a href="#4-避免匿名函数和对象" class="headerlink" title="4. 避免匿名函数和对象"></a>4. 避免匿名函数和对象</h3><p>在 JSX 中避免使用匿名函数和对象，因为每次渲染都会创建新的实例。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 不推荐</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">// 推荐</span><span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 逻辑处理</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>场景说明：<br>在 React 中，<strong>JSX 中使用匿名函数或对象</strong>会导致性能问题，因为每次组件渲染时，匿名函数或对象会被重新创建，导致传递给子组件的属性（props）总是新实例，从而触发子组件的重渲染，即使它的 props 内容没有变化。</p></blockquote><h4 id="4-1-未优化代码：在-JSX-中使用匿名函数和对象"><a href="#4-1-未优化代码：在-JSX-中使用匿名函数和对象" class="headerlink" title="4.1 未优化代码：在 JSX 中使用匿名函数和对象"></a>4.1 未优化代码：在 JSX 中使用匿名函数和对象</h4><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">ChildComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> onClick<span class="token punctuation">,</span> style <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> style<span class="token operator">:</span> React<span class="token punctuation">.</span>CSSProperties <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ChildComponent 渲染"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      点击我    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">ParentComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">计数器：</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token comment">// 每次渲染都创建新的函数实例</span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> fontSize<span class="token operator">:</span> <span class="token string">"16px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token comment">// 每次渲染都创建新的对象实例</span>      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ParentComponent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h5><ol><li><strong>匿名函数</strong>：<ul><li><code>onClick={() =&gt; setCount(count + 1)}</code> 是一个新的函数实例，每次 <code>ParentComponent</code> 渲染时都会重新创建。</li><li>即使子组件内部逻辑和行为没有变化，React 仍然会认为 <code>onClick</code> 是新的，导致 <code>ChildComponent</code> 重渲染。</li></ul></li><li><strong>对象实例</strong>：<ul><li><code>style={{ color: "blue", fontSize: "16px" }}</code> 是一个新的对象，每次渲染都会重新创建一个新对象。</li><li>即使样式未变化，<code>ChildComponent</code> 也会重新渲染。</li></ul></li></ol><h4 id="4-2-优化代码：避免在-JSX-中使用匿名函数和对象"><a href="#4-2-优化代码：避免在-JSX-中使用匿名函数和对象" class="headerlink" title="4.2 优化代码：避免在 JSX 中使用匿名函数和对象"></a>4.2 优化代码：避免在 JSX 中使用匿名函数和对象</h4><p>使用 <code>useCallback</code> 和 <code>useMemo</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useCallback<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">ChildComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> onClick<span class="token punctuation">,</span> style <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> style<span class="token operator">:</span> React<span class="token punctuation">.</span>CSSProperties <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ChildComponent 渲染"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      点击我    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">ParentComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用 useCallback 记住函数实例</span>  <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevCount<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prevCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用 useMemo 记住对象实例</span>  <span class="token keyword">const</span> buttonStyle <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> fontSize<span class="token operator">:</span> <span class="token string">"16px"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">计数器：</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>buttonStyle<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ParentComponent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优化后的效果"><a href="#优化后的效果" class="headerlink" title="优化后的效果"></a>优化后的效果</h5><blockquote><ol><li><strong>使用 <strong><code>useCallback</code></strong>：</strong><ul><li><code>handleClick</code> 是固定的函数实例，不会因 <code>ParentComponent</code> 的重新渲染而变化。</li><li>React 的 <code>memo</code> 会根据 <code>onClick</code> 的引用判断是否需要重新渲染 <code>ChildComponent</code>。</li></ul></li><li><strong>使用 <strong><code>useMemo</code></strong>：</strong><ul><li><code>buttonStyle</code> 是固定的对象实例，避免了每次重新渲染时创建新对象。</li><li>React 的 <code>memo</code> 会根据 <code>style</code> 的引用判断是否需要重新渲染 <code>ChildComponent</code>。</li></ul></li><li><strong>性能提升：</strong><ul><li>控制台中可以看到，只有在 <code>count</code> 更新时 <code>ChildComponent</code> 的 <code>onClick</code> 或 <code>style</code> 改变时，才会触发重新渲染。</li></ul></li></ol></blockquote><h3 id="5-代码分割和懒加载"><a href="#5-代码分割和懒加载" class="headerlink" title="5. 代码分割和懒加载"></a>5. 代码分割和懒加载</h3><p>通过 <strong><code>React.lazy</code></strong> 和 <strong><code>Suspense</code></strong> 实现动态加载组件，可以有效减少初始加载时间，提高页面的首屏性能。代码分割的核心思想是将大文件拆分为多个小文件，按需加载，从而避免一次性加载过多内容。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./OtherComponent'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">MyComponent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OtherComponent</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">OtherComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的场景 看这个说明：<a href="https://yunfulin.github.io/LF_blog/interview/no-036.html">常规的React项目(优化四)</a></p><h3 id="6-避免不必要的副作用"><a href="#6-避免不必要的副作用" class="headerlink" title="6. 避免不必要的副作用"></a>6. 避免不必要的副作用</h3><p>确保 useEffect 中的依赖数组正确配置，避免不必要的副作用执行。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 副作用逻辑</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>deps<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>具体的场景 看这个例子： <a href="https://yunfulin.github.io/LF_blog/interview/no-035.html">常规的React项目(优化三)</a></p><h3 id="7-提升图片和资源加载"><a href="#7-提升图片和资源加载" class="headerlink" title="7. 提升图片和资源加载"></a>7. 提升图片和资源加载</h3><p>使用现代图片格式（如 WebP）和图像懒加载技术（如 loading=”lazy”）</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image.webp<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-网络请求优化"><a href="#8-网络请求优化" class="headerlink" title="8. 网络请求优化"></a>8. 网络请求优化</h3><p>合理使用缓存，避免重复请求</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 通过缓存机制，存储已经发出的请求结果，如果同样的请求再次发起，</span><span class="token comment">// 直接从缓存中获取数据，而不是重新发请求。</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token comment">// 缓存对象</span><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 封装带缓存的请求函数</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">axiosWithCache</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">从缓存中获取数据: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">发送网络请求: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将结果存入缓存</span>  cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 使用示例</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"https://jsonplaceholder.typicode.com/todos/1"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axiosWithCache</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次请求</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axiosWithCache</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从缓存获取</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 abortController 取消不再需要的请求。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 当用户离开页面或切换视图时，取消掉未完成的请求以节省资源。</span><span class="token comment">// 封装请求函数，支持 AbortController</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token comment">// 封装带取消功能的请求函数</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">axiosWithAbort</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> controller<span class="token operator">:</span> AbortController<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>      signal<span class="token operator">:</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">,</span> <span class="token comment">// 绑定 AbortController 的 signal</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">请求已取消: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 使用示例</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"https://jsonplaceholder.typicode.com/todos/1"</span><span class="token punctuation">;</span>  <span class="token comment">// 模拟请求</span>  <span class="token keyword">const</span> fetchPromise <span class="token operator">=</span> <span class="token function">axiosWithAbort</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> controller<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 模拟用户取消请求</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消请求</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> fetchPromise<span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求未完成，已被取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-优化-CSS-和样式"><a href="#9-优化-CSS-和样式" class="headerlink" title="9. 优化 CSS 和样式"></a>9. 优化 CSS 和样式</h3><p>使用 CSS-in-JS 库（如 styled-components 或 Emotion）提高样式管理的灵活性和性能。</p><p>避免全局样式污染，使用模块化样式。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一封装和监听用户的网络状态</title>
      <link href="/LF_blog/notes/no-032.html"/>
      <url>/LF_blog/notes/no-032.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>场景1： 移动端项目，有大量的图片需要访问，在4g或者wifi的网络状态下做不同的优化<br><br>场景2：在后台系统访问，有时候会遇到断网或者网络不好得时候，所以这里需求是在请求发送之前判断网络环境，如果断网给出提示，弱网超过一定时间提示请求超时<br><br><font style="color:#DF2A3F;">在面对弱网环境下如果我们能检测到用户的网络状态的话，依据网络形态给用户下发不同分辨率的图片资源，尽可能在有限的条件下给用户最好的用户体验和加载速度。</font></p></blockquote><h3 id="统一封装网络状态监控函数"><a href="#统一封装网络状态监控函数" class="headerlink" title="统一封装网络状态监控函数"></a>统一封装网络状态监控函数</h3><img src="/LF_blog/notes/no-032/1.png" class=""><blockquote><p>downlink: 当前网络连接的估计下行速度（单位为 Mbps）<br>downlinkMax: 设备网络连接最大可能下行速度（单位为 Mbps）<br>effectiveType: 当前网络连接的估计速度类型（如 slow-2g、2g、3g、4g 等）<br>rtt: 当前网络连接的估计往返时间（单位为毫秒），表示设备当前的往返延迟时间（Round-Trip Time），以毫秒为单位。它是从设备发送数据到服务器并返回的时间。<br>saveData: 是否处于数据节省模式，表示用户设备当前是否处于节省数据模式。可能的取值为 <code>true</code>（用户启用了节省数据模式）或 <code>false</code>（用户未启用节省数据模式）</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getNetWorkInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> info<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>onLine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        info <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">"online"</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>effectiveType<span class="token punctuation">,</span>            <span class="token literal-property property">rtt</span><span class="token operator">:</span> navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>rtt<span class="token punctuation">,</span>            <span class="token literal-property property">downlink</span><span class="token operator">:</span> navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>downlink<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        info <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">"offline"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"online"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">getNetWorkInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"offline"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">getNetWorkInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">getNetWorkInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在请求封装的函数前先判断网络情况"><a href="#在请求封装的函数前先判断网络情况" class="headerlink" title="在请求封装的函数前先判断网络情况"></a><font style="color:rgb(79, 79, 79);">在请求封装的函数前先判断网络情况</font></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * post方法,对应post请求 * @param {String} url [请求的url地址] * @param {Object} params [请求时携带的参数] */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> isLoading <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 在发送请求之前判断网络状态</span>  <span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">checkConnectionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> loadingInstance <span class="token operator">=</span> Loading<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">lock</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">"加载中..."</span><span class="token punctuation">,</span>      <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">"rgba(255, 255, 255, 0.3)"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    Axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token constant">QS</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadingInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            loadingInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadingInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            loadingInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/LF_blog/notes/no-032/2.png" class="">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx转发解决前后端分离项目跨域请求</title>
      <link href="/LF_blog/nginx/no-024.html"/>
      <url>/LF_blog/nginx/no-024.html</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx转发解决前后端分离项目跨域请求"><a href="#Nginx转发解决前后端分离项目跨域请求" class="headerlink" title="Nginx转发解决前后端分离项目跨域请求"></a>Nginx转发解决前后端分离项目跨域请求</h3><p>前端使用 <font color="#4ea1db">vue</font>，后端使用spring boot，前端学习到了发送请求，就测试了一下发送天天基金的接口（接口地址为: <a href="http://fundgz.1234567.com.cn/js/001186.js?rt=1463558676006">http://fundgz.1234567.com.cn/js/001186.js?rt=1463558676006</a>），发现报了个<a href="https://so.csdn.net/so/search?q=%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82&amp;spm=1001.2101.3001.7020">跨域请求</a>的错，如下图</p><img src="/LF_blog/nginx/no-024/1.png" class=""><h3 id="使用nginx反向代理-解决跨域"><a href="#使用nginx反向代理-解决跨域" class="headerlink" title="使用nginx反向代理 解决跨域"></a>使用nginx反向代理 解决跨域</h3><img src="/LF_blog/nginx/no-024/2.png" class=""><blockquote><p>通过nginx来进行转发，nginx的作用相当于是个传话筒，用来做分发转发的作用，如下图，客户端请求服务端，服务端的9000端口被监听，如果nginx做了转发，将服务端的某个请求前缀转发到了不同的前端、后端服务器，那么就可以实现客户端请求同一个端口，但是服务器会响应不同的后台给客户端。</p></blockquote><h4 id="1-nginx官网：nginx"><a href="#1-nginx官网：nginx" class="headerlink" title="1.nginx官网：nginx"></a>1.nginx官网：nginx</h4><p>下载地址：<a href="https://nginx.org/en/download.html">nginx: download</a></p><p>nginx常用命令：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">开启：start nginx关闭：nginx.exe -s quit重启：nginx.exe -s reload  （修改配置文件后需要重启才生效）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置文件："><a href="#2-配置文件：" class="headerlink" title="2.配置文件："></a>2.配置文件：</h4><p>2.1配置监听端口</p><p>我这里监听的是9000</p><img src="/LF_blog/nginx/no-024/3.png" class=""><p>2.2 配置转发地址：</p><p>这个proxy_pass一定要加，默认没有，不加的话访问不了</p><p>参考这个： <a href="https://www.cnblogs.com/BoatGina/p/8409549.html">https://www.cnblogs.com/BoatGina/p/8409549.html</a></p><p>我的自己的配置如下：可参考</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">9000</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>         <span class="token comment">#charset koi8-r;</span>         <span class="token comment">#access_log  logs/host.access.log  main;</span>         <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>            <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">#自己前端的cli</span><span class="token directive"><span class="token keyword">location</span> /potato-cli-market/</span> <span class="token punctuation">{</span><span class="token directive"><span class="token keyword">proxy_pass</span>   http://localhost:8080/potato-cli-market/</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment">#自己后端的web</span><span class="token directive"><span class="token keyword">location</span> /potato-web-market/</span> <span class="token punctuation">{</span><span class="token directive"><span class="token keyword">proxy_pass</span>   http://localhost:8081/potato-web-market/</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment">#请求基金接口</span><span class="token directive"><span class="token keyword">location</span> /fund/</span> <span class="token punctuation">{</span><span class="token directive"><span class="token keyword">proxy_pass</span>    http://fundgz.1234567.com.cn/</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听的地址为localhost和端口为9000;</p><p>请求地址如下：</p><p>localhost:9000/potato-cli-market/mallTypeManage会直接转发到localhost:8080/potato-cli-market/mallTypeManage</p><p>同样如果请求</p><p>localhost:9000/potato-web-market/hello会直接转发到localhost:8081/potato-web-market/hello上</p><p>同样如果请求的接口</p><p>localhost:9000/fund/js/001186.js?rt=1463558676006会直接转发到 <a href="http://fundgz.1234567.com.cn/js/001186.js?rt=1463558676006">http://fundgz.1234567.com.cn/js/001186.js?rt=1463558676006</a></p><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><p>我本地vue启动访问是：</p><img src="/LF_blog/nginx/no-024/4.png" class=""><p>启动nginx后，我访问 <a href="http://localhost:9000/potato-cli-market/mallTypeManage">http://localhost:9000/potato-cli-market/mallTypeManage</a></p><p>就可以访问了：localhost:8080/potato-cli-market/mallTypeManage</p><img src="/LF_blog/nginx/no-024/5.png" class="">]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Webpack插件：在dist文件夹生成一个 git 版本信息的文件</title>
      <link href="/LF_blog/notes/no-023.html"/>
      <url>/LF_blog/notes/no-023.html</url>
      
        <content type="html"><![CDATA[<h2 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h2><blockquote><p>为方便管理每次打包部署到测试环境，具体是哪条分支、什么时间、打包人… 所以手写一个 <code>webpack 插件</code>：实现打包时生成一个 <code>git</code> 分支版本信息的<code>文件</code></p></blockquote><p>效果图：</p><img src="/LF_blog/notes/no-023/1.png" class=""><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>1、<code>首先获取项目当前所在分支的信息，如：分支名，提交人，时间，提交描述...</code></p><p>2、<code>把这些信息放到 txt 文本里面，在打包的时候添加到打包目录里</code></p><h2 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h2><h3 id="1、在根目录新建一个-webpack-文件夹，在这个文件夹里新建一个-webpack-git-plugin-js-文件"><a href="#1、在根目录新建一个-webpack-文件夹，在这个文件夹里新建一个-webpack-git-plugin-js-文件" class="headerlink" title="1、在根目录新建一个 webpack 文件夹，在这个文件夹里新建一个 webpack.git.plugin.js 文件"></a>1、在根目录新建一个 webpack 文件夹，在这个文件夹里新建一个 <code>webpack.git.plugin.js</code> 文件</h3><img src="/LF_blog/notes/no-023/2.png" class=""><blockquote><p>利用 node 的 api，<code>child_process</code> 同步子进程获取分支信息：<a href="https://nodejs.cn/api/child_process.html">https://nodejs.cn/api/child_process.html</a></p></blockquote><h3 id="2、webpack-git-plugin-js-代码如下："><a href="#2、webpack-git-plugin-js-代码如下：" class="headerlink" title="2、webpack.git.plugin.js  代码如下："></a>2、<code>webpack.git.plugin.js</code>  代码如下：</h3> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 同步子进程</span><span class="token keyword">const</span> execSync <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execSync<span class="token punctuation">;</span><span class="token comment">// 时间格式生成</span><span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> y <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token constant">M</span> <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> d <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> h <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> m <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> s <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">M</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>h<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获取当前git分支信息</span><span class="token keyword">function</span> <span class="token function">getBranchVersionInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 当前分支名</span>  <span class="token keyword">let</span> vName <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'git name-rev --name-only HEAD'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 提交的commit hash</span>  <span class="token keyword">let</span> commitHash <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'git show -s --format=%H'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 提交人姓名</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'git show -s --format=%cn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 提交日期</span>  <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'git show -s --format=%cd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 提交描述</span>  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'git show -s --format=%s'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打包日期</span>  <span class="token keyword">let</span> vDate <span class="token operator">=</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打包人</span>  <span class="token keyword">let</span> packer <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'git config user.name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>packer<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    packer <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'git config --global user.name '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    当前分支名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>vName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    提交的hash：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>commitHash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    提交人姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    提交日期：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    提交描述：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    打包日期：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>vDate<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    打包人：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>packer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 创建分支版本类</span><span class="token keyword">class</span> <span class="token class-name">webpackGitPlugin</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// options 为调用时传的参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'webpackGitPlugin 被调用！'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * compiler: webpack 的实例 所有的内容   * compilation: 本次打包的内容   * */</span>   <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 异步方法，生成打包目录时：生成文件</span>    compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">'emit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 添加分支版本信息文件</span>      <span class="token keyword">let</span> branchVersionInfo <span class="token operator">=</span> <span class="token function">getBranchVersionInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">'version.txt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function-variable function">source</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> branchVersionInfo<span class="token punctuation">,</span>        <span class="token function-variable function">size</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> branchVersionInfo<span class="token punctuation">.</span>length      <span class="token punctuation">}</span>      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackGitPlugin<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、在测试环境、生产环境引入"><a href="#3、在测试环境、生产环境引入" class="headerlink" title="3、在测试环境、生产环境引入"></a>3、在测试环境、生产环境引入</h3><img src="/LF_blog/notes/no-023/3.png" class=""><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> webpackGitPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.git.plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分支版本信息</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 版本信息文件生成</span>    <span class="token keyword">new</span> <span class="token class-name">webpackGitPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h3><p>上面用的是<code>webpack 3.x</code> 的写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建分支版本类</span><span class="token keyword">class</span> <span class="token class-name">webpackGitPlugin</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// options 为调用时传的参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'webpackGitPlugin 被调用！'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * compiler: webpack 的实例 所有的内容   * compilation: 本次打包的内容   * */</span>   <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 异步方法，生成打包目录时：生成文件</span>    compiler<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">'emit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 添加分支版本信息文件</span>      <span class="token keyword">let</span> branchVersionInfo <span class="token operator">=</span> <span class="token function">getBranchVersionInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">'version.txt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function-variable function">source</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> branchVersionInfo<span class="token punctuation">,</span>        <span class="token function-variable function">size</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> branchVersionInfo<span class="token punctuation">.</span>length      <span class="token punctuation">}</span>      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>webpack 4.x</code> 的写法</p><blockquote><p>hooks 使用 emit：输出目录之前执行。 <a href="https://v4.webpack.js.org/api/compiler-hooks/#emit">https://v4.webpack.js.org/api/compiler-hooks/#emit</a></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建分支版本类</span><span class="token keyword">class</span> <span class="token class-name">webpackGitPlugin</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// options 为调用时传的参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'webpackGitPlugin 被调用！'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * compiler: webpack 的实例 所有的内容   * compilation: 本次打包的内容   * */</span>   <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 异步方法，生成打包目录时：生成文件</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">'webpackGitPlugin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 添加分支版本信息文件</span>      <span class="token keyword">let</span> branchVersionInfo <span class="token operator">=</span> <span class="token function">getBranchVersionInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      compilation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">'version.txt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function-variable function">source</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> branchVersionInfo<span class="token punctuation">,</span>        <span class="token function-variable function">size</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> branchVersionInfo<span class="token punctuation">.</span>length      <span class="token punctuation">}</span>      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Element UI动态生成的表单并校验</title>
      <link href="/LF_blog/notes/no-022.html"/>
      <url>/LF_blog/notes/no-022.html</url>
      
        <content type="html"><![CDATA[<p>效果图：</p><img src="/LF_blog/notes/no-022/1.png" class=""><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>form <span class="token operator">:</span>model<span class="token operator">=</span><span class="token string">"Form"</span> ref<span class="token operator">=</span><span class="token string">"Form"</span> label<span class="token operator">-</span>width<span class="token operator">=</span><span class="token string">"100px"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"demo-dynamic"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item    prop<span class="token operator">=</span><span class="token string">"email"</span>    label<span class="token operator">=</span><span class="token string">"邮箱"</span>    <span class="token operator">:</span>rules<span class="token operator">=</span>"<span class="token punctuation">[</span>      <span class="token punctuation">{</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'请输入邮箱地址'</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'email'</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'请输入正确的邮箱地址'</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'blur'</span><span class="token punctuation">,</span> <span class="token string">'change'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>"  <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"Form.email"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item    v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in Form.domains"</span>    <span class="token operator">:</span>label<span class="token operator">=</span><span class="token string">"'域名' + index"</span>    <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.key"</span>    <span class="token operator">:</span>prop<span class="token operator">=</span><span class="token string">"'domains.' + index + '.name'"</span>    <span class="token operator">:</span>rules<span class="token operator">=</span>"<span class="token punctuation">{</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'域名不能为空'</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span>    <span class="token punctuation">}</span>"  <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"item.name"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">&gt;</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button @click<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"removeDomain(item)"</span><span class="token operator">&gt;</span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"submitForm('Form')"</span><span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>button @click<span class="token operator">=</span><span class="token string">"addDomain"</span><span class="token operator">&gt;</span>新增域名<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>button @click<span class="token operator">=</span><span class="token string">"resetForm('Form')"</span><span class="token operator">&gt;</span>重置<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>v-for 循环的数组名 Form.domains，在prop中，需要按照 :prop = 循环对象.下标.子属性，例：:prop="'domains.' + index + '.name'"</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token literal-property property">Form</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">domains</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br>1、<code>v-mode</code>l 和 <code>:model</code> 的区别问题<br><code>v-model:</code> 通常是用于 input 的双向绑定，但是它不会向子组件传递数据<br><code>:model:</code> 表示绑定自定义的属性，它只是将父组件的数据传递给子组件，没有实现父子组件间的数据双向绑定</p><p>2、<code>el-form-item</code>上的<code>prop名称</code>、<code>v-model的子属性</code> 必须和 <code>rules</code>中的名称一致；</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue多个表单校验 (巧用new promise)</title>
      <link href="/LF_blog/notes/no-021.html"/>
      <url>/LF_blog/notes/no-021.html</url>
      
        <content type="html"><![CDATA[<h2 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h2><blockquote><p>同一个页面有多个模块，每个模板又单独使用了一个<code>表单</code>组件，那么我们在点击<code>提交按钮</code>时如何同时校验多个表单，我们可以使用Promise</p></blockquote><img src="/LF_blog/notes/no-021/1.png" class=""><hr><h2 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h2><h3 id="1、子组件"><a href="#1、子组件" class="headerlink" title="1、子组件"></a>1、子组件</h3><p><code>子组件：return 出当前的表单的数据</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> _self<span class="token operator">=</span><span class="token keyword">this</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        _self<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">valid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 检验成功 传当前表单的数据</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">:</span>_self<span class="token punctuation">.</span>form<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'员工自选-清单需求，请按要求填写'</span><span class="token punctuation">)</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、父组件"><a href="#2、父组件" class="headerlink" title="2、父组件"></a>2、父组件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 方案需求 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"active === 2"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>FormEmployeeList ref<span class="token operator">=</span><span class="token string">"Form0"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>FormEmployeeList<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>FormEmployeeGift ref<span class="token operator">=</span><span class="token string">"Form1"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>FormEmployeeGift<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>FormEmployeeCustomization ref<span class="token operator">=</span><span class="token string">"Form2"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>FormEmployeeCustomization<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>FormEnterprisesList ref<span class="token operator">=</span><span class="token string">"Form3"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>FormEnterprisesList<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>FormEnterprisesGift ref<span class="token operator">=</span><span class="token string">"Form4"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>FormEnterprisesGift<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>FormEnterprisesCustomization ref<span class="token operator">=</span><span class="token string">"Form5"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>FormEnterprisesCustomization<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>父组件：onSubmit时，调用子组件的onSubmit方法，接受promise的返回结果，再通过Promise.all()方法一一验证</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span>  newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//承接promise的返回结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> v <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'Form'</span> <span class="token operator">+</span> v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//都通过了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>        <span class="token comment">//res是数组，需转对象</span>        <span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span>res<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> obj        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大功告成'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue实现数据的上移和下移</title>
      <link href="/LF_blog/notes/no-020.html"/>
      <url>/LF_blog/notes/no-020.html</url>
      
        <content type="html"><![CDATA[<h2 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h2><p>点击<code>上移</code>或<code>下移</code>按钮进行列表移动，<code>第一行</code>则<code>不能上移</code>，<code>最后一行</code>则<code>不能下移</code></p><img src="/LF_blog/notes/no-020/1.png" class=""><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>button @click<span class="token operator">=</span><span class="token string">"moveUp(index)"</span><span class="token operator">&gt;</span>上移<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button @click<span class="token operator">=</span><span class="token string">"moveDown(index)"</span><span class="token operator">&gt;</span>下移<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张三'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'李四'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'王五'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 上移</span><span class="token function">moveUp</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 下移</span><span class="token function">moveDown</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="禁用上下移逻辑"><a href="#禁用上下移逻辑" class="headerlink" title="禁用上下移逻辑"></a>禁用上下移逻辑</h2><blockquote><p>禁用上移：<code>:disabled="index === 0"</code>，禁用下移：<code>:disabled="index === list.length - 1"</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配最佳实践</title>
      <link href="/LF_blog/notes/no-019.html"/>
      <url>/LF_blog/notes/no-019.html</url>
      
        <content type="html"><![CDATA[<h1 id="移动端适配最佳实践"><a href="#移动端适配最佳实践" class="headerlink" title="移动端适配最佳实践"></a>移动端适配最佳实践</h1><img src="/LF_blog/notes/no-019/1.png" class=""><h4 id="viewport—-视图、视窗"><a href="#viewport—-视图、视窗" class="headerlink" title="viewport—-视图、视窗"></a>viewport—-视图、视窗</h4><p>移动端设备中，整块显示屏就相当于视图、视窗</p><blockquote><p>在移动端设备中，浏览器视图并不是整个屏幕。因此viewport又被分为了3种layout viewport、visual viewport、ideal viewport</p></blockquote><p><strong>layout viewport：</strong> 大部分浏览器把viewport的宽度设为了980px，这个浏览器默认设置的视图被称为 layout viewport。我们可以使用document.documentElement.clientWidth 来获取</p><p><strong>visual viewport：</strong> layout viewport的宽度是远大于浏览器宽度的，因此我们需要一个新的viewport来代表浏览器的可视区域宽度，这个视图则被成为visual viewport我们可以使用window.innerWidth来获取</p><p><strong>ideal viewport：</strong> 现在越来越多的网站都会为移动设备进行单独的设计，所以必须还要有一个能完美适配移动设备的ideal viewport</p><h4 id="viewport的单位vw、vh"><a href="#viewport的单位vw、vh" class="headerlink" title="viewport的单位vw、vh"></a>viewport的单位vw、vh</h4><p>vw、vh将viewport分成了一百份。vw即 viewport width，vh即viewport height</p><blockquote><p>1vw等于视图单位的1%的宽度<br>1vh等于视图单位的1%的高度<br>如果设计稿的视图为375px 那么1vw 等于 3.75px</p></blockquote><p>要使用viewport适配，我们必须安装postcss-px-to-viewport这个包。这包和postcss-pxtorem类似。</p><p>不仅名字相似，功能也有相似的地方</p><p>postcss-pxtorem是将 px单位转换为rem单位。</p><p>postcss-px-to-viewport则是将px单位转换为vw、vh</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">//引入 postcss-px-to-viewportpnpm i postcss-px-to-viewport --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成后，我们需要进行postcss插件相关的配置，在根目录新建一个名为postcss.config.js的文件，如果项目中已包含该文件则无需新建。在文件中写入如下代码:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//postcss.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">'postcss-px-to-viewport'</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">unitToConvert</span><span class="token operator">:</span> <span class="token string">"px"</span><span class="token punctuation">,</span> <span class="token comment">// 要转化的单位       </span>      <span class="token literal-property property">viewportWidth</span><span class="token operator">:</span> <span class="token number">375</span><span class="token punctuation">,</span> <span class="token comment">// UI设计稿的宽度       </span>      <span class="token literal-property property">unitPrecision</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// 转换后的精度，即小数点位数       </span>      <span class="token literal-property property">propList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换     </span>      <span class="token literal-property property">viewportUnit</span><span class="token operator">:</span> <span class="token string">"vw"</span><span class="token punctuation">,</span> <span class="token comment">// 指定需要转换成的视窗单位，默认vw       </span>      <span class="token literal-property property">fontViewportUnit</span><span class="token operator">:</span> <span class="token string">"vw"</span><span class="token punctuation">,</span> <span class="token comment">// 指定字体需要转换成的视窗单位，默认vw      selectorBlackList: ["wrap"], // 指定不转换为视窗单位的类名，       </span>      <span class="token literal-property property">minPixelValue</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 默认值1，小于或等于1px则不进行转换       </span>      <span class="token literal-property property">mediaQuery</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否在媒体查询的css代码中也进行转换，默认false      </span>      <span class="token literal-property property">replace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否转换后直接更换属性值       </span>      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 设置忽略文件，用正则做目录名匹配       </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意: <font color="red"> postcss-px-to-viewport </font> 同样存在第三方组件库兼容性的问题。比如在设计稿为750px时，使用vant组件库会将vant组件的样式缩小。</strong></p></blockquote><p>vant组件库的设计稿是按照375px来开发的。因此在<font color="red"> viewportWidth </font>为<font color="red"> 750px </font>时会出现转换问题</p><p>下面是webapck的配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// postcss.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> webpack <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> viewWidth <span class="token operator">=</span> webpack<span class="token punctuation">.</span>resourcePath<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'node_modules'</span><span class="token punctuation">,</span> <span class="token string">'vant'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">375</span> <span class="token operator">:</span> <span class="token number">750</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string-property property">"postcss-px-to-viewport"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">unitToConvert</span><span class="token operator">:</span> <span class="token string">"px"</span><span class="token punctuation">,</span>        <span class="token literal-property property">viewportWidth</span><span class="token operator">:</span> viewWidth<span class="token punctuation">,</span>        <span class="token literal-property property">unitPrecision</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>        <span class="token literal-property property">propList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">viewportUnit</span><span class="token operator">:</span> <span class="token string">"vw"</span><span class="token punctuation">,</span>        <span class="token literal-property property">fontViewportUnit</span><span class="token operator">:</span> <span class="token string">"vw"</span><span class="token punctuation">,</span>        <span class="token literal-property property">selectorBlackList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">minPixelValue</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">mediaQuery</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">landscape</span><span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>读取 node_modules 中的文件是 vant，那么就将设计稿变为375px。如果读取的文件不是vant的文件,那么就将设计稿变为750px。这样就可以避免vant组件在750px下出现样式缩小的问题了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> postcss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>a标签下载附件，无法下载、无法重命名？怎么回事</title>
      <link href="/LF_blog/notes/no-010.html"/>
      <url>/LF_blog/notes/no-010.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、-为什么a标签无法下载，无法重命名？"><a href="#一、-为什么a标签无法下载，无法重命名？" class="headerlink" title="一、 为什么a标签无法下载，无法重命名？"></a>一、 为什么a标签无法下载，无法重命名？</h2><p>这就与<font color="red"> a </font>标签的<font color="red"> href </font>有很大的关系，<font color="red"> href </font>属性的地址必须是 <font color="red">同源 URL</font>，否则，<font color="red">download </font>就会不起作用。</p><ol><li><strong>同源 URL</strong> 会进行 <font color="red">下载</font> 操作</li><li><strong>非同源 URL</strong> 会进行 <font color="red">导航</font> 操作</li><li><strong>非同源的资源</strong> 仍需要进行下载，那么可以将其转换为 <strong><code>blob: URL</code></strong> 形式</li></ol><h2 id="二、a-标签属性介绍"><a href="#二、a-标签属性介绍" class="headerlink" title="二、a 标签属性介绍"></a>二、a 标签属性介绍</h2><p><font color="red">&lt;a&gt;</font> 的 <font color="red">download </font> 属性是HTML5新增的属性，它可以使 a 标签的  <font color="red">href</font> 属性进行下载，<font color="red">download </font>属性为下载后的 <font color="red">文件名</font>，但是：</p><ol><li>这个值可能会通过 <font color="red">JavaScript</font> 进行动态修改</li><li>或者 <font color="red">Content-Disposition</font> 中指定的 <font color="red">download</font> 属性优先级高于 <font color="red">a.download</font></li></ol><h2 id="三、下载方法"><a href="#三、下载方法" class="headerlink" title="三、下载方法"></a>三、下载方法</h2><p><strong>注意：以下3种方式，是对文件的 <font color="red">链接地址</font> 所写的方案（例：<a href="http://127.0.0.1:3000/1.jpg%EF%BC%89">http://127.0.0.1:3000/1.jpg）</a></strong></p><p>*[HTML]:   超文本标记语言</p><h5 id="1、同源URL"><a href="#1、同源URL" class="headerlink" title="1、同源URL"></a>1、同源URL</h5><ol><li>静态方式</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://127.0.0.1:3000/1.jpg"</span> download<span class="token operator">=</span><span class="token string">"1.jpg"</span><span class="token operator">&gt;</span>下载<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>动态方式</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">aTagDownload</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 a 标签</span>  a<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span> <span class="token comment">// 下载路径</span>  a<span class="token punctuation">.</span>download <span class="token operator">=</span> filename<span class="token punctuation">;</span>  <span class="token comment">// 下载属性，文件名</span>  a<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span> <span class="token comment">// 不可见</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 挂载</span>  a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发点击事件</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移除</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、非同源URL"><a href="#2、非同源URL" class="headerlink" title="2、非同源URL"></a>2、非同源URL</h5><ol><li>Blob 方式</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">download</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> fileName<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileName<span class="token punctuation">)</span> fileName <span class="token operator">=</span> <span class="token string">'123.jpg'</span>  <span class="token function">fetch</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span>     res<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> objectUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 url 对象</span>    <span class="token function">aTagDownload</span><span class="token punctuation">(</span>objectUrl<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 上面 [2] 动态方式</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request Failed'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、接口返回文件流（例：Excel、word、PDF文件）"><a href="#四、接口返回文件流（例：Excel、word、PDF文件）" class="headerlink" title="四、接口返回文件流（例：Excel、word、PDF文件）"></a>四、接口返回文件流（例：Excel、word、PDF文件）</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// excelExport后台接口</span><span class="token comment">// 请求接口时需要增加 responseType: `blob`，不然下载的文件内容会乱码</span><span class="token function">excelExport</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">excelDownload</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 调用下载方法  res 二进制流</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">excelDownload</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fileReader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//对于blob文件流进行转换，拿到接口返回的状态码以及提示语</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> jsonData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 403：禁止访问</span>        <span class="token function">logOut</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logOut 退出登录</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  fileReader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">// 这个window.fileName我是在接口响应处获取的</span>  <span class="token comment">// window.fileName = response.headers['content-disposition'] &amp;&amp; response.headers['content-disposition'].split(`filename=`)[1];</span>  <span class="token keyword">const</span> fileName <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">decodeURI</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> suffix <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 文件类型</span>  <span class="token keyword">let</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> FileType<span class="token punctuation">[</span>suffix<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 blob 对象</span>  <span class="token keyword">let</span> objectUrl <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 url 对象</span>  <span class="token function">aTagDownload</span><span class="token punctuation">(</span>objectUrl<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span> <span class="token comment">// 调用 上面 [2] 动态方式</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react引入插件报错Error：Minified React error 321</title>
      <link href="/LF_blog/notes/no-009.html"/>
      <url>/LF_blog/notes/no-009.html</url>
      
        <content type="html"><![CDATA[<p>我在react16.8之前不支持hook的项目上，引入拖拽插件报错#321,提示Error: Minified React error #321，react官方(<a href="https://reactjs.org/warnings/invalid-hook-call-warning.html">https://reactjs.org/warnings/invalid-hook-call-warning.html</a>)提示导致可能这个错误的原因如下：</p><img src="/LF_blog/notes/no-009/1.png" class=""><h4 id="1、在package-json文件中我的react版本是"><a href="#1、在package-json文件中我的react版本是" class="headerlink" title="1、在package.json文件中我的react版本是"></a>1、在package.json文件中我的react版本是</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"react"</span><span class="token operator">:</span> <span class="token string">"^16.5.2"</span><span class="token punctuation">,</span><span class="token string-property property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^16.5.2"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>普及一下package.json文件中，^ 和 ~ 的区别：</p><p><font color="red"> ^ </font>：它将当前库的版本更新到第一个数字（major version)中的最新版本，比如：<font color="red"> “^16.5.2” </font>，库会匹配更新到<font color="red"> 16.X.X </font>的最新版本(也就是16.14.0)，但是不会更新到17.X.X版本</p><p><font color="red"> ~ </font>：当下载的时候，它会自动更新到中间那个数字（minor version）的最新版本，比如：“~4.2.0”，库就会更新到 4.2.X 的最新版本，但是不会更新到4.3.X版本，波浪符号是曾经 npm 安装时候的默认符号，现在已经变为了插入符号</p><p>在 node_modules 中 <font color="red"> react </font>和 <font color="red"> react-dom </font> 可以看到他的版本已经升级到了 16.14.0😮，也就是说他是支持hook的</p><h4 id="2、逐个排查"><a href="#2、逐个排查" class="headerlink" title="2、逐个排查"></a>2、逐个排查</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">确定 react 和 react<span class="token operator">-</span>dom 是相同版本，<span class="token number">16.14</span><span class="token number">.0</span>，支持hooks语法确定自己的代码没有违背hooks的使用准则项目中引入了不止一个react实例？？？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>很快定位到是第三个原因，那就说明应该是打包的配置文件有问题，我这边用的是webpack配置，而且是用了 dll 抽离打包，在 webpack.dll.config.js 这个预打包文件</p><img src="/LF_blog/notes/no-009/2.png" class=""><p>react-redux 是依赖 react 的，放到redux这个入口，打包会产生两个react实例，解决办法很简单，移动到 vendor 的入口，再打包就不会出现这个问题了</p><h4 id="3、那我们怎么知道-react-redux-是依赖-react-的，而-redux-router-redux-却没有依赖react呢"><a href="#3、那我们怎么知道-react-redux-是依赖-react-的，而-redux-router-redux-却没有依赖react呢" class="headerlink" title="3、那我们怎么知道 react-redux 是依赖 react 的，而 redux-router-redux 却没有依赖react呢"></a>3、那我们怎么知道 react-redux 是依赖 react 的，而 redux-router-redux 却没有依赖react呢</h4><p>我使用的是 Node 进行包管理，在项目文件夹中运行此检查：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm ls react<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/LF_blog/notes/no-009/3.png" class=""><p>npm ls react 这个命令会告诉我们，有哪些插件是依赖 react 的，很显然上面没有 redux-router-redux（那就是它没有依赖react），但是有 react-redux</p><h4 id="4、可以尝试通过添加一些日志并重新启动开发服务器来调试此问题："><a href="#4、可以尝试通过添加一些日志并重新启动开发服务器来调试此问题：" class="headerlink" title="4、可以尝试通过添加一些日志并重新启动开发服务器来调试此问题："></a>4、可以尝试通过添加一些日志并重新启动开发服务器来调试此问题：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在 node_modules/react-dom/index.js 添加</span>window<span class="token punctuation">.</span>React1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在随意一个组件里添加（我是在首页）</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'react-dom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>React2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>React1 <span class="token operator">===</span> window<span class="token punctuation">.</span>React2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果它打印了，false那么你可能有两个 React</p><p>如果你的 react-dom 是放在了 webpack.dll.config.js 文件里<br>那么修改保存后，你要先执行 npm run dll，再执行npm run dev</p><p>然后就大功告成拉❤️❤️❤️可以使用支持hook的新轮子👍</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm、nrm、node、npm、yarn使用教程</title>
      <link href="/LF_blog/notes/no-008.html"/>
      <url>/LF_blog/notes/no-008.html</url>
      
        <content type="html"><![CDATA[<p>nvm：全称node.js version management ，一个nodejs的版本管理工具，通过它可以安装和切换不同版本的node.js</p><p><strong>注意：如果电脑已经下载了node需要先卸载node，再安装nvm，以避免冲突</strong></p><h3 id="一、安装nvm"><a href="#一、安装nvm" class="headerlink" title="一、安装nvm"></a>一、安装nvm</h3><p>链接: <a href="https://github.com/coreybutler/nvm-windows/releases">nvm</a></p><img src="/LF_blog/notes/no-008/1.png" class=""><p>然后安装时点 <font color="red"> 同意 </font><br>在E盘新建一个nvm文件夹，后面注意安装路径，我这里填<br>nvm：<font color="red"> E:\nvm\nvm</font><br>nodejs：<font color="red"> E:\nvm\nodejs</font></p><h3 id="二、检查nvm是否安装成功"><a href="#二、检查nvm是否安装成功" class="headerlink" title="二、检查nvm是否安装成功"></a>二、检查nvm是否安装成功</h3><p>nvm -v</p><img src="/LF_blog/notes/no-008/2.png" class=""><p>打开电脑的环境变量，会发现多了这两个变量，而且路径和我们刚刚安装时设置的一样</p><img src="/LF_blog/notes/no-008/3.png" class=""><p>现在的文件夹打开是这样的</p><img src="/LF_blog/notes/no-008/4.png" class=""><h3 id="三、下载node"><a href="#三、下载node" class="headerlink" title="三、下载node"></a>三、下载node</h3><p>重点来了，要先设置镜像，不然nvm下载node会很卡<br>在 <font color="red"> E:\nvm\nvm </font>找到配置文件<font color="red"> settings.txt </font>复制过去</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">node_mirror</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>node<span class="token operator">/</span><span class="token literal-property property">npm_mirror</span><span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>npm<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/LF_blog/notes/no-008/5.png" class=""><p>nvm list available  查看nodejs 官方的所有版本</p><img src="/LF_blog/notes/no-008/6.png" class=""><p>注意：切换node版本记得用<font color="red"> 管理员 </font>身份打开 cmd</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//下载对应的node版本号</span>nvm install <span class="token number">16.14</span><span class="token number">.2</span><span class="token comment">//切换node版本</span>nvm use <span class="token number">16.14</span><span class="token number">.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>切换成功验证一下</p><img src="/LF_blog/notes/no-008/7.png" class=""><img src="/LF_blog/notes/no-008/8.png" class=""><p>这里的nodejs实际上是一个快捷键，他指向的真正文件是nvm文件夹里面node的某个版本  也就是我们 （nvm use 16.14.2） use的那个node版本</p><img src="/LF_blog/notes/no-008/9.png" class=""><img src="/LF_blog/notes/no-008/10.png" class=""><h3 id="四、配置全局环境变量"><a href="#四、配置全局环境变量" class="headerlink" title="四、配置全局环境变量"></a>四、配置全局环境变量</h3><p>问题：由于我们在nvm下载了多个版本的node全局安装的包，每次切换node时导致npm会出现一些命令找不到的情况。</p><p>例：nodeA安装了yarn，切换到nodeB执行yarn时，发现找不到命令了</p><p>解决方法：</p><ol><li>新建一个全局安装的文件夹</li></ol><img src="/LF_blog/notes/no-008/11.png" class=""><ol start="2"><li>对npm的config进行配置</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm config <span class="token keyword">set</span> prefix <span class="token string">"E:\node\node_global"</span>npm config <span class="token keyword">set</span> cache <span class="token string">"E:\node\node_cache"</span><span class="token comment">//设置npm镜像源为淘宝镜像</span>npm config <span class="token keyword">set</span> registry http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npmmirror<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置完打开 C盘用户下的.npmrc，是这样的</p><img src="/LF_blog/notes/no-008/12.png" class=""><img src="/LF_blog/notes/no-008/13.png" class=""><ol start="3"><li>设置环境变量<br>此电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统变量 -&gt; path -&gt;编辑 - &gt; 新增路径 -“E:\node\node_global”</li></ol><img src="/LF_blog/notes/no-008/14.png" class=""><ol start="4"><li>配置相关命令</li></ol><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">npm config ls</td><td align="left">查看配置列表，加 -l 显示全部配置</td></tr><tr><td align="left">npm prefix -g</td><td align="left">查看当前npm包的全局安装路径</td></tr><tr><td align="left">npm config get cache</td><td align="left">查看当前npm包的全局cache路径</td></tr><tr><td align="left">npm ls -g</td><td align="left">查看全局已安装（-g 的意思是 global 全局的意思）</td></tr><tr><td align="left">npm ls -g –depth 0</td><td align="left">加上层级控制显示–depth 0</td></tr></tbody></table><ol start="5"><li>验证是否都下载到 E:\node\node_global\node_modules</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g yarnnpm install @vue<span class="token operator">/</span>cli <span class="token operator">-</span>gnpm install <span class="token operator">-</span>g nrmnpm install <span class="token operator">-</span>g create<span class="token operator">-</span>react<span class="token operator">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>果然都在这里</p><img src="/LF_blog/notes/no-008/15.png" class=""><h3 id="五、nrm介绍"><a href="#五、nrm介绍" class="headerlink" title="五、nrm介绍"></a>五、nrm介绍</h3><p>安装 nrm：npm install -g nrm<br>nrm 是一个 npm 源管理器，允许你快速地在 npm源间切换。</p><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">nrm ls</td><td align="left">查看可选源</td></tr><tr><td align="left">nrm use （源）</td><td align="left">切换源</td></tr><tr><td align="left">nrm add （名称）（源）</td><td align="left">添加源</td></tr><tr><td align="left">nrm test npm</td><td align="left">测试网络延迟</td></tr></tbody></table><img src="/LF_blog/notes/no-008/16.png" class=""><h3 id="六、yarn全局安装"><a href="#六、yarn全局安装" class="headerlink" title="六、yarn全局安装"></a>六、yarn全局安装</h3><pre class="line-numbers language-none"><code class="language-none">npm install -g yarnyarn -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>问题：前面我们已经全局用npm安装过yarn了，也能查看到yarn安装的版本，但是当我们用yarn全局安装好@vue/cli，检查@vue/cli版本的时候，确报找不到vue指令的问题</p><pre class="line-numbers language-none"><code class="language-none">yarn global add @vue/cli// 检查@vue/cli版本vue -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解决方法：<br>1.查看yarn的命令目录</p><pre class="line-numbers language-none"><code class="language-none">yarn global bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、查看yarn的全局安装目录</p><pre class="line-numbers language-none"><code class="language-none">yarn global dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果发现，yarn 的全局安装位置与 bin 目录的位置并不一致（我当时一个在E盘，一个在C盘），<font color="red"> 重点是要将他们放在相同的硬盘分区里面就不会报错了。 </font>于是去修改 yarn 的全局安装位置和缓存位置：</p><pre class="line-numbers language-none"><code class="language-none">yarn config set global-folder "E:\yarn\yarn_global"yarn config set cache-folder "E:\yarn\yarn_cache"顺便设置yarn镜像源为淘宝镜像yarn config set registry http://registry.npmmirror.com <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.把yarn的bin目录（yarn global bin 的地址）添加到系统环境变量path上</p><img src="/LF_blog/notes/no-008/17.png" class=""><p>4.最后我们检查一下</p><img src="/LF_blog/notes/no-008/18.png" class=""><img src="/LF_blog/notes/no-008/19.png" class=""><p>以上，是我遇到的问题和解决方案，希望对你有所帮助💕💕💕</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ant-design的Table组件暂无数据，滚动条位置修改</title>
      <link href="/LF_blog/notes/no-007.html"/>
      <url>/LF_blog/notes/no-007.html</url>
      
        <content type="html"><![CDATA[<p><font color="red"> antd3.x </font>的Table组件，设置横向滚动，如果没有数据，横向滚动条会展示在暂无数据的上方，现在想要把暂无数据展示在滚动条的上面</p><p>原本</p><img src="/LF_blog/notes/no-007/1.png" class=""><p>效果</p><img src="/LF_blog/notes/no-007/2.png" class=""><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>将antd3.x升级到antd4.x，因为antd4的table组件已经解决了这个bug</li><li>antd3.x 和 antd4.x 共存，调用antd4的table组件</li><li>修改样式，实现滚动条在暂无数据下方</li></ol><h2 id="这里主要讲第三点"><a href="#这里主要讲第三点" class="headerlink" title="这里主要讲第三点"></a>这里主要讲第三点</h2><p>思路：表单无数据的时候，把 ant-table-tbody（表单内容） 撑高，然后通过绝对定位把 ant-table-placeholder （暂无数据的div）脱离文档流，移动上去</p><img src="/LF_blog/notes/no-007/3.png" class=""><p>上代码</p><img src="/LF_blog/notes/no-007/4.png" class=""><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.scrollH .ant-table-tbody</span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 168px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.scrollH .ant-table-placeholder</span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 51px<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大功告成👍👍👍<img src="/LF_blog/notes/no-007/5.gif" class=""></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何巧妙修改node_modules里的代码</title>
      <link href="/LF_blog/notes/no-006.html"/>
      <url>/LF_blog/notes/no-006.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要改node-modules？"><a href="#为什么要改node-modules？" class="headerlink" title="为什么要改node_modules？"></a>为什么要改node_modules？</h2><p>在平常的开发中，其实是很少需要改<font color="red"> node_modules </font>里的代码的。但是如果npm包有点小问题或者不符合我们的场景。</p><p>那我应该怎么改才能是最好的呢？</p><h2 id="方法一：直接改"><a href="#方法一：直接改" class="headerlink" title="方法一：直接改"></a>方法一：直接改</h2><p>这种很好懂，就是直接进<font color="red"> node_modules </font>中，找到那个包的代码，并修改对应的地方的代码，然后重启项目，就能达到我想要的效果。</p><p>弊端：</p><p>1、只能是你自己本地用你修改的代码，你同事用不了<br>2、下次npm i之后那个包的代码又恢复原状</p><h2 id="方法二：patch-package"><a href="#方法二：patch-package" class="headerlink" title="方法二：patch-package"></a>方法二：patch-package</h2><p><font color="red"> patch-package </font>可以立即修改并保留对 npm 依赖项的修改</p><h6 id="1、安装patch-package"><a href="#1、安装patch-package" class="headerlink" title="1、安装patch-package"></a>1、安装patch-package</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i patch<span class="token operator">-</span><span class="token keyword">package</span> <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="2、修改node-modules"><a href="#2、修改node-modules" class="headerlink" title="2、修改node_modules"></a>2、修改node_modules</h6><p>修改完依赖后，运行 patch-package 会自动创建 patch 文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 例： npx patch-package element-ui</span>npx patch<span class="token operator">-</span><span class="token keyword">package</span> 依赖名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>根目录下会多一个patches补丁目录</p><img src="/LF_blog/notes/no-006/1.png" class=""><blockquote><p>注意：记得要把patches这个目录提交到git</p></blockquote><h6 id="3、测试补丁是否有效"><a href="#3、测试补丁是否有效" class="headerlink" title="3、测试补丁是否有效"></a>3、测试补丁是否有效</h6><p>删除<font color="red"> node_modules </font>目录，然后重新运行npm install，安装完成后，查看你修改的node_modules里面的代码是否还在。如果在，就说明补丁生效了。</p><h6 id="4、修改脚本-package-json"><a href="#4、修改脚本-package-json" class="headerlink" title="4、修改脚本 package.json"></a>4、修改脚本 package.json</h6><p>其实这个时候你本地已经使用到了你修改后的代码了，但问题是怎么让你的同事也同步到你的修改后的代码😵</p><p>在<font color="red"> package.json </font>的<font color="red"> script </font>中增加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"postinstall"</span><span class="token operator">:</span> <span class="token string">"patch-package"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作用：当同事执行<font color="red"> npm i </font>的时候，会自动执行<font color="red"> npm run postinstall </font>这个命令，也就是执行<font color="red"> patch-package </font>，这时候就会去读取<font color="red"> patches </font>目录，并将那些补丁打到对应的<font color="red"> node_modules </font>包里，从而达到同步修改代码的效果</p><h6 id="5、注意事项"><a href="#5、注意事项" class="headerlink" title="5、注意事项"></a>5、注意事项</h6><ol><li>patch是锁定版本号的，如果升级了版本，patch内容将会失效，最好在package.json能够锁定版本号。</li><li>patch能支持多少文件修改，没有仔细测过，或许只能支持少量修改</li></ol><h6 id="6、问题-没有效果，console-打印不出来"><a href="#6、问题-没有效果，console-打印不出来" class="headerlink" title="6、问题: 没有效果，console 打印不出来"></a>6、问题: 没有效果，console 打印不出来</h6><p>多半是没有找对文件，例如 我们修改的是<font color="red"> lodash</font>里面的某个API，一般我们先找个<font color="red"> lodash</font>里的<font color="red"> package.json </font>文件，然后看<font color="red"> main（入口文件） </font>的指向，如果没有<font color="red"> package.json </font>文件，那应该就是默认的<font color="red"> index </font></p><img src="/LF_blog/notes/no-006/2.png" class="">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基于antd3.x 图片预览，支持轮播、缩放、拖拽</title>
      <link href="/LF_blog/notes/no-005.html"/>
      <url>/LF_blog/notes/no-005.html</url>
      
        <content type="html"><![CDATA[<p>在一个React项目上，新增一个图片预览功能，如果你们的UI是基于 <a href="https://ant.design/components/image-cn/">antd4.x</a> 的可以看看这个，然后我的项目是基于 antd3.x，因为项目比较大，不好升级</p><p>gitee地址：<a href="https://gitee.com/yunfulin/react-image">https://gitee.com/yunfulin/react-image</a></p><p>实现效果😁：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="https://live.csdn.net/v/embed/234535" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><img src="/LF_blog/notes/no-005/1.png" class=""><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><p>注意这里的左右箭头是antd4.x的，因为创建项目时默认下载了最新依赖</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Modal<span class="token punctuation">,</span>Carousel  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> LeftCircleOutlined<span class="token punctuation">,</span> RightCircleOutlined <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@ant-design/icons'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./picture.less'</span><span class="token keyword">import</span> pic1 <span class="token keyword">from</span> <span class="token string">'../../images/01.jpg'</span><span class="token keyword">import</span> pic2 <span class="token keyword">from</span> <span class="token string">'../../images/02.jpg'</span><span class="token keyword">import</span> pic3 <span class="token keyword">from</span> <span class="token string">'../../images/03.jpg'</span><span class="token keyword">import</span> pic4 <span class="token keyword">from</span> <span class="token string">'../../images/04.jpg'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Picture</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">imgAddress</span><span class="token operator">:</span><span class="token punctuation">[</span>pic1<span class="token punctuation">,</span>pic2<span class="token punctuation">,</span>pic3<span class="token punctuation">,</span>pic4<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">zoom</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//缩放</span>    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//左偏移</span>    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//右偏移</span>    <span class="token literal-property property">imgNum</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//轮播第n张</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onDrag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token parameter">classDom</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> imgDom<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>classDom<span class="token punctuation">)</span>    imgDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"scale(1)"</span>    imgDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'static'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">zoom</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 下一页</span>  <span class="token function-variable function">next</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>carousel<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重置图片参数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token string">'.slick-active .img'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 上一页</span>  <span class="token function-variable function">previous</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>carousel<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重置图片参数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token string">'.slick-active .img'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>   <span class="token comment">//切换面板的回调</span>   <span class="token function-variable function">switchOver</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">imgNum</span><span class="token operator">:</span> index <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//重新获取最新图片dom</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onDrag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">//点击控制图片缩放</span>  <span class="token function">imgToSize</span><span class="token punctuation">(</span><span class="token parameter">flag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> imgDom<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.slick-active .img'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> zoom <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>      zoom <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>zoom<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span> <span class="token operator">&gt;=</span><span class="token number">5</span><span class="token operator">?</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>zoom<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      zoom <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>zoom<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span> <span class="token operator">&lt;=</span><span class="token number">0.1</span><span class="token operator">?</span> <span class="token number">0.1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>zoom<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> zoom <span class="token punctuation">}</span><span class="token punctuation">)</span>    imgDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">scale( </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>zoom<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> )</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">}</span>   <span class="token comment">//滚轮控制图片缩放</span>  <span class="token function">onWheel</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> imgDom<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.slick-active .img'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> zoom <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    zoom <span class="token operator">+=</span> e<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">.</span>wheelDelta <span class="token operator">/</span> <span class="token number">1200</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>zoom <span class="token operator">&gt;=</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>zoom <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token punctuation">)</span> zoom <span class="token operator">=</span> <span class="token number">5</span>      imgDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>zoom<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>zoom<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      zoom <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>      imgDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>zoom<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>zoom<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//拖拽的实现</span>  <span class="token function-variable function">onDrag</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.slick-active .img'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token comment">// 鼠标被按下</span>    obj<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event      <span class="token comment">// 阻止默认事件</span>      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 计算鼠标当前坐标 = 鼠标按下坐标 - 元素当前坐标(距离父元素距离)</span>      <span class="token comment">// div的水平偏移量  鼠标.clentX - 元素.offsetLeft</span>      <span class="token comment">// div的垂直偏移量  鼠标.clentY - 元素.offsetTop</span>      <span class="token keyword">var</span> ol <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft      <span class="token keyword">var</span> ot <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetTop        <span class="token comment">// 绑定鼠标移动事件</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        event2 <span class="token operator">=</span> event2 <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>        <span class="token comment">// 计算移动距离 = 当前鼠标坐标 - 鼠标按下坐标</span>        <span class="token keyword">var</span> left <span class="token operator">=</span> event2<span class="token punctuation">.</span>clientX <span class="token operator">-</span> ol        <span class="token keyword">var</span> top <span class="token operator">=</span> event2<span class="token punctuation">.</span>clientY <span class="token operator">-</span> ot          obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span>      <span class="token punctuation">}</span>        <span class="token comment">// 绑定一个鼠标松开事件</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 取消鼠标移动事件</span>        document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> imgAddress<span class="token punctuation">,</span>imgNum<span class="token punctuation">,</span>zoom <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    <span class="token keyword">let</span> zoomVal <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>zoom<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Modal title<span class="token operator">=</span><span class="token string">"预览"</span> closable<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> centered<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> footer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">}</span> width<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">800</span><span class="token punctuation">}</span> maskClosable<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> visible<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"CarouselDialog_num"</span><span class="token operator">&gt;</span>共 <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>imgNum<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>imgAddress<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> 张<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'CarouselDialog_content'</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>LeftCircleOutlined  onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>previous<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">'28px'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#08c'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>Carousel dots<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">node</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>carousel <span class="token operator">=</span> node<span class="token punctuation">)</span><span class="token punctuation">}</span> afterChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>switchOver<span class="token punctuation">}</span><span class="token operator">&gt;</span>              <span class="token punctuation">{</span>                imgAddress<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                  <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>img className<span class="token operator">=</span><span class="token string">'img'</span> key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> src<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> onWheel<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onWheel</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">''</span> title<span class="token operator">=</span><span class="token string">"可拖动"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Carousel<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>RightCircleOutlined onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">'28px'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#08c'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"zoomBox"</span><span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"add"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">imgToSize</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span> zoomVal <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"add"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">imgToSize</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.CarouselDialog_num</span> <span class="token punctuation">{</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token selector">span</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> #31aef5<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.CarouselDialog_content</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token selector">.ant-carousel</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #c6c9c9<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token selector">.img</span> <span class="token punctuation">{</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> grab<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token selector">.zoomBox</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #c6c9c9<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>    <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token selector">.add</span> <span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">span</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>      <span class="token property">border-left</span><span class="token punctuation">:</span> 2px solid #c6c9c9<span class="token punctuation">;</span>      <span class="token property">border-right</span><span class="token punctuation">:</span> 2px solid #c6c9c9<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.ant-carousel .slick-slide</span> <span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token selector">div</span> <span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack3.x ~ 4.x 优化笔记</title>
      <link href="/LF_blog/notes/no-016.html"/>
      <url>/LF_blog/notes/no-016.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本配置"><a href="#一、基本配置" class="headerlink" title="一、基本配置"></a>一、基本配置</h2><h3 id="1、创建一个公共的配置文件-webpack-base-js"><a href="#1、创建一个公共的配置文件-webpack-base-js" class="headerlink" title="1、创建一个公共的配置文件 webpack.base.js"></a>1、创建一个公共的配置文件 <code>webpack.base.js</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">dir</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpackBase <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">)</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name]_[hash:4].js'</span><span class="token punctuation">,</span>        <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">'chunks/[name]_[hash:4].js'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'.less'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 设置别名</span>        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 这样配置后 @ 可以指向 src 目录</span>            <span class="token string-property property">'@styles'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/styles'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackBase<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、开发环境-webpack-dev-js-通过-webpack-merge-合并"><a href="#2、开发环境-webpack-dev-js-通过-webpack-merge-合并" class="headerlink" title="2、开发环境 webpack.dev.js 通过 webpack-merge 合并"></a>2、开发环境 <code>webpack.dev.js</code> 通过 <code>webpack-merge</code> 合并</h3><blockquote><p>开发环境、测试环境（<code>webpack.test.js</code>）、生产环境（<code>webpack.prod.js</code>）</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpackDev <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>webpackBase<span class="token punctuation">,</span> webpackDev<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、常用功能"><a href="#二、常用功能" class="headerlink" title="二、常用功能"></a>二、常用功能</h2><h3 id="1、添加别名-alias"><a href="#1、添加别名-alias" class="headerlink" title="1、添加别名 alias"></a>1、添加别名 <code>alias</code></h3><p>上面公共的配置文件里 已经写了</p><h3 id="2、配置-proxy-代理解决跨域问题"><a href="#2、配置-proxy-代理解决跨域问题" class="headerlink" title="2、配置 proxy 代理解决跨域问题"></a>2、配置 <code>proxy</code> 代理解决跨域问题</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// //指定服务器目录</span>    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    <span class="token literal-property property">stats</span><span class="token operator">:</span> <span class="token string">'errors-only'</span><span class="token punctuation">,</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">'8080'</span><span class="token punctuation">,</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">"/api"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">"http://xxx"</span><span class="token punctuation">,</span>   <span class="token comment">//目标代理接口地址</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string-property property">"^/api"</span><span class="token operator">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、添加打包分析"><a href="#3、添加打包分析" class="headerlink" title="3、添加打包分析"></a>3、添加打包分析</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> BundleAnalyzerPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-bundle-analyzer'</span><span class="token punctuation">)</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 分析代码</span>    <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">analyzerMode</span><span class="token operator">:</span> <span class="token string">'static'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、优化-moment-语言包"><a href="#4、优化-moment-语言包" class="headerlink" title="4、优化 moment 语言包"></a>4、优化 <code>moment</code> 语言包</h3><p>webpack 打包 moment.js 时会把所有语言包都打包，使用 <code>ContextReplacementPlugin</code> 插件来舍弃中文以外的其余语言文件，体积大致能缩减为原来的四分之一<br>参考：<a href="https://github.com/jmblog/how-to-optimize-momentjs-with-webpack">https://github.com/jmblog/how-to-optimize-momentjs-with-webpack</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 只加载 locale zh-cn文件</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ContextReplacementPlugin</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment[/\\]locale$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">zh-cn</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 在组件里使用方式</span><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment'</span><span class="token punctuation">;</span>moment<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">'zh-cn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、多进程并行压缩JS代码，并去掉-console-log"><a href="#5、多进程并行压缩JS代码，并去掉-console-log" class="headerlink" title="5、多进程并行压缩JS代码，并去掉 console.log"></a>5、多进程并行压缩<code>JS</code>代码，并去掉 <code>console.log</code></h3><p>方式一：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ParallelUglifyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-parallel-uglify-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ParallelUglifyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">cacheDir</span><span class="token operator">:</span> <span class="token string">'.cache/'</span><span class="token punctuation">,</span> <span class="token comment">// 设置缓存路径，提升二次构建速度</span>        <span class="token literal-property property">uglifyJS</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 删除所有的注释</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">drop_console</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//注释console</span>                <span class="token literal-property property">drop_debugger</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//注释debugger</span>      <span class="token literal-property property">pure_funcs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'console.log'</span><span class="token punctuation">]</span><span class="token comment">// 移除console</span>            <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：<code>webpack4.x</code>（推荐）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 设置缓存路径，提升二次构建速度</span><span class="token literal-property property">parallel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启多进程</span><span class="token literal-property property">terserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">drop_console</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//注释console</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、DLL分包：预编译资源模块"><a href="#6、DLL分包：预编译资源模块" class="headerlink" title="6、DLL分包：预编译资源模块"></a>6、DLL分包：预编译资源模块</h3><p>使用 <code>DLLPlugin</code> 将react、react-dom、redux、react-redux基础包和业务基础包打包成一个文件，<code>DIIReferencePlugin</code> 对 <code>manifest.json</code> 引用</p><ol><li>创建 <code>dll</code> 配置文件 <code>webpack.dll.js</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">'react'</span><span class="token punctuation">,</span>       <span class="token string">'react-dom'</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].dll.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/dll'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">'[name]_[hash]'</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 使用插件 DllPlugin</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/dll/[name].manifest.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'[name]_[hash]'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在公共的配置文件 <code>webpack.base.js</code> 引入</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 关联dll拆分出去的依赖</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token literal-property property">manifest</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/dll/library.manifest.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>配置 npm 脚本</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"dll"</span><span class="token operator">:</span> <span class="token string">"webpack --config webpack.dll.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>注入到 <code>html</code> 文件内</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 这里列出要加入html中的js文件</span>    <span class="token literal-property property">dlls</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">'./dll/library.dll.js'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">favicon</span><span class="token operator">:</span> <span class="token string">'./src/images/favicon.ico'</span> <span class="token comment">//favicon.ico文件路径</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// html里面</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"root"</span> id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> htmlWebpackPlugin<span class="token punctuation">.</span>options<span class="token punctuation">.</span>dlls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;%=htmlWebpackPlugin.options.dlls[i] %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>下面这步骤（<code>除开发环境外</code>）,<code>测试环境、生产环境</code>都需要添加<blockquote><p><strong><code>copy-webpack-plugin</code></strong>：将 文件 或者 文件夹 拷贝 到 构建的输出目录<br>我们在 <code>src/dll</code> 中约定了静态资源，但是打包的时候 <code>webpack</code> 并不会帮我们复制到 <code>dist</code> 目录</p></blockquote></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> CopyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span> <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">'./src/dll'</span><span class="token punctuation">,</span> <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">'./dist/dll'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、多进程-多实例构建"><a href="#7、多进程-多实例构建" class="headerlink" title="7、多进程/多实例构建"></a>7、多进程/多实例构建</h3><p>原理：每次 <code>webapck</code> 解析一个模块，<code>HappyPack</code> 会将它及它的依赖分配给<code> worker</code> 线程中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HappyPack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'happypack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token keyword">const</span> happyThreadPool <span class="token operator">=</span> HappyPack<span class="token punctuation">.</span><span class="token function">ThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">size</span><span class="token operator">:</span> os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpackBase <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js[x]?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">//把对.js 的文件处理交给id为 happyBabel 的 HappyPack 的实例执行</span>                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'happypack/loader?id=happyBabel'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'happyBabel'</span><span class="token punctuation">,</span> <span class="token comment">//用id来标识 happypack处理那里类文件</span>            <span class="token comment">// 配置 babel-loader，并设置缓存路径，提升二次构建速度</span>            <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader?cacheDirectory=true'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment">//共享进程池，即多个 HappyPack 实例都使用同一个共享进程池中的子进程去处理任务，以防止资源占用过多。</span>            <span class="token literal-property property">threadPool</span><span class="token operator">:</span> happyThreadPool<span class="token punctuation">,</span>            <span class="token literal-property property">verbose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//允许 HappyPack 输出日志</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackBase<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、利用缓存提升二次构建速度"><a href="#8、利用缓存提升二次构建速度" class="headerlink" title="8、利用缓存提升二次构建速度"></a>8、利用缓存提升二次构建速度</h3><ol><li><code>babel-loader</code> 开启缓存  （在7、多进程/多实例构建）</li><li><code>terser-webpack-plugin</code> 开启缓存  （在5、多进程并行压缩代码）</li><li>使用 <code>cache-loader</code> 或者 <code>hard-source-webpack-plugin</code></li></ol><p><code>webpack4.x</code>（推荐）使用<code>hard-source-webpack-plugin</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HardSourceWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hard-source-webpack-plugin'</span><span class="token punctuation">)</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HardSourceWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>webpack5.x</code> 把 <code>hard-source-webpack-plugin</code> 内置成一个配置</p></blockquote><h3 id="9、抽离css"><a href="#9、抽离css" class="headerlink" title="9、抽离css"></a>9、抽离css</h3><p><code>webpack</code>本来只能能打包处理<code>.js</code>文件，但是通过<code>loader</code>，可以打包处理各种类型的文件。比如：.css文件等</p><p>问题：我们的<code>css</code>的内容都被打包到<code>bundle.js</code>里面了，只要修改部分<code>js</code>代码，<code>css</code>模块也会被重新打包，或者只修改<code>css</code>模块，<code>js</code>模块是没有变化的，但是他们在一个<code>bundle</code>中，也会被重新打包。</p><p>解决方案：把<code>css</code>代码从<code>js</code>文件中抽离出来，单独出一个模块。</p><p>方式一：<code>webpack3.x</code>（<code>extract-text-webpack-plugin</code>）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/styles'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/components'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./node_modules/antd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>          <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">"css-loader"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">"style_[contenthash:4].css"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：<code>webpack4.x</code>（<code>mini-css-extract-plugin</code>）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// postcss-loader 可选</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// postcss-loader 可选</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name]_[contenthash:4].css'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、压缩css样式"><a href="#10、压缩css样式" class="headerlink" title="10、压缩css样式"></a>10、压缩<code>css</code>样式</h3><blockquote><p><code>webpack5.x</code> 可能会内置 CSS 压缩器，<code>webpack4.x</code> 需要自己使用压缩器，可以使用 <code>optimize-css-assets-webpack-plugin</code> 插件，设置 <code>optimization.minimizer</code> 覆盖 webpack 默认提供的，</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> OptimizeCSSAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token punctuation">)</span> <span class="token comment">// 压缩css代码</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">assetNameRegExp</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token literal-property property">cssProcessor</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cssnano"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 如果报错 安装 npm i cssnano -D</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、清理构建目录"><a href="#11、清理构建目录" class="headerlink" title="11、清理构建目录"></a>11、清理构建目录</h3><p><code>clean-webpack-plugin</code>：它会根据 <code>output.path</code> 自动清理文件夹</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 删除 dll 目录</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dll'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 删除 dist 目录</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12、开启-gzip-压缩"><a href="#12、开启-gzip-压缩" class="headerlink" title="12、开启 gzip 压缩"></a>12、开启 gzip 压缩</h3><ol><li>为何要使用gzip压缩？<blockquote><p>打包的时候开启 <code>gzip</code> 可以很大程度减少包的大小，页面大小可以变为原来的 <code>30%</code> 甚至更小，非常适合于上线部署。<br>更小的体积对于用户体验来说就意味着更快的加载速度以及更好的用户体验</p></blockquote></li><li>为什么gzip压缩后页面加载速度提升<blockquote><p>浏览器向服务器发出请求，并且在<code>请求头</code>中声明可以使用<code>gzip</code>的编码格式，服务器接受到请求之后，读取压缩后的文件，服务器直接返回给浏览器<code>gzip</code>格式的文件，浏览器进行解压缩，这样以来就节省了服务器压缩的时间</p></blockquote></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> CompressionPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'compression-webpack-plugin'</span><span class="token punctuation">)</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"[path].gz[query]"</span><span class="token punctuation">,</span> <span class="token comment">// 压缩后的文件名 版本3.x的话asset改为filename</span>  <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">"gzip"</span><span class="token punctuation">,</span>  <span class="token comment">// 使用gzip压缩</span>    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(js|css|json|txt|html|ico|svg)(\?.*)?$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token comment">// 匹配文件格式</span>    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token comment">// 对超过10kb的数据进行压缩</span><span class="token literal-property property">minRatio</span><span class="token operator">:</span> <span class="token number">0.8</span> <span class="token comment">// 压缩率小于这个值的资源才会被处理。默认值是 0.8。</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然，这个方法还需要服务端 <code>Nginx</code> 开启 <code>gzip_static</code> 功能</p></blockquote><h3 id="13、优化构建时命令行的显示日志（开发环境）"><a href="#13、优化构建时命令行的显示日志（开发环境）" class="headerlink" title="13、优化构建时命令行的显示日志（开发环境）"></a>13、优化构建时命令行的显示日志（开发环境）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> FriendlyErrorsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'friendly-errors-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">stats</span><span class="token operator">:</span> <span class="token string">'errors-only'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">FriendlyErrorsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14、利用-splitChunks-提取公共代码"><a href="#14、利用-splitChunks-提取公共代码" class="headerlink" title="14、利用 splitChunks 提取公共代码"></a>14、利用 splitChunks 提取公共代码</h3><ol><li>首先要明白<code>splitChunks</code> 和 <code>dll</code> 的区别</li></ol><ul><li><code>splitChunks</code> 是在构建时拆包，<code>dll</code> 是提前构建好基础库，打包的时候就不需要打基础库了</li><li><code>dll</code> 需要多配置一个 <code>webpack.dll.js</code> ，而且一旦 <code>dll</code> 中的依赖有更新，得走两遍打包</li><li>推荐使用 <code>splitChunks</code> 去提取页面间的公共 <code>js</code> 文件。<code>DllPlugin</code> 用于基础包（框架包、业务包）的分离。<blockquote><p><code>webpack4.x</code> 中使用 <code>splitChunks</code> 取代了 <code>CommonsChunkPlugin</code> 插件。</p></blockquote></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">//...</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">common</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'chunk-common'</span><span class="token punctuation">,</span>          <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token comment">// 所有引入的库进行分离</span>          <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 抽离公共包最小的大小 单位：字节</span>          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 最小引用次数</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15、多页面打包通用方案"><a href="#15、多页面打包通用方案" class="headerlink" title="15、多页面打包通用方案"></a>15、多页面打包通用方案</h3><img src="/LF_blog/notes/no-016/1.png" class=""><p>整体大概是上面那样，但我是按照<code>下面目录结构</code>编写的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">├── pagess│   ├── mobile│   │   ├── components│   │   ├── router│   │   ├── views│   │   ├── <span class="token constant">APP</span><span class="token punctuation">.</span><span class="token constant">VUE</span>│   │   ├── main<span class="token punctuation">.</span>js│   │   ├── index<span class="token punctuation">.</span>html│   ├── admin│   │   ├── components│   │   ├── router│   │   ├── views│   │   ├── <span class="token constant">APP</span><span class="token punctuation">.</span><span class="token constant">VUE</span>│   │   ├── main<span class="token punctuation">.</span>js│   │   ├── index<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i glob <span class="token operator">-</span><span class="token constant">D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'glob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token function-variable function">setMPA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> entryFiles <span class="token operator">=</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token string">'./pages/*/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取到的entryFiles是一个数组</span>     Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>entryFiles<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//根据获取到的路劲生成多入口entry对象</span>        <span class="token keyword">const</span> entryfile <span class="token operator">=</span> entryFiles<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token comment">// 获取到数组中的每一项</span>        <span class="token keyword">const</span> file <span class="token operator">=</span> entryfile<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">pages\/(.*)\/main\.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>        <span class="token keyword">const</span> pageName <span class="token operator">=</span> file <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment">// console.log('pageName', pageName)</span>        entry<span class="token punctuation">[</span>pageName<span class="token punctuation">]</span> <span class="token operator">=</span> entryfile<span class="token punctuation">;</span>                <span class="token comment">//生成每个入口的html模板</span>        htmlWebpackPlugin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/index.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span>pageName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//只打入指定的chunks，不然webpack会将所有bundle都引入</span>                <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">minify</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token comment">//压缩配置</span>                    <span class="token literal-property property">html5</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">collapseWhitespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">preserveLineBreaks</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    <span class="token literal-property property">minifyCSS</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">minifyJS</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token literal-property property">removeComments</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> entry<span class="token punctuation">,</span> htmlWebpackPlugin<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>entry<span class="token punctuation">,</span> htmlWebpackPlugin<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">setMPA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容替换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">entry</span><span class="token operator">:</span> entry<span class="token punctuation">,</span><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>htmlWebpackPlugin<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 接在数组上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scp2自动化部署到静态文件服务器 Nginx</title>
      <link href="/LF_blog/notes/no-017.html"/>
      <url>/LF_blog/notes/no-017.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>平时部署项目：先部署到测试环境，再发布到生产环境上，部署到测试环境用 <code>xshell</code> 连上服务器，然后用 <code>xftp</code> 连接服务器，将本地 <code>build</code> 好的 <code>dist</code> 文件通过 <code>xftp</code> 上传到服务器上，整个流程感觉稍有繁琐，重复。</p></blockquote><blockquote><p>解决方法：利用<code>scp2</code>插件完成自动化部署</p></blockquote><h2 id="一、安装-scp2-插件"><a href="#一、安装-scp2-插件" class="headerlink" title="一、安装 scp2 插件"></a>一、安装 <code>scp2</code> 插件</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install scp2 <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、配置-测试-生产环境"><a href="#二、配置-测试-生产环境" class="headerlink" title="二、配置 测试 / 生产环境"></a>二、配置 测试 / 生产环境</h2><ol><li>在项目根目录下, 创建 <code>.env.test</code> 文件 (测试环境变量)、<code>.env.prod</code> 文件 (生产环境变量)</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// .env.test文件中</span><span class="token constant">VUE_APP_SERVER_ID</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment">// .env.prod文件中</span><span class="token constant">VUE_APP_SERVER_ID</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、创建-scp2-自动化部署脚本"><a href="#三、创建-scp2-自动化部署脚本" class="headerlink" title="三、创建 scp2 自动化部署脚本"></a>三、创建 <code>scp2</code> 自动化部署脚本</h2><h3 id="1、-在项目根目录下-创建-deploy-products-js-文件"><a href="#1、-在项目根目录下-创建-deploy-products-js-文件" class="headerlink" title="1、 在项目根目录下, 创建 deploy/products.js 文件"></a>1、 在项目根目录下, 创建 <code>deploy/products.js</code> 文件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 读取env环境变量</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// env 文件 判断打包环境指定对应的服务器id</span><span class="token keyword">const</span> envfile <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'prod'</span> <span class="token operator">?</span> <span class="token string">'../.env.prod'</span> <span class="token operator">:</span> <span class="token string">'../.env.test'</span><span class="token punctuation">;</span><span class="token comment">// env环境变量的路径</span><span class="token keyword">const</span> envPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> envfile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// env对象</span><span class="token keyword">const</span> envObj <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>envPath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">SERVER_ID</span> <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>envObj<span class="token punctuation">.</span><span class="token constant">VUE_APP_SERVER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'环境变量、路径、ID'</span><span class="token punctuation">,</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">,</span> envfile<span class="token punctuation">,</span> <span class="token constant">SERVER_ID</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 解析KEY=VAL的文件</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// matching "KEY' and 'VAL' in 'KEY=VAL'</span>    <span class="token comment">// eslint-disable-next-line no-useless-escape</span>    <span class="token keyword">const</span> keyValueArr <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s*([\w\.\-]+)\s*=\s*(.*)?\s*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// matched?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>keyValueArr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> keyValueArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> keyValueArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token comment">// expand newlines in quoted values</span>      <span class="token keyword">const</span> len <span class="token operator">=</span> value <span class="token operator">?</span> value<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'"'</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'"'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// remove any surrounding quotes and extra spaces</span>      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^['"]|['"]$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* *定义多个服务器账号 及 根据 SERVER_ID 导出当前环境服务器账号 */</span><span class="token keyword">const</span> privateKeyPath <span class="token operator">=</span> <span class="token string">'../deploy/id_rsa'</span><span class="token punctuation">;</span> <span class="token comment">// 把秘钥保存到项目中</span><span class="token keyword">const</span> privateKeyFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> privateKeyPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> privateKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>privateKeyFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">SERVER_LIST</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'测试环境'</span><span class="token punctuation">,</span>    <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">'www.dev.com'</span><span class="token punctuation">,</span> <span class="token comment">// 域名</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'xx.xx.xx.xx'</span><span class="token punctuation">,</span> <span class="token comment">// ip</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token comment">// 端口</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token comment">// 登录服务器的账号</span>    <span class="token comment">//password: '123456', // 密码</span>    <span class="token literal-property property">privateKey</span><span class="token operator">:</span> privateKey<span class="token punctuation">,</span> <span class="token comment">// 私钥匙 账号密码暴露出来不安心，用秘钥（其实也不安全哈）</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/data/program/dist'</span><span class="token punctuation">,</span> <span class="token comment">// 发布至静态服务器的项目路径</span>    <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'生产环境'</span><span class="token punctuation">,</span>    <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">'www.prod.com'</span><span class="token punctuation">,</span> <span class="token comment">// 域名</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'xx.xx.xx.xx'</span><span class="token punctuation">,</span> <span class="token comment">// ip</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token comment">// 端口</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token comment">// 登录服务器的账号</span>    <span class="token comment">//password: '123456', // 密码</span>    <span class="token literal-property property">privateKey</span><span class="token operator">:</span> privateKey<span class="token punctuation">,</span> <span class="token comment">// 私钥匙 账号密码暴露出来不安心，用秘钥（其实也不安全哈）</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/data/program/dist'</span><span class="token punctuation">,</span> <span class="token comment">// 发布至静态服务器的项目路径</span>    <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token constant">SERVER_LIST</span><span class="token punctuation">[</span><span class="token constant">SERVER_ID</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、在项目根目录下-创建-deploy-index-js-文件"><a href="#2、在项目根目录下-创建-deploy-index-js-文件" class="headerlink" title="2、在项目根目录下, 创建 deploy/index.js 文件"></a>2、在项目根目录下, 创建 <code>deploy/index.js</code> 文件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> scpClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'scp2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chalk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./products'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scpClient<span class="token punctuation">.</span><span class="token function">scp</span><span class="token punctuation">(</span>  server<span class="token punctuation">.</span>relativePath<span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> server<span class="token punctuation">.</span>host<span class="token punctuation">,</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> server<span class="token punctuation">.</span>port<span class="token punctuation">,</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> server<span class="token punctuation">.</span>username<span class="token punctuation">,</span>    <span class="token comment">//password: server.password,</span>    <span class="token literal-property property">privateKey</span><span class="token operator">:</span> server<span class="token punctuation">.</span>privateKey<span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> server<span class="token punctuation">.</span>path<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">'发布失败.\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token string">'Success! 成功发布到'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'prod'</span> <span class="token operator">?</span> <span class="token string">'生产'</span> <span class="token operator">:</span> <span class="token string">'测试'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'服务器! \n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、在-package-json-里添加执行命令"><a href="#四、在-package-json-里添加执行命令" class="headerlink" title="四、在 package.json 里添加执行命令"></a>四、在 <code>package.json</code> 里添加执行命令</h2><blockquote><p>安装 <code>cross-env</code>：支持跨平台地设置及使用环境变量，这里用来设置 <code>生产环境</code>还是<code>测试环境</code></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i cross<span class="token operator">-</span>env <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --config ./scripts/webpack.dev.js"</span><span class="token punctuation">,</span>    <span class="token string-property property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --config ./scripts/webpack.prod.config.js"</span><span class="token punctuation">,</span>    <span class="token string-property property">"deploy:test"</span><span class="token operator">:</span> <span class="token string">"npm run build &amp;&amp; cross-env NODE_ENV=test node ./deploy"</span><span class="token punctuation">,</span>  <span class="token string-property property">"deploy:prod"</span><span class="token operator">:</span> <span class="token string">"npm run build &amp;&amp; cross-env NODE_ENV=prod node ./deploy"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React在线预览PDF文件</title>
      <link href="/LF_blog/notes/no-018.html"/>
      <url>/LF_blog/notes/no-018.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为<code>webpack 3</code>版本太低无法兼容最新版<code>react-pdf: ^6.2.2</code>，经过尝试发现 <code>5.2.0</code>版本可以正常运行</p></blockquote><blockquote><p>环境：<code>webpack: 3.10.0</code>、<code>react: 16.14.0</code>、<code>react-pdf: 5.2.0</code></p></blockquote><h2 id="一、安装-react-pdf"><a href="#一、安装-react-pdf" class="headerlink" title="一、安装 react-pdf"></a>一、安装 react-pdf</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i react<span class="token operator">-</span>pdf@<span class="token number">5.2</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、引入页面"><a href="#二、引入页面" class="headerlink" title="二、引入页面"></a>二、引入页面</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Document<span class="token punctuation">,</span> Page<span class="token punctuation">,</span> pdfjs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-pdf'</span><span class="token punctuation">;</span><span class="token keyword">import</span> pdfjsWorker <span class="token keyword">from</span> <span class="token string">"pdfjs-dist/build/pdf.worker.entry"</span><span class="token punctuation">;</span>pdfjs<span class="token punctuation">.</span>GlobalWorkerOptions<span class="token punctuation">.</span>workerSrc <span class="token operator">=</span> pdfjsWorker<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>numPages<span class="token punctuation">,</span> setNumPages<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//pdf的总页数</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>pageNumber<span class="token punctuation">,</span> setPageNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正在阅读的页码</span>  <span class="token keyword">function</span> <span class="token function">onDocumentLoadSuccess</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> numPages <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setNumPages</span><span class="token punctuation">(</span>numPages<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>Document file<span class="token operator">=</span><span class="token punctuation">{</span> preViewPath <span class="token punctuation">}</span> onLoadSuccess<span class="token operator">=</span><span class="token punctuation">{</span>onDocumentLoadSuccess<span class="token punctuation">}</span> error<span class="token operator">=</span><span class="token string">'加载预览文件失败'</span> loading<span class="token operator">=</span><span class="token string">'加载中，请稍候...'</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>Page scale<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.5</span><span class="token punctuation">}</span> pageNumber<span class="token operator">=</span><span class="token punctuation">{</span>pageNumber<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Document<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>        Page <span class="token punctuation">{</span>pageNumber<span class="token punctuation">}</span> <span class="token keyword">of</span> <span class="token punctuation">{</span>numPages<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、分页展示效果图"><a href="#三、分页展示效果图" class="headerlink" title="三、分页展示效果图"></a>三、分页展示效果图</h2><img src="/LF_blog/notes/no-018/1.png" class=""><h2 id="四、一次性展示全部效果图"><a href="#四、一次性展示全部效果图" class="headerlink" title="四、一次性展示全部效果图"></a>四、一次性展示全部效果图</h2><img src="/LF_blog/notes/no-018/2.png" class=""><blockquote><ul><li>创建一个长度为总页数<code>numPages</code>的数组进行<code>map</code>遍历，用<code>index</code>做页数，因为<code>index</code>等于0，因此<code>index+1</code></li><li>缺点：<code>pdf</code>页数过多会出现<code>性能问题</code>，可以自行考虑加载方法（例如每滑动十页再进行下面十页的加载）</li></ul></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>Document file<span class="token operator">=</span><span class="token punctuation">{</span> preViewPath <span class="token punctuation">}</span> onLoadSuccess<span class="token operator">=</span><span class="token punctuation">{</span>onDocumentLoadSuccess<span class="token punctuation">}</span> error<span class="token operator">=</span><span class="token string">'加载预览文件失败'</span> loading<span class="token operator">=</span><span class="token string">'加载中，请稍候...'</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>numPages<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Page className<span class="token operator">=</span><span class="token string">'mb24'</span> scale<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1.5</span><span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span> index <span class="token punctuation">}</span> pageNumber<span class="token operator">=</span><span class="token punctuation">{</span> index <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>Document<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、react-pdf-pdf-worker-js报错"><a href="#五、react-pdf-pdf-worker-js报错" class="headerlink" title="五、react-pdf pdf.worker.js报错"></a>五、react-pdf pdf.worker.js报错</h2><h3 id="1、官网提供实例"><a href="#1、官网提供实例" class="headerlink" title="1、官网提供实例"></a>1、官网提供实例</h3><p><code>pdf.worker.min.js</code>是国外 CDN 托管，国内访问不稳定（不推荐）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> pdfjs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-pdf'</span><span class="token punctuation">;</span>pdfjs<span class="token punctuation">.</span>GlobalWorkerOptions<span class="token punctuation">.</span>workerSrc <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">//unpkg.com/pdfjs-dist@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pdfjs<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/build/pdf.worker.min.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、从本地引入-（推荐）"><a href="#2、从本地引入-（推荐）" class="headerlink" title="2、从本地引入 （推荐）"></a>2、从本地引入 （推荐）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> pdfjs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-pdf'</span><span class="token punctuation">;</span><span class="token keyword">import</span> pdfjsWorker <span class="token keyword">from</span> <span class="token string">"pdfjs-dist/build/pdf.worker.entry"</span><span class="token punctuation">;</span>pdfjs<span class="token punctuation">.</span>GlobalWorkerOptions<span class="token punctuation">.</span>workerSrc <span class="token operator">=</span> pdfjsWorker<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue实现简单分页（后台只返回分页的全部数据，分页功能前端做）</title>
      <link href="/LF_blog/notes/no-003.html"/>
      <url>/LF_blog/notes/no-003.html</url>
      
        <content type="html"><![CDATA[<p>实现效果🤢：</p><img src="/LF_blog/notes/no-003/1.png" class=""><h2 id="定义data"><a href="#定义data" class="headerlink" title="定义data"></a>定义data</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">cur</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>             <span class="token comment">// 当前页</span><span class="token literal-property property">totalPage</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token comment">// 总页数</span><span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token comment">// 每页要展示数据条数</span><span class="token literal-property property">showPage</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token comment">// 每页展示的数据</span><span class="token literal-property property">tableData</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment">// 接收后台的总数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接收后台数据"><a href="#接收后台数据" class="headerlink" title="接收后台数据"></a>接收后台数据</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 页面初始化</span>    <span class="token function">getInit</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getDetail</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//  后端接口</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">.</span>tableData        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>showPage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>totalPage <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//求总页数</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义methods"><a href="#定义methods" class="headerlink" title="定义methods"></a>定义methods</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取分页</span><span class="token function">page</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token comment">//当前页</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>  <span class="token comment">//每去一组数据的第一个索引</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>showPage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> list <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从总数据中取出每页的数据</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 上一页</span><span class="token function">prev</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cur <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span> <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>cur <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 下一页</span><span class="token function">next</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cur <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>  <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>cur <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就大功告成啦😛  当然这里只写了分页的实现方法，css的话就自己写啦，相信你们都精通css</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue移动端适配（vue-cli 3/4）</title>
      <link href="/LF_blog/notes/no-002.html"/>
      <url>/LF_blog/notes/no-002.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目场景："><a href="#项目场景：" class="headerlink" title="项目场景："></a>项目场景：</h2><p>Vue项目H5页面，只要求适配移动端<font color="red">（vue 2.6 + @vue/cli 4.5.13）</font></p><hr><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>以前做的<font color="red"> vue-cli 2.x </font>移动端适配我是用 <font color="red"> lib-flexible + px2rem-loader </font>，然后这次<font color="red"> @vue/cli 4 </font>用了它就不灵了，发现刷新页面样式缩小了，我擦。。。</p><hr><h2 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h2><p>后来翻阅了一些文档，由于viewport单位得到众多浏览器的兼容，lib-flexible这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用viewport来替代此方案。</p><hr><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>使用<font color="red"> amfe-flexible + postcss-pxtorem</font><br>amfe-flexible 是配置可伸缩布局方案，主要是将1rem设为viewWidth/10<br>postcss-pxtorem 是postcss的插件，用于将像素单元生成rem单位。</p><ol><li>安装 amfe-flexible 和 postcss-pxtorem</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install amfe<span class="token operator">-</span>flexible <span class="token operator">-</span><span class="token constant">S</span>npm install postcss<span class="token operator">-</span>pxtorem <span class="token operator">-</span><span class="token constant">D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>在入口文件<font color="red"> main.js  </font>中引入</li></ol> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'amfe-flexible'</span> <span class="token comment">// 引入适配包</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>在<font color="red"> index.html  </font>添加</li></ol> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>在<font color="red"> vue.config.js </font>配置如下</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">loaderOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">postcss</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-pxtorem'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">rootValue</span><span class="token operator">:</span> <span class="token number">37.5</span><span class="token punctuation">,</span>            <span class="token literal-property property">propList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//哪些属性需要转换成rem</span>            <span class="token literal-property property">minPixelValue</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 最小转换单位</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>重启项目，如果报错 <font color="red"> Error: PostCSS plugin postcss-pxtorem requires PostCSS 8  </font>，降低  postcss-pxtorem 版本就行了</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i postcss<span class="token operator">-</span>pxtorem@<span class="token number">5.1</span><span class="token number">.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/LF_blog/notes/no-002/1.png" class="">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> postcss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装vue脚手架@vue/cli 4.5.13(稳定版)</title>
      <link href="/LF_blog/notes/no-001.html"/>
      <url>/LF_blog/notes/no-001.html</url>
      
        <content type="html"><![CDATA[<p>首先新建一个<font color="red"> vue </font>测试项目，还记得以前自己是用<font color="red" bgcolor="yellow"> vue-cli 2.0的版本 </font>去构建的，毕竟里面有默认配置好的webpack配置，但现在很多小伙伴都已经用最新的<font color="red"> @vue/cli 4+ </font>版本去开发了，因为<font color="red"> @vue/cli  3 以上 </font>的版本，比<font color="red"> 2.0 </font>的配置文件简洁了很多，<strong>当然你还得跟上时代的脚步，不然你就被淘汰了</strong>。</p><p>但自己搭建过的小伙伴都应该知道，<font color="red"> @vue/cli 3 </font>和<font color="red"> @vue/cli 4 </font>默认没有vue.config.js文件，所以需要自己来创建配置。在项目的根目录新建一个 vue.config.js 文件来覆盖项目的配置，因为项目的配置比较多，这里就不分别介绍了，可以 <a href="https://cli.vuejs.org/zh/config/#vue-config-js">访问官方文档</a>.</p><p>这里给出一个基本的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>      <span class="token comment">// 公共路径(必须有的)</span>  <span class="token literal-property property">outputDir</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>     <span class="token comment">// 输出文件目录</span>  <span class="token literal-property property">assetsDir</span><span class="token operator">:</span> <span class="token string">"./static"</span><span class="token punctuation">,</span> <span class="token comment">// 静态资源存放的文件夹(相对于ouputDir) 一般都是static目录，不然默认的会是assets</span>  <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token comment">// eslint-loader 是否在保存的时候检查(果断不用，这玩意儿我都没装)</span>  <span class="token literal-property property">runtimeCompiler</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">// 我用的only，打包后小些</span>  <span class="token literal-property property">productionSourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 在生产环境会生产.map文件 设置false可以减小dist文件大小，加速构建</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// npm run serve后自动打开页面</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8085</span><span class="token punctuation">,</span> <span class="token comment">// 开发服务器运行端口号</span>    <span class="token comment">// hotOnly: true, // 热更新,</span>    <span class="token comment">// proxy: {</span>    <span class="token comment">//   '/api': {</span>    <span class="token comment">//     target: '127.0.0.1',</span>    <span class="token comment">//     changeOrigin: true,</span>    <span class="token comment">//     pathRewrite: {</span>    <span class="token comment">//       '^/api': ''</span>    <span class="token comment">//     },</span>    <span class="token comment">//   },</span>    <span class="token comment">// },</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function-variable function">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>如果在电脑上已经安装了<font color="red"> vue-cli 2.0 </font>或者<font color="red"> @vue/cli 3 </font>的话需要先卸载再重新安装</p><table><thead><tr><th align="center">简要说明</th><th align="center"><font color="red"> vue-cli 2.0 </font></th><th align="center"><font color="red"> @vue/cli 3 </font></th></tr></thead><tbody><tr><td align="center">安装</td><td align="center">npm install -g vue-cli</td><td align="center">npm install -g @vue/cli</td></tr><tr><td align="center">卸载</td><td align="center">npm uninstall -g vue-cli</td><td align="center">npm uninstall -g @vue/cli</td></tr></tbody></table><p><font color="red"> 安装指定版本  </font>🎈<br>npm install -g @vue/<a href="mailto:cli@4.5.13">cli@4.5.13</a></p><p><font color="red"> 查询可用包的版本号 </font><br>npm view @vue/cli versions –json</p><p><font color="red"> 版本查询 </font>（检测是否安装成功）<br>  vue -V <br><br>通过上面的步骤就可完成<font color="red"> @vue/cli 4.5.13 </font>的安装。</p><h2 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vue create <span class="token function">项目名称</span>   <span class="token punctuation">(</span><span class="token operator">*</span>必须是英文，不允许大写，必须是小写英文<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用方向键 上、下来选择配置信息，点击回车进入下一步</p><img src="/LF_blog/notes/no-001/1.png" class=""><p>（可以用上下键选择的忽略这步骤）如果在git Bash中不能用上下箭头选择，找到git 安装目录中bash.bashrc文件</p><img src="/LF_blog/notes/no-001/2.png" class=""><p>然后在文件最底部加上  <font color="red"> alias vue=‘winpty vue.cmd’ </font></p><img src="/LF_blog/notes/no-001/3.png" class=""><p>关闭再重新打开 git Bash 就可以上下选择啦 😎 🤣 😁</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue <span class="token constant">CLI</span> v4<span class="token punctuation">.</span><span class="token number">5.13</span><span class="token operator">?</span> Please pick a preset<span class="token operator">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Choose Vue version                         <span class="token comment">//  选择Vue版本</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Babel                                      <span class="token comment">//  代码编译</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> TypeScript                                 <span class="token comment">//  ts</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> Progressive Web <span class="token function">App</span> <span class="token punctuation">(</span><span class="token constant">PWA</span><span class="token punctuation">)</span> Support          <span class="token comment">//  支持渐进式网页应用程序</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Router                                     <span class="token comment">//  vue路由</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> Vuex                                       <span class="token comment">//  状态管理模式</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token constant">CSS</span> Pre<span class="token operator">-</span>processors                         <span class="token comment">//  css预处理</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> Linter <span class="token operator">/</span> Formatter                         <span class="token comment">//  代码风格、格式校验</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> Unit Testing                               <span class="token comment">//  单元测试</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token constant">E2E</span> Testing                                <span class="token comment">//  端对端测试</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按<font color="red"> 空格键 </font>进行配置，然后 回车 进入下一步</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue <span class="token constant">CLI</span> v4<span class="token punctuation">.</span><span class="token number">5.13</span><span class="token operator">?</span> Please pick a preset<span class="token operator">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token operator">:</span> Choose Vue version<span class="token punctuation">,</span> Babel<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Vuex<span class="token punctuation">,</span> <span class="token constant">CSS</span> Pre<span class="token operator">-</span>processors<span class="token operator">?</span> Choose a version <span class="token keyword">of</span> Vue<span class="token punctuation">.</span>js that you want to start the project <span class="token keyword">with</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">.</span>x  <span class="token number">3</span><span class="token punctuation">.</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我选择的是<font color="red"> vue2.x </font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue <span class="token constant">CLI</span> v4<span class="token punctuation">.</span><span class="token number">5.13</span><span class="token operator">?</span> Please pick a preset<span class="token operator">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token operator">:</span> Choose Vue version<span class="token punctuation">,</span> Babel<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Vuex<span class="token punctuation">,</span> <span class="token constant">CSS</span> Pre<span class="token operator">-</span>processors<span class="token operator">?</span> Choose a version <span class="token keyword">of</span> Vue<span class="token punctuation">.</span>js that you want to start the project <span class="token keyword">with</span> <span class="token number">2</span><span class="token punctuation">.</span>x<span class="token operator">?</span> Use history mode <span class="token keyword">for</span> router<span class="token operator">?</span> <span class="token punctuation">(</span>Requires proper server setup <span class="token keyword">for</span> index fallback <span class="token keyword">in</span> production<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Y</span><span class="token operator">/</span>n<span class="token punctuation">)</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择是否使用路由 history router，我这里选择 <font color="red">是</font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue <span class="token constant">CLI</span> v4<span class="token punctuation">.</span><span class="token number">5.13</span><span class="token operator">?</span> Please pick a preset<span class="token operator">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token operator">:</span> Choose Vue version<span class="token punctuation">,</span> Babel<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Vuex<span class="token punctuation">,</span> <span class="token constant">CSS</span> Pre<span class="token operator">-</span>processors<span class="token operator">?</span> Choose a version <span class="token keyword">of</span> Vue<span class="token punctuation">.</span>js that you want to start the project <span class="token keyword">with</span> <span class="token number">2</span><span class="token punctuation">.</span>x<span class="token operator">?</span> Use history mode <span class="token keyword">for</span> router<span class="token operator">?</span> <span class="token punctuation">(</span>Requires proper server setup <span class="token keyword">for</span> index fallback<span class="token keyword">in</span> production<span class="token punctuation">)</span> Yes<span class="token operator">?</span> Pick a <span class="token constant">CSS</span> pre<span class="token operator">-</span><span class="token function">processor</span> <span class="token punctuation">(</span>PostCSS<span class="token punctuation">,</span> Autoprefixer and <span class="token constant">CSS</span> Modules are supported by <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">:</span>  Sass<span class="token operator">/</span><span class="token constant">SCSS</span> <span class="token punctuation">(</span><span class="token keyword">with</span> dart<span class="token operator">-</span>sass<span class="token punctuation">)</span>  Sass<span class="token operator">/</span><span class="token constant">SCSS</span> <span class="token punctuation">(</span><span class="token keyword">with</span> node<span class="token operator">-</span>sass<span class="token punctuation">)</span><span class="token operator">&gt;</span> Less  Stylus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我选择<font color="red"> Less </font>编译方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue <span class="token constant">CLI</span> v4<span class="token punctuation">.</span><span class="token number">5.13</span><span class="token operator">?</span> Please pick a preset<span class="token operator">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token operator">:</span> Choose Vue version<span class="token punctuation">,</span> Babel<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Vuex<span class="token punctuation">,</span> <span class="token constant">CSS</span> Pre<span class="token operator">-</span>processors<span class="token operator">?</span> Choose a version <span class="token keyword">of</span> Vue<span class="token punctuation">.</span>js that you want to start the project <span class="token keyword">with</span> <span class="token number">2</span><span class="token punctuation">.</span>x<span class="token operator">?</span> Use history mode <span class="token keyword">for</span> router<span class="token operator">?</span> <span class="token punctuation">(</span>Requires proper server setup <span class="token keyword">for</span> index fallback<span class="token keyword">in</span> production<span class="token punctuation">)</span> Yes<span class="token operator">?</span> Pick a <span class="token constant">CSS</span> pre<span class="token operator">-</span><span class="token function">processor</span> <span class="token punctuation">(</span>PostCSS<span class="token punctuation">,</span> Autoprefixer and <span class="token constant">CSS</span> Modules are supported by <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">:</span> Less<span class="token operator">?</span> Where <span class="token keyword">do</span> you prefer placing config <span class="token keyword">for</span> Babel<span class="token punctuation">,</span> ESLint<span class="token punctuation">,</span> etc<span class="token punctuation">.</span><span class="token operator">?</span>  In dedicated config files<span class="token operator">&gt;</span> In <span class="token keyword">package</span><span class="token punctuation">.</span>json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择 <font color="red"> package.json </font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue <span class="token constant">CLI</span> v4<span class="token punctuation">.</span><span class="token number">5.13</span><span class="token operator">?</span> Please pick a preset<span class="token operator">:</span> Manually select features<span class="token operator">?</span> Check the features needed <span class="token keyword">for</span> your project<span class="token operator">:</span> Choose Vue version<span class="token punctuation">,</span> Babel<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> Vuex<span class="token punctuation">,</span> <span class="token constant">CSS</span> Pre<span class="token operator">-</span>processors<span class="token operator">?</span> Choose a version <span class="token keyword">of</span> Vue<span class="token punctuation">.</span>js that you want to start the project <span class="token keyword">with</span> <span class="token number">2</span><span class="token punctuation">.</span>x<span class="token operator">?</span> Use history mode <span class="token keyword">for</span> router<span class="token operator">?</span> <span class="token punctuation">(</span>Requires proper server setup <span class="token keyword">for</span> index fallback<span class="token keyword">in</span> production<span class="token punctuation">)</span> Yes<span class="token operator">?</span> Pick a <span class="token constant">CSS</span> pre<span class="token operator">-</span><span class="token function">processor</span> <span class="token punctuation">(</span>PostCSS<span class="token punctuation">,</span> Autoprefixer and <span class="token constant">CSS</span> Modules are supported by <span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">:</span> Less<span class="token operator">?</span> Where <span class="token keyword">do</span> you prefer placing config <span class="token keyword">for</span> Babel<span class="token punctuation">,</span> ESLint<span class="token punctuation">,</span> etc<span class="token punctuation">.</span><span class="token operator">?</span> In <span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token operator">?</span> Save <span class="token keyword">this</span> <span class="token keyword">as</span> a preset <span class="token keyword">for</span> future projects<span class="token operator">?</span> <span class="token punctuation">(</span>y<span class="token operator">/</span><span class="token constant">N</span><span class="token punctuation">)</span> n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是否保存当前选择的配置项，如果当前配置是经常用到的配置，建议选择y存储一下当前配置项。如果只是临时使用的话就不需要存储了，根据自己情况而定啦。</p><p>但是我是之前已经配置保存了，所以这里 <font color="red"> 我选 n </font></p><h2 id="三、运行项目"><a href="#三、运行项目" class="headerlink" title="三、运行项目"></a>三、运行项目</h2><p>项目创建完毕，打开文件夹</p><img src="/LF_blog/notes/no-001/4.png" class=""><pre class="line-numbers language-none"><code class="language-none">npm run serve               // 运行项目<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/LF_blog/notes/no-001/5.png" class="">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS高频面试题（二）</title>
      <link href="/LF_blog/interview/no-012.html"/>
      <url>/LF_blog/interview/no-012.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、谈谈你对BFC的理解？"><a href="#1、谈谈你对BFC的理解？" class="headerlink" title="1、谈谈你对BFC的理解？"></a>1、谈谈你对BFC的理解？</h2><h3 id="1、BFC是什么"><a href="#1、BFC是什么" class="headerlink" title="1、BFC是什么"></a>1、BFC是什么</h3><blockquote><p>BFC ( Block Formatting Context)，块级格式化上下文，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响</p></blockquote><ul><li>BFC布局与普通文档流布局区别</li></ul><ol><li>普通文档流布局: 浮动的元素是不会被父级计算高度</li><li>非浮动元素会覆盖浮动元素的位置 </li><li>margin会传递给父级元素</li><li>两个相邻元素上下的margin会重叠</li></ol><ul><li>BFC布局规则:</li></ul><ol><li>浮动的元素会被父级计算高度(父级元素触发了BFC)</li><li>非浮动元素不会覆盖浮动元素的位置(非浮动元素触发了BFC)</li><li>margin不会传递给父级(父级触发BFC)</li><li>属于同一个BFC的两个相邻元素上下margin会重叠</li></ol><h3 id="2、触发条件"><a href="#2、触发条件" class="headerlink" title="2、触发条件"></a>2、触发条件</h3><ul><li>浮动元素：float值为 left、right</li><li>overflow值不为 visible，为 auto、scroll、hidden</li><li>display的值为 inline-block、inltable-cell、table-caption、flex、inline-grid 等</li><li>position的值为 absolute 或 fixed</li></ul><h3 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h3><blockquote><p>1、避免 margin 重叠 (上下外边距重叠)<br>2、清除浮动 （高度坍塌）<br>3、自适应多栏布局</p></blockquote><h5 id="1、避免-margin-重叠-上下外边距重叠"><a href="#1、避免-margin-重叠-上下外边距重叠" class="headerlink" title="1、避免 margin 重叠 (上下外边距重叠)"></a>1、避免 margin 重叠 (上下外边距重叠)</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;  p</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>222<span class="token punctuation">,</span> 19<span class="token punctuation">,</span> 19<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style&gt;&lt;body&gt;  &lt;p&gt;第一&lt;/p&gt;  &lt;p&gt;第二&lt;/p&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><img src="/LF_blog/interview/no-012/1.png" class=""><p>两个 p 元素之间的距离为100px，发生了margin重叠（塌陷），以最大的为准，如果第一个p 的margin为80的话，两个p之间的距离还是100，以最大的为准。</p><p>解决方法：</p><blockquote><p>1、外层元素 overflow:hidden;<br>2、内层元素绝对定位 postion: absolute:<br>3、内层元素 加 float: left; 或 display: inline-block;</p></blockquote><p>这里讲第一种：在p外面包裹一层容器，并触发这个容器生成一个BFC，那么两个p就不属于同一个BFC，则不会出现margin重叠</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;  .box</span><span class="token punctuation">{</span> <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">/*触发BFC */</span>  <span class="token selector">p</span> <span class="token punctuation">{</span>      <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>222<span class="token punctuation">,</span> 19<span class="token punctuation">,</span> 19<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style&gt;&lt;body&gt;  &lt;p&gt;第一&lt;/p&gt;  &lt;div class=<span class="token string">"box"</span>&gt;    &lt;p&gt;第二&lt;/p&gt;  &lt;/div&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候，边距则不会重叠：</p><img src="/LF_blog/interview/no-012/2.png" class=""><h5 id="2、清除浮动-（高度坍塌）"><a href="#2、清除浮动-（高度坍塌）" class="headerlink" title="2、清除浮动 （高度坍塌）"></a>2、清除浮动 （高度坍塌）</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;  .father</span> <span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> 5px solid red<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.son</span> <span class="token punctuation">{</span>      <span class="token property">border</span><span class="token punctuation">:</span> 5px solid green<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style&gt;&lt;body&gt;  &lt;div class=<span class="token string">"father"</span>&gt;      &lt;div class=<span class="token string">"son"</span>&gt;&lt;/div&gt;      &lt;div class=<span class="token string">"son"</span>&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><img src="/LF_blog/interview/no-012/3.png" class=""><p>解决方法：</p><blockquote><p>1、给父元素添加overflow：hidden (常用)<br>2、在浮动元素下方添加空div，并给元素声明 clear：both<br>3、使用 : after 伪类选择器清除浮动 （常用）<br>4、父元素添加浮动<br>5、给父元素设定高度</p></blockquote><p>这里讲第一种</p><p>BFC在计算高度时，浮动元素也会参与，所以我们可以触发 .father 元素生成BFC，则内部浮动元素计算高度时候也会计算</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.father</span> <span class="token punctuation">{</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时候的效果</p><img src="/LF_blog/interview/no-012/4.png" class=""><h5 id="3、自适应多栏布局"><a href="#3、自适应多栏布局" class="headerlink" title="3、自适应多栏布局"></a>3、自适应多栏布局</h5><p>这里举个两栏的布局</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;  body</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.aside</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.main</span> <span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style&gt;&lt;body&gt;  &lt;div class=<span class="token string">"aside"</span>&gt;&lt;/div&gt;  &lt;div class=<span class="token string">"main"</span>&gt;&lt;/div&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下图</p><img src="/LF_blog/interview/no-012/5.png" class=""><p>前面讲到，每个元素的左外边距与包含块的左边界相接触</p><p>因此，虽然.aslide为浮动元素，但是main的左边依然会与包含块的左边相接触</p><p>而BFC的区域不会与浮动盒子重叠</p><p>所以我们可以通过触发main生成BFC，以此适应两栏布局</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.main</span> <span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这时候，新的BFC不会与浮动的.aside元素重叠。因此会根据包含块的宽度，和.aside的宽度，自动变窄</p><p>效果如下</p><img src="/LF_blog/interview/no-012/6.png" class=""><h3 id="4、总结："><a href="#4、总结：" class="headerlink" title="4、总结："></a>4、总结：</h3><blockquote><p>可以看到上面几个案例，都体现了BFC实际就是页面一个独立的容器，里面的子元素不影响外面的元素</p></blockquote><h2 id="2、回流和重绘？"><a href="#2、回流和重绘？" class="headerlink" title="2、回流和重绘？"></a>2、回流和重绘？</h2><h3 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h3><p>在讨论回流与重绘之前，我们要知道：</p><ol><li>浏览器使用 <strong>流式布局模型</strong> (Flow Based Layout)。</li><li>浏览器会把 <strong>HTML</strong> 解析成 <strong>DOM</strong>，把 <strong>CSS</strong> 解析成 <strong>CSSOM</strong>，DOM 和 CSSOM 合并就产生了 <strong>渲染树（Render Tree）</strong>。</li><li>有了 <strong>RenderTree</strong>，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。</li><li>由于浏览器使用流式布局，对 <strong>Render Tree</strong> 的计算通常只需要遍历一次就可以完成，但 <strong>table</strong> 及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用 <strong>table</strong> 布局的原因之一。</li></ol><blockquote><p><strong>一句话：回流必将引起重绘，重绘不一定会引起回流。</strong></p></blockquote><ul><li><p>回流：当 <strong>DOM</strong> 的变化影响了元素的几何信息 (<strong><code>位置、尺寸大小</code></strong>)，浏览器需要重新计算元素的几何属性，重新渲染部分或全部文档的过程称为回流。</p></li><li><p>重绘：当页面中元素样式的改变并不影响它在文档流中的位置时（例如：<code>color</code>、<code>background-color</code>、<code>visibility</code>等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p></li></ul><h3 id="2、如何触发"><a href="#2、如何触发" class="headerlink" title="2、如何触发"></a>2、如何触发</h3><h5 id="1、回流触发条件"><a href="#1、回流触发条件" class="headerlink" title="1、回流触发条件"></a>1、回流触发条件</h5><ul><li>页面首次渲染</li><li>浏览器窗口大小发生改变</li><li>元素尺寸或位置发生改变</li><li>元素内容变化（文字数量或图片大小等等）</li><li>元素字体大小变化</li><li>添加或者删除 <strong>可见的DOM</strong> 元素</li><li>激活 <code>CSS</code> 伪类（例如：<code>:hover</code>）</li><li>查询某些属性或调用某些方法</li></ul><p>一些常用且会导致回流的属性和方法：</p><ul><li><code>clientWidth</code>、<code>clientHeight</code>、<code>clientTop</code>、<code>clientLeft</code></li><li><code>offsetWidth</code>、<code>offsetHeight</code>、<code>offsetTop</code>、<code>offsetLeft</code></li><li><code>scrollWidth</code>、<code>scrollHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code></li><li><code>scrollIntoView()</code>、<code>scrollIntoViewIfNeeded()</code></li><li><code>getComputedStyle()</code></li><li><code>getBoundingClientRect()</code></li><li><code>scrollTo()</code></li></ul><h5 id="2、重绘触发条件"><a href="#2、重绘触发条件" class="headerlink" title="2、重绘触发条件"></a>2、重绘触发条件</h5><ul><li>触发回流一定会触发重绘</li><li>颜色的修改</li><li>文本方向的修改</li><li>阴影的修改</li></ul><h3 id="3、浏览器优化机制"><a href="#3、浏览器优化机制" class="headerlink" title="3、浏览器优化机制"></a>3、浏览器优化机制</h3><p>现代浏览器会对频繁的回流或重绘操作进行优化：</p><p>浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。</p><p>当你访问以下属性或方法时，浏览器会立刻清空队列：</p><ul><li><code>clientWidth、clientHeight、clientTop、clientLeft</code></li><li><code>offsetWidth、offsetHeight、offsetTop、offsetLeft</code></li><li><code>scrollWidth、scrollHeight、scrollTop、scrollLeft</code></li><li><code>width、height</code></li><li><code>getComputedStyle()</code></li><li><code>getBoundingClientRect()</code></li></ul><p>因为队列中可能会有影响到这些属性或方法返回值的操作，即使你希望获取的信息与队列中操作引发的改变无关，浏览器也会强行清空队列，确保你拿到的值是最精确的。</p><h3 id="4、如何减少"><a href="#4、如何减少" class="headerlink" title="4、如何减少"></a>4、如何减少</h3><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><ul><li>避免使用 <code>table</code> 布局。</li><li>尽可能在 <code>DOM</code> 树的最末端改变 <code>class</code>。</li><li>避免设置多层内联样式。</li><li>将动画效果应用到 <code>position</code> 属性为 <code>absolute</code> 或 <code>fixed</code>的元素上。</li><li>避免使用 <code>CSS</code> 表达式（例如：<code>calc()</code>）。</li></ul><h5 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h5><ul><li>避免频繁操作样式，最好一次性重写 <code>style</code> 属性，或者将样式列表定义为<code>class</code>并一次性更改<code>class</code>属性。</li><li>避免频繁操作<code>DOM</code>，创建一个<code>documentFragment</code>，在它上面应用所有<code>DOM</code>操作，最后再把它添加到文档中。</li><li>也可以先为元素设置<code>display: none</code>，操作结束后再把它显示出来。因为在<code>display</code>属性为<code>none</code>的元素上进行的<code>DOM操作</code>不会引发回流和重绘。</li><li>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个<code>变量缓存</code>起来。</li><li>对具有复杂动画的元素使用<code>绝对定位</code>，使它<code>脱离文档流</code>，否则会引起父元素及后续元素频繁回流。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css3 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS高频面试题（一）</title>
      <link href="/LF_blog/interview/no-011.html"/>
      <url>/LF_blog/interview/no-011.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、水平垂直居中布局"><a href="#1、水平垂直居中布局" class="headerlink" title="1、水平垂直居中布局"></a>1、水平垂直居中布局</h2><p><strong>1. 已知元素宽高: 绝对定位 + margin: auto</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token selector">div</span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>   <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>   <span class="token property">left</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>   <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>   <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>   <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 已知元素宽高: 绝对定位 + margin: 负值</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -250px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> -250px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. absolute + transform</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token comment">/* 定位父级的50% */</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*自己的50% */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. flex 弹性布局</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>  //子元素水平居中<span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>      //子元素垂直居中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2、用css3实现0-5px的线条"><a href="#2、用css3实现0-5px的线条" class="headerlink" title="2、用css3实现0.5px的线条"></a>2、用css3实现0.5px的线条</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #000000<span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、让Chrome支持小于12px-的文字"><a href="#3、让Chrome支持小于12px-的文字" class="headerlink" title="3、让Chrome支持小于12px 的文字"></a>3、让Chrome支持小于12px 的文字</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.span</span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、CSS画一个三角形，原理是什么？"><a href="#4、CSS画一个三角形，原理是什么？" class="headerlink" title="4、CSS画一个三角形，原理是什么？"></a>4、CSS画一个三角形，原理是什么？</h2><p>1.首先画一个正方形</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 5px solid<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> green yellow red blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/LF_blog/interview/no-011/1.png" class=""><ol start="2"><li>将border设置100px，发现border渲染并不是正方形, 而是梯形</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 100px solid<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> green yellow red blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/LF_blog/interview/no-011/2.png" class=""><ol start="3"><li>白色区域则为width、height，这时候把白色区域部分宽高逐渐变小，最终变为0</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 100px solid<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> green yellow red blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/LF_blog/interview/no-011/3.png" class=""><ol start="4"><li>设置透明, 隐藏其中三个三角形</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 100px solid<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent transparent blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/LF_blog/interview/no-011/4.png" class=""><h2 id="5、对盒子模型的理解？"><a href="#5、对盒子模型的理解？" class="headerlink" title="5、对盒子模型的理解？"></a>5、对盒子模型的理解？</h2><h3 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h3><p>一个盒子由四个部分组成：内容(<code>content</code>)、内边距(<code>padding</code>)、边框(<code>border</code>)、外边距(<code>margin</code>)</p><blockquote><ul><li>有两种， <code>IE</code> 盒子模型、<code>W3C</code> 盒子模型</li><li>区 别： <code>IE</code> 的 <code>content</code>部分把 <code>border</code> 和 <code>padding</code>计算进去</li></ul></blockquote><h3 id="2、区别"><a href="#2、区别" class="headerlink" title="2、区别"></a>2、区别</h3><ul><li><code>IE8</code>及其以下版本浏览器，未声明 <code>DOCTYPE</code>，内容宽高会包含内边距（<code>padding</code>）和边框（<code>border</code>），称为怪异盒模型(<code>IE</code>盒模型)</li><li>标准(<code>W3C</code>)盒模型：盒子总宽度 = <code>width + padding + border + margin</code></li><li>怪异(<code>IE</code>)盒模型：盒子总宽度 = <code>width + margin</code></li><li>标准浏览器通过设置 <code>css3</code> 的 <code>box-sizing: border-box</code> 属性，触发<code>“怪异模式”</code>解析计算宽高</li></ul><h3 id="3、box-sizing-常用的属性有哪些？分别有什么作用"><a href="#3、box-sizing-常用的属性有哪些？分别有什么作用" class="headerlink" title="3、box-sizing 常用的属性有哪些？分别有什么作用"></a>3、box-sizing 常用的属性有哪些？分别有什么作用</h3><ul><li><code>box-sizing: content-box</code>; 默认的标准(<code>W3C</code>)盒模型元素效果</li><li><code>box-sizing: border-box</code>; 触发怪异(<code>IE</code>)盒模型元素的效果</li><li><code>box-sizing: inherit</code>; 继承父元素 <code>box-sizing</code> 属性的值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css3 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在谷歌里安装 vue react 调试工具</title>
      <link href="/LF_blog/notes/no-004.html"/>
      <url>/LF_blog/notes/no-004.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><p>这里我推荐一个自己常用的插件 <a href="https://chrome.pictureknow.com/">收藏猫插件</a> 👍 👍 👍</p><p>访问谷歌商店可以安装这个 <a href="https://ikuuu.eu/user/tutorial">访问助手</a></p><img src="/LF_blog/notes/no-004/1.png" class=""><p>点击下载插件手动安装，扫码并关注公众号就行🤣😂😁😎</p><img src="/LF_blog/notes/no-004/2.png" class=""><p>下载插件，并在浏览器提示中选择<font color="red">【保留】</font></p><img src="/LF_blog/notes/no-004/3.png" class=""><h2 id="二、打开浏览器扩展安装页面"><a href="#二、打开浏览器扩展安装页面" class="headerlink" title="二、打开浏览器扩展安装页面"></a>二、打开浏览器扩展安装页面</h2><p>点击浏览器右上角 <font color="red"> ⋮ </font> &gt; <font color="red">  更多工具</font> &gt; 点击 <font color="red">  扩展程序</font></p><h2 id="三、安装插件"><a href="#三、安装插件" class="headerlink" title="三、安装插件"></a>三、安装插件</h2><p>在扩展中心打开右上角的 <font color="red">【开发者模式】</font> 按钮，然后 <font color="red">【刷新】</font> 页面，把下载好的 <font color="red">.crx </font>文件拖入扩展中心</p><img src="/LF_blog/notes/no-004/4.png" class=""><img src="/LF_blog/notes/no-004/5.png" class=""><p>然后在自己的 <font color="red">vue</font> 项目中 F12看控制台，菜单栏就会多了一个 vue（多刷新一下或关闭浏览器重启）</p><img src="/LF_blog/notes/no-004/6.png" class="">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery主题优化（三）</title>
      <link href="/LF_blog/blog/no-015.html"/>
      <url>/LF_blog/blog/no-015.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Matery评论功能之（Valine）"><a href="#一、Matery评论功能之（Valine）" class="headerlink" title="一、Matery评论功能之（Valine）"></a>一、Matery评论功能之（Valine）</h2><p>效果图：</p><img src="/LF_blog/blog/no-015/1.png" class=""><h3 id="1、创建应用"><a href="#1、创建应用" class="headerlink" title="1、创建应用"></a>1、创建应用</h3><p>LeanCloud：<a href="https://console.leancloud.cn/">官网</a></p><ul><li>进入 LeanCloud 官方网站，<code>创建账号</code></li><li>进入 LeanCloud 系统点击左上角的创建应用按钮<code>创建一个新的应用</code></li></ul><img src="/LF_blog/blog/no-015/2.png" class=""><p>创建应用完成以后，点击 <code>设置</code> —– <code>应用凭证</code></p><img src="/LF_blog/blog/no-015/3.png" class=""><h3 id="2、配置-Valine"><a href="#2、配置-Valine" class="headerlink" title="2、配置 Valine"></a>2、配置 Valine</h3><p>在主题的配置文件 <code>themes\hexo-theme-matery\_config.yml</code> 找到 <code>valine:</code> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">valine</span><span class="token operator">:</span>  <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token literal-property property">appId</span><span class="token operator">:</span>  <span class="token literal-property property">appKey</span><span class="token operator">:</span>  <span class="token literal-property property">notify</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token literal-property property">verify</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token literal-property property">recordIP</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token literal-property property">avatar</span><span class="token operator">:</span> monsterid  # Gravatar style <span class="token operator">:</span> mm<span class="token operator">/</span>identicon<span class="token operator">/</span>monsterid<span class="token operator">/</span>wavatar<span class="token operator">/</span>retro<span class="token operator">/</span>hide  <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span>  <span class="token literal-property property">guest_info</span><span class="token operator">:</span> nick<span class="token punctuation">,</span>mail<span class="token punctuation">,</span>link  <span class="token literal-property property">language</span><span class="token operator">:</span> zh<span class="token operator">-</span>cn  <span class="token literal-property property">placeholder</span><span class="token operator">:</span> <span class="token string">'昵称填写QQ，可以显示QQ头像和昵称'</span> # Comment Box placeholder  <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token operator">/</span>medias<span class="token operator">/</span>comment_bg<span class="token punctuation">.</span>png  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token boolean">true</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外还要在主题的配置文件 <code>themes\hexo-theme-matery\_config.yml</code> 找到 <code>libs:</code> 更改 <code>js</code> 链接</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 若想保持最新版，请替换为 https://unpkg.com/valine/dist/Valine.min.js  默认为 /libs/valine/Valine.min.js</span><span class="token literal-property property">valine</span><span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>unpkg<span class="token punctuation">.</span>com<span class="token operator">/</span>valine<span class="token operator">/</span>dist<span class="token operator">/</span>Valine<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、更改-valine-ejs"><a href="#3、更改-valine-ejs" class="headerlink" title="3、更改 valine.ejs"></a>3、更改 valine.ejs</h3><blockquote><p>主要更改 <code>new Valine({ })</code> 里面的内容</p></blockquote><p>在文件中找到 <code>themes\Matery\layout\_partial\valine.ejs</code> </p><ol><li>表情包接口</li><li>昵称，邮箱必填选项</li><li>昵称输入QQ号自动获取qq网名和qq邮箱</li></ol><img src="/LF_blog/blog/no-015/4.png" class=""><p>完整的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>    <span class="token punctuation">.</span>valine<span class="token operator">-</span>card <span class="token punctuation">{</span>        <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>5rem auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>valine<span class="token operator">-</span>card <span class="token punctuation">.</span>card<span class="token operator">-</span>content <span class="token punctuation">{</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> 20px 20px 5px 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments textarea <span class="token punctuation">{</span>        box<span class="token operator">-</span>sizing<span class="token operator">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span>        <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"&lt;%- url_for(theme.valine.background) %&gt;"</span><span class="token punctuation">)</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token number">100</span><span class="token operator">%</span> no<span class="token operator">-</span>repeat<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments p <span class="token punctuation">{</span>        <span class="token literal-property property">margin</span><span class="token operator">:</span> 2px 2px 10px<span class="token punctuation">;</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>05rem<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>78rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments blockquote p <span class="token punctuation">{</span>        text<span class="token operator">-</span>indent<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>2rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments a <span class="token punctuation">{</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span> 2px<span class="token punctuation">;</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> #4cbf30<span class="token punctuation">;</span>        font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">;</span>        text<span class="token operator">-</span>decoration<span class="token operator">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments img <span class="token punctuation">{</span>        max<span class="token operator">-</span>width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> auto<span class="token punctuation">;</span>        <span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments ol li <span class="token punctuation">{</span>        list<span class="token operator">-</span>style<span class="token operator">-</span>type<span class="token operator">:</span> decimal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments ol<span class="token punctuation">,</span>    ul <span class="token punctuation">{</span>        <span class="token literal-property property">display</span><span class="token operator">:</span> block<span class="token punctuation">;</span>        padding<span class="token operator">-</span>left<span class="token operator">:</span> 2em<span class="token punctuation">;</span>        word<span class="token operator">-</span>spacing<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>05rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments ul li<span class="token punctuation">,</span>    ol li <span class="token punctuation">{</span>        <span class="token literal-property property">display</span><span class="token operator">:</span> list<span class="token operator">-</span>item<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>8rem<span class="token punctuation">;</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> 1rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments ul li <span class="token punctuation">{</span>        list<span class="token operator">-</span>style<span class="token operator">-</span>type<span class="token operator">:</span> disc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments ul ul li <span class="token punctuation">{</span>        list<span class="token operator">-</span>style<span class="token operator">-</span>type<span class="token operator">:</span> circle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments table<span class="token punctuation">,</span> th<span class="token punctuation">,</span> td <span class="token punctuation">{</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> 12px 13px<span class="token punctuation">;</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid #dfe2e5<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments table<span class="token punctuation">,</span> th<span class="token punctuation">,</span> td <span class="token punctuation">{</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    table tr<span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thead <span class="token punctuation">{</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> #fafafa<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments table th <span class="token punctuation">{</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> #f2f2f2<span class="token punctuation">;</span>        min<span class="token operator">-</span>width<span class="token operator">:</span> 80px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments table td <span class="token punctuation">{</span>        min<span class="token operator">-</span>width<span class="token operator">:</span> 80px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments h1 <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>85rem<span class="token punctuation">;</span>        font<span class="token operator">-</span>weight<span class="token operator">:</span> bold<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">.</span>2rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments h2 <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>65rem<span class="token punctuation">;</span>        font<span class="token operator">-</span>weight<span class="token operator">:</span> bold<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>9rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments h3 <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>45rem<span class="token punctuation">;</span>        font<span class="token operator">-</span>weight<span class="token operator">:</span> bold<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>7rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments h4 <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>25rem<span class="token punctuation">;</span>        font<span class="token operator">-</span>weight<span class="token operator">:</span> bold<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>5rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments h5 <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>1rem<span class="token punctuation">;</span>        font<span class="token operator">-</span>weight<span class="token operator">:</span> bold<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>4rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments h6 <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> 1rem<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>3rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments p <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> 1rem<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>5rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments hr <span class="token punctuation">{</span>        <span class="token literal-property property">margin</span><span class="token operator">:</span> 12px <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        border<span class="token operator">-</span>top<span class="token operator">:</span> 1px solid #ccc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments blockquote <span class="token punctuation">{</span>        <span class="token literal-property property">margin</span><span class="token operator">:</span> 15px <span class="token number">0</span><span class="token punctuation">;</span>        border<span class="token operator">-</span>left<span class="token operator">:</span> 5px solid #42b983<span class="token punctuation">;</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> 1rem <span class="token number">0</span><span class="token punctuation">.</span>8rem <span class="token number">0</span><span class="token punctuation">.</span>3rem <span class="token number">0</span><span class="token punctuation">.</span>8rem<span class="token punctuation">;</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">666</span><span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments pre <span class="token punctuation">{</span>        font<span class="token operator">-</span>family<span class="token operator">:</span> monospace<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>2em<span class="token punctuation">;</span>        <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token punctuation">.</span>5em <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token literal-property property">background</span><span class="token operator">:</span> #<span class="token number">272822</span><span class="token punctuation">;</span>        <span class="token literal-property property">overflow</span><span class="token operator">:</span> auto<span class="token punctuation">;</span>        border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>3em<span class="token punctuation">;</span>        tab<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments code <span class="token punctuation">{</span>        font<span class="token operator">-</span>family<span class="token operator">:</span> monospace<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> 1px 3px<span class="token punctuation">;</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>92rem<span class="token punctuation">;</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> #e96900<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> #f8f8f8<span class="token punctuation">;</span>        border<span class="token operator">-</span>radius<span class="token operator">:</span> 2px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments pre code <span class="token punctuation">{</span>        font<span class="token operator">-</span>family<span class="token operator">:</span> monospace<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> #e8eaf6<span class="token punctuation">;</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">272822</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments pre<span class="token punctuation">[</span><span class="token keyword">class</span><span class="token operator">*=</span><span class="token string">"language-"</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>2em<span class="token punctuation">;</span>        <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token punctuation">.</span>5em <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments code<span class="token punctuation">[</span><span class="token keyword">class</span><span class="token operator">*=</span><span class="token string">"language-"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    pre<span class="token punctuation">[</span><span class="token keyword">class</span><span class="token operator">*=</span><span class="token string">"language-"</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> #e8eaf6<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments <span class="token punctuation">[</span>type<span class="token operator">=</span><span class="token string">"checkbox"</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token operator">:</span>checked<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>type<span class="token operator">=</span><span class="token string">"checkbox"</span><span class="token punctuation">]</span><span class="token operator">:</span>checked <span class="token punctuation">{</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> inherit<span class="token punctuation">;</span>        margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>3rem<span class="token punctuation">;</span>        margin<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>4rem<span class="token punctuation">;</span>        margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        vertical<span class="token operator">-</span>align<span class="token operator">:</span> middle<span class="token punctuation">;</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> unset<span class="token punctuation">;</span>        <span class="token literal-property property">visibility</span><span class="token operator">:</span> visible<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments b<span class="token punctuation">,</span>    strong <span class="token punctuation">{</span>        font<span class="token operator">-</span>weight<span class="token operator">:</span> bold<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments dfn <span class="token punctuation">{</span>        font<span class="token operator">-</span>style<span class="token operator">:</span> italic<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments small <span class="token punctuation">{</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">85</span><span class="token operator">%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments cite <span class="token punctuation">{</span>        font<span class="token operator">-</span>style<span class="token operator">:</span> normal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments mark <span class="token punctuation">{</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> #fcf8e3<span class="token punctuation">;</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token punctuation">.</span>2em<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments table<span class="token punctuation">,</span> th<span class="token punctuation">,</span> td <span class="token punctuation">{</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> 12px 13px<span class="token punctuation">;</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid #dfe2e5<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    table tr<span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thead <span class="token punctuation">{</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> #fafafa<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments table th <span class="token punctuation">{</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> #f2f2f2<span class="token punctuation">;</span>        min<span class="token operator">-</span>width<span class="token operator">:</span> 80px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments table td <span class="token punctuation">{</span>        min<span class="token operator">-</span>width<span class="token operator">:</span> 80px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    #vcomments <span class="token punctuation">[</span>type<span class="token operator">=</span><span class="token string">"checkbox"</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token operator">:</span>checked<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>type<span class="token operator">=</span><span class="token string">"checkbox"</span><span class="token punctuation">]</span><span class="token operator">:</span>checked <span class="token punctuation">{</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> inherit<span class="token punctuation">;</span>        margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>3rem<span class="token punctuation">;</span>        margin<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>4rem<span class="token punctuation">;</span>        margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        vertical<span class="token operator">-</span>align<span class="token operator">:</span> middle<span class="token punctuation">;</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> unset<span class="token punctuation">;</span>        <span class="token literal-property property">visibility</span><span class="token operator">:</span> visible<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card valine-card"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"comment_headling"</span> style<span class="token operator">=</span><span class="token string">"font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-comments fa-fw"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>评论<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"vcomments"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span> style<span class="token operator">=</span><span class="token string">"display: grid"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/libs/valine/av-min.js') %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.valine) %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">new</span> <span class="token class-name">Valine</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#vcomments'</span><span class="token punctuation">,</span>        <span class="token literal-property property">appId</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.appId %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">appKey</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.appKey %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">notify</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.notify %&gt;'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        <span class="token literal-property property">verify</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.verify %&gt;'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.visitor %&gt;'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        <span class="token literal-property property">avatar</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.avatar %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.valine.pageSize %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">lang</span><span class="token operator">:</span> <span class="token string">'&lt;% if (config.language == "zh-CN") {  %&gt;zh-cn&lt;% } else { %&gt;en&lt;% } %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">placeholder</span><span class="token operator">:</span> <span class="token string">'&lt;%= theme.valine.placeholder %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">enableQQ</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">requiredFields</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'nick'</span><span class="token punctuation">,</span><span class="token string">'mail'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//设置必填项</span>        <span class="token literal-property property">emojiCDN</span><span class="token operator">:</span> <span class="token string">'//i0.hdslb.com/bfs/emote/'</span><span class="token punctuation">,</span> <span class="token comment">//设置哔站表情包地址</span>        <span class="token comment">// 表情title和图片映射</span>        <span class="token literal-property property">emojiMaps</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string-property property">"tv_doge"</span><span class="token operator">:</span> <span class="token string">"6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_亲亲"</span><span class="token operator">:</span> <span class="token string">"a8111ad55953ef5e3be3327ef94eb4a39d535d06.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_偷笑"</span><span class="token operator">:</span> <span class="token string">"bb690d4107620f1c15cff29509db529a73aee261.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_再见"</span><span class="token operator">:</span> <span class="token string">"180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_冷漠"</span><span class="token operator">:</span> <span class="token string">"b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_发怒"</span><span class="token operator">:</span> <span class="token string">"34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_发财"</span><span class="token operator">:</span> <span class="token string">"34db290afd2963723c6eb3c4560667db7253a21a.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_可爱"</span><span class="token operator">:</span> <span class="token string">"9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_吐血"</span><span class="token operator">:</span> <span class="token string">"09dd16a7aa59b77baa1155d47484409624470c77.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_呆"</span><span class="token operator">:</span> <span class="token string">"fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_呕吐"</span><span class="token operator">:</span> <span class="token string">"9f996894a39e282ccf5e66856af49483f81870f3.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_困"</span><span class="token operator">:</span> <span class="token string">"241ee304e44c0af029adceb294399391e4737ef2.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_坏笑"</span><span class="token operator">:</span> <span class="token string">"1f0b87f731a671079842116e0991c91c2c88645a.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_大佬"</span><span class="token operator">:</span> <span class="token string">"093c1e2c490161aca397afc45573c877cdead616.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_大哭"</span><span class="token operator">:</span> <span class="token string">"23269aeb35f99daee28dda129676f6e9ea87934f.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_委屈"</span><span class="token operator">:</span> <span class="token string">"d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_害羞"</span><span class="token operator">:</span> <span class="token string">"a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_尴尬"</span><span class="token operator">:</span> <span class="token string">"7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_微笑"</span><span class="token operator">:</span> <span class="token string">"70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_思考"</span><span class="token operator">:</span> <span class="token string">"90cf159733e558137ed20aa04d09964436f618a1.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_惊吓"</span><span class="token operator">:</span> <span class="token string">"0d15c7e2ee58e935adc6a7193ee042388adc22af.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_打脸"</span><span class="token operator">:</span> <span class="token string">"56ab10b624063e966bfcb76ea5dc4794d87dfd47.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_抓狂"</span><span class="token operator">:</span> <span class="token string">"fe31c08edad661d63762b04e17b8d5ae3c71a757.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_抠鼻"</span><span class="token operator">:</span> <span class="token string">"c666f55e88d471e51bbd9fab9bb308110824a6eb.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_斜眼笑"</span><span class="token operator">:</span> <span class="token string">"911f987aa8bc1bee12d52aafe62bc41ef4474e6c.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_无奈"</span><span class="token operator">:</span> <span class="token string">"ea8ed89ee9878f2fece2dda0ea8a5dbfe21b5751.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_晕"</span><span class="token operator">:</span> <span class="token string">"5443c22b4d07fb1907ccc610c8e6db254f2461b7.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_流汗"</span><span class="token operator">:</span> <span class="token string">"cead1c351ab8d79e9f369605beb90148db0fbed3.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_流泪"</span><span class="token operator">:</span> <span class="token string">"7e71cde7858f0cd50d74b0264aa26db612a8a167.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_流鼻血"</span><span class="token operator">:</span> <span class="token string">"c32d39db2737f89b904ca32700d140a9241b0767.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_点赞"</span><span class="token operator">:</span> <span class="token string">"f85c354995bd99e28fc76c869bfe42ba6438eff4.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_生气"</span><span class="token operator">:</span> <span class="token string">"26702dcafdab5e8225b43ffd23c94ac1ff932654.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_生病"</span><span class="token operator">:</span> <span class="token string">"8b0ec90e6b86771092a498c54f09fc94621c1900.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_疑问"</span><span class="token operator">:</span> <span class="token string">"0793d949b18d7be716078349c202c15ff166f314.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_白眼"</span><span class="token operator">:</span> <span class="token string">"c1d59f439e379ee50eef488bcb5e5378e5044ea4.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_皱眉"</span><span class="token operator">:</span> <span class="token string">"72ccad6679fea0d14cce648b4d818e09b8ffea2d.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_目瞪口呆"</span><span class="token operator">:</span> <span class="token string">"0b8cb81a68de5d5365212c99375e7ace3e7891b7.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_睡着"</span><span class="token operator">:</span> <span class="token string">"8b196675b53af58264f383c50ad0945048290b33.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_笑哭"</span><span class="token operator">:</span> <span class="token string">"1abc628f6d4f4caf9d0e7800878f4697abbc8273.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_腼腆"</span><span class="token operator">:</span> <span class="token string">"89712c0d4af73e67f89e35cbc518420380a7f6f4.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_色"</span><span class="token operator">:</span> <span class="token string">"61822c7e9aae5da76475e7892534545336b23a6f.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_调侃"</span><span class="token operator">:</span> <span class="token string">"4bc022533ef31544ca0d72c12c808cf4a1cce3e3.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_调皮"</span><span class="token operator">:</span> <span class="token string">"b9c41de8e82dd7a8515ae5e3cb63e898bf245186.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_鄙视"</span><span class="token operator">:</span> <span class="token string">"6e72339f346a692a495b123174b49e4e8e781303.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_闭嘴"</span><span class="token operator">:</span> <span class="token string">"c9e990da7f6e93975e25fd8b70e2e290aa4086ef.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_难过"</span><span class="token operator">:</span> <span class="token string">"87f46748d3f142ebc6586ff58860d0e2fc8263ba.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_馋"</span><span class="token operator">:</span> <span class="token string">"fc7e829b845c43c623c8b490ee3602b7f0e76a31.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_鬼脸"</span><span class="token operator">:</span> <span class="token string">"0ffbbddf8a94d124ca2f54b360bbc04feb6bbfea.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_黑人问号"</span><span class="token operator">:</span> <span class="token string">"45821a01f51bc867da9edbaa2e070410819a95b2.png"</span><span class="token punctuation">,</span>        <span class="token string-property property">"tv_鼓掌"</span><span class="token operator">:</span> <span class="token string">"1d21793f96ef4e6f48b23e53e3b9e42da833a0f6.png"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery主题优化（二）</title>
      <link href="/LF_blog/blog/no-014.html"/>
      <url>/LF_blog/blog/no-014.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>特效：1、页面加载动画 loading 2、看板娘（卡通人物）</p></blockquote><h2 id="1、页面加载动画-loading"><a href="#1、页面加载动画-loading" class="headerlink" title="1、页面加载动画 loading"></a>1、页面加载动画 loading</h2><h3 id="1、创建-loading-ejs"><a href="#1、创建-loading-ejs" class="headerlink" title="1、创建 loading.ejs"></a>1、创建 loading.ejs</h3><p>在 <strong><code>themes\hexo-theme-matery\layout\_widget</code></strong> 下，新建一个文件 loading.ejs</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>preloader<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"loading-box"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"loading-left-bg"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"loading-right-bg"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"spinner-box"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"configure-border-1"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"configure-core"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"configure-border-2"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"configure-core"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"loading-word"</span><span class="token operator">&gt;</span>加载中<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 页面加载动画 <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">'auto'</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'loading-box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"loaded"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、CSS代码"><a href="#2、CSS代码" class="headerlink" title="2、CSS代码"></a>2、CSS代码</h3><p>在 <strong><code>themes\hexo-theme-matery\source\css</code></strong> 下，新建一个文件 loading.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#loading-box .loading-left-bg,#loading-box .loading-right-bg</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #37474f<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .loading-right-bg</span> <span class="token punctuation">{</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box&gt;.spinner-box</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1001<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .spinner-box .configure-border-1</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ffab91<span class="token punctuation">;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> configure-clockwise 3s ease-in-out 0s infinite alternate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .spinner-box .configure-border-2</span> <span class="token punctuation">{</span>  <span class="token property">left</span><span class="token punctuation">:</span> -115px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>63<span class="token punctuation">,</span> 249<span class="token punctuation">,</span> 220<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> configure-xclockwise 3s ease-in-out 0s infinite alternate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .spinner-box .loading-word</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0.8rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .spinner-box .configure-core</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #37474f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div.loaded div.loading-left-bg</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-100%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div.loaded div.loading-right-bg</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div.loaded div.spinner-box</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> configure-clockwise</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> configure-xclockwise</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-135deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-225deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-315deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、编辑配置文件"><a href="#3、编辑配置文件" class="headerlink" title="3、编辑配置文件"></a>3、编辑配置文件</h3><p>在主题的配置文件 <code>themes\hexo-theme-matery\_config.yml</code> ，末尾加入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># 是否开启页面加载动画<span class="token literal-property property">preloader</span><span class="token operator">:</span>  <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4、引入文件"><a href="#4、引入文件" class="headerlink" title="4、引入文件"></a>4、引入文件</h3><p>在文件 <code>themes\hexo-theme-matery\layout\_partial\head.ejs</code> 的 <code>&lt;head&gt;</code> 标签里面 引入 <code>loading.css</code> 文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/css/loading.css') %&gt;"</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件 <code>themes\hexo-theme-matery\layout\layout.ejs</code> 的 <code>body</code> 标签<code>第一行</code>引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/loading'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>以上加载动画就大功告成啦！</p></blockquote><h2 id="2、看板娘（卡通人物）"><a href="#2、看板娘（卡通人物）" class="headerlink" title="2、看板娘（卡通人物）"></a>2、看板娘（卡通人物）</h2><h3 id="1、安装模块"><a href="#1、安装模块" class="headerlink" title="1、安装模块"></a>1、安装模块</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yarn add hexo<span class="token operator">-</span>helper<span class="token operator">-</span>live2d  <span class="token comment">// 这个是必须的</span>yarn add live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>nico  <span class="token comment">// 安装自己喜欢的模型，这个可以更换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>在根目录的 <code>_config.yml</code>，底部添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># live2d# https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token constant">EYHN</span><span class="token operator">/</span>hexo<span class="token operator">-</span>helper<span class="token operator">-</span>live2d<span class="token literal-property property">live2d</span><span class="token operator">:</span>  <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span> # 是否启用看板娘  <span class="token literal-property property">scriptFrom</span><span class="token operator">:</span> local # 默认  <span class="token literal-property property">pluginRootPath</span><span class="token operator">:</span> live2dw<span class="token operator">/</span> # <span class="token function">插件在站点上的根目录</span><span class="token punctuation">(</span>相对路径<span class="token punctuation">)</span>，自动生成  <span class="token literal-property property">pluginJsPath</span><span class="token operator">:</span> lib<span class="token operator">/</span> # 脚本文件相对与插件根目录路径  <span class="token literal-property property">pluginModelPath</span><span class="token operator">:</span> assets<span class="token operator">/</span> # 模型文件相对与插件根目录路径  # scriptFrom<span class="token operator">:</span> jsdelivr    # jsdelivr <span class="token constant">CDN</span>  # scriptFrom<span class="token operator">:</span> unpkg    # unpkg <span class="token constant">CDN</span>  # scriptFrom<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>jsdelivr<span class="token punctuation">.</span>net<span class="token operator">/</span>npm<span class="token operator">/</span>live2d<span class="token operator">-</span>widget@<span class="token number">3</span><span class="token punctuation">.</span>x<span class="token operator">/</span>lib<span class="token operator">/</span>L2Dwidget<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js    # 你的自定义 url  <span class="token literal-property property">tagMode</span><span class="token operator">:</span> <span class="token boolean">false</span> # 标签模式<span class="token punctuation">,</span> 是否仅替换 live2d tag标签而非插入到所有页面中，具体见项目github描述  <span class="token literal-property property">debug</span><span class="token operator">:</span> <span class="token boolean">false</span> # 调试<span class="token punctuation">,</span> 是否在控制台输出日志  <span class="token literal-property property">model</span><span class="token operator">:</span>    <span class="token literal-property property">use</span><span class="token operator">:</span> live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>nico # live2d模型的名字    <span class="token literal-property property">scale</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token literal-property property">hHeadPos</span><span class="token operator">:</span> <span class="token number">0.5</span>    <span class="token literal-property property">vHeadPos</span><span class="token operator">:</span> <span class="token number">0.618</span>  <span class="token literal-property property">display</span><span class="token operator">:</span>    <span class="token literal-property property">superSample</span><span class="token operator">:</span> <span class="token number">2</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">200</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span>    <span class="token literal-property property">position</span><span class="token operator">:</span> right # 左侧还是右侧    <span class="token literal-property property">hOffset</span><span class="token operator">:</span> <span class="token number">100</span>    <span class="token literal-property property">vOffset</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">15</span> # 距底部距离  <span class="token literal-property property">mobile</span><span class="token operator">:</span>    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span> # 手机端是否可见    <span class="token literal-property property">scale</span><span class="token operator">:</span> <span class="token number">0.5</span>  <span class="token literal-property property">react</span><span class="token operator">:</span>    <span class="token literal-property property">opacityDefault</span><span class="token operator">:</span> <span class="token number">0.7</span>    <span class="token literal-property property">opacityOnHover</span><span class="token operator">:</span> <span class="token number">0.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是这么简单！</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery主题优化（一）</title>
      <link href="/LF_blog/blog/no-013.html"/>
      <url>/LF_blog/blog/no-013.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>特效：1、首页轮播冒泡  2、鼠标点击弹出文字 3、鼠标移动特效 4、动态标签栏</p></blockquote><h2 id="1、首页轮播冒泡"><a href="#1、首页轮播冒泡" class="headerlink" title="1、首页轮播冒泡"></a>1、首页轮播冒泡</h2><h3 id="1、创建-bubble-js"><a href="#1、创建-bubble-js" class="headerlink" title="1、创建 bubble.js"></a>1、创建 bubble.js</h3><p>在 <strong><code>themes&gt;hexo-theme-matery&gt;source&gt;libs&gt;others</code></strong> 新建一个文件 bubble.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 首页轮播冒泡</span><span class="token keyword">function</span> <span class="token function">bubble</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.carousel-item, .pd-header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">circleMagic</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">density</span><span class="token operator">:</span> <span class="token number">.2</span><span class="token punctuation">,</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'rgba(255,255,255,.4)'</span><span class="token punctuation">,</span>    <span class="token literal-property property">clearOffset</span><span class="token operator">:</span> <span class="token number">0.99</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">!</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  p<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">circleMagic</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> o<span class="token punctuation">,</span> a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> r<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>      i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      d <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"rgba(255,0,0,.5)"</span><span class="token punctuation">,</span>        <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">density</span><span class="token operator">:</span> <span class="token number">.3</span><span class="token punctuation">,</span>        <span class="token literal-property property">clearOffset</span><span class="token operator">:</span> <span class="token number">.2</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span>      l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">c</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      e <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">&gt;</span> a<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">s</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      o <span class="token operator">=</span> l<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> a <span class="token operator">=</span> l<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> l<span class="token punctuation">.</span>height <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>width <span class="token operator">=</span> o<span class="token punctuation">,</span> n<span class="token punctuation">.</span>height <span class="token operator">=</span> a    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">h</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token keyword">in</span> r<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> o<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> i<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">f</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">e</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> o<span class="token punctuation">,</span> t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>y <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">.1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">.</span>clearOffset<span class="token punctuation">,</span>          t<span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token number">.1</span> <span class="token operator">+</span> <span class="token number">.3</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>speed <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"random"</span> <span class="token operator">===</span> d<span class="token punctuation">.</span>color <span class="token operator">?</span> t<span class="token punctuation">.</span>color <span class="token operator">=</span>            <span class="token string">"rgba("</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>              <span class="token number">0</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">:</span> t<span class="token punctuation">.</span>color <span class="token operator">=</span> d<span class="token punctuation">.</span>color      <span class="token punctuation">}</span>      t<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span>alpha <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>y <span class="token operator">-=</span> t<span class="token punctuation">.</span>speed<span class="token punctuation">,</span> t<span class="token punctuation">.</span>alpha <span class="token operator">-=</span> <span class="token number">5e-4</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>x<span class="token punctuation">,</span> t<span class="token punctuation">.</span>pos<span class="token punctuation">.</span>y<span class="token punctuation">,</span>          t<span class="token punctuation">.</span>scale <span class="token operator">*</span> d<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> t<span class="token punctuation">.</span>color<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token operator">!</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      o <span class="token operator">=</span> l<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">,</span> a <span class="token operator">=</span> l<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> t <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"canvas"</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token number">0</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"absolute"</span><span class="token punctuation">;</span>          l<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">"hidden"</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width <span class="token operator">=</span> o<span class="token punctuation">,</span> n<span class="token punctuation">.</span>height <span class="token operator">=</span> a<span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> o <span class="token operator">*</span> d<span class="token punctuation">.</span>density<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"scroll"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bubble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、编辑配置文件"><a href="#2、编辑配置文件" class="headerlink" title="2、编辑配置文件"></a>2、编辑配置文件</h3><p>在主题的配置文件 <code>themes\hexo-theme-matery\_config.yml</code> 找到 <code>libs:</code> 然后在 js 下引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">bubble</span><span class="token operator">:</span> <span class="token operator">/</span>libs<span class="token operator">/</span>others<span class="token operator">/</span>bubble<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在主题的配置文件 <code>themes\hexo-theme-matery\_config.yml</code> 的底部，添加下面代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># 首页轮播冒泡<span class="token literal-property property">bubble</span><span class="token operator">:</span>  <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、引入文件"><a href="#3、引入文件" class="headerlink" title="3、引入文件"></a>3、引入文件</h3><p>在文件 <code>themes\hexo-theme-matery\layout\layout.ejs</code> 的 <code>body</code> 标签里面 引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 白色冒泡 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>bubble<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.bubble) %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、鼠标点击弹出文字"><a href="#2、鼠标点击弹出文字" class="headerlink" title="2、鼠标点击弹出文字"></a>2、鼠标点击弹出文字</h2><blockquote><p>鼠标点击弹出文字的步骤与实现冒泡的步骤相似，这次我发现了个简单的写法</p></blockquote><h3 id="1、创建-click-show-text-js"><a href="#1、创建-click-show-text-js" class="headerlink" title="1、创建 click_show_text.js"></a>1、创建 click_show_text.js</h3><p>在主题文件 <code>themes\hexo-theme-matery\source\js</code> 下新建 <code>click_show_text.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span>        <span class="token punctuation">(</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>        y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string-property property">"z-index"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token string-property property">"top"</span><span class="token operator">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string-property property">"left"</span><span class="token operator">:</span> x<span class="token punctuation">,</span>            <span class="token string-property property">"position"</span><span class="token operator">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>            <span class="token string-property property">"font-weight"</span><span class="token operator">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>            <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"rgb("</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string-property property">"top"</span><span class="token operator">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>            <span class="token string-property property">"opacity"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'delay()'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".buryit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、直接引入文件"><a href="#2、直接引入文件" class="headerlink" title="2、直接引入文件"></a>2、直接引入文件</h3><p>在文件 <code>themes\hexo-theme-matery\layout\layout.ejs</code> 的 <code>body</code> 标签里面 引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>单击显示文字<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/click_show_text.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3、鼠标移动特效"><a href="#3、鼠标移动特效" class="headerlink" title="3、鼠标移动特效"></a>3、鼠标移动特效</h2><h3 id="1、创建-mouse-snow-js"><a href="#1、创建-mouse-snow-js" class="headerlink" title="1、创建 mouse_snow.js"></a>1、创建 mouse_snow.js</h3><p>在主题文件 <code>themes\hexo-theme-matery\source\js</code> 下新建 <code>mouse_snow.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">,</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchmove"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"touchstart"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      d <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>      window<span class="token punctuation">.</span>innerHeight  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>touches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token function">s</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> t<span class="token punctuation">.</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>clientY<span class="token punctuation">,</span> r<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      u<span class="token punctuation">.</span>x <span class="token operator">=</span> t<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>      u<span class="token punctuation">.</span>y <span class="token operator">=</span> t<span class="token punctuation">.</span>clientY<span class="token punctuation">,</span>      <span class="token function">s</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>x<span class="token punctuation">,</span> u<span class="token punctuation">.</span>y<span class="token punctuation">,</span> r<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> r<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">l</span><span class="token punctuation">;</span>      e<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>      f<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> f<span class="token punctuation">.</span>length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span>          f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> f<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> t<span class="token operator">--</span><span class="token punctuation">)</span>          f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>lifeSpan <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          f<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">l</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>character <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lifeSpan <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>initialStyles <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"fixed"</span><span class="token punctuation">,</span>          <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>          <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">"block"</span><span class="token punctuation">,</span>          <span class="token literal-property property">pointerEvents</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>          <span class="token string-property property">"z-index"</span><span class="token operator">:</span> <span class="token string">"10000000"</span><span class="token punctuation">,</span>          <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">"20px"</span><span class="token punctuation">,</span>          <span class="token string-property property">"will-change"</span><span class="token operator">:</span> <span class="token string">"transform"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token punctuation">{</span>              <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">.5</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">1</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">{</span>              <span class="token literal-property property">x</span><span class="token operator">:</span> t <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span>              <span class="token literal-property property">y</span><span class="token operator">:</span> i <span class="token operator">-</span> <span class="token number">20</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>initialStyles<span class="token punctuation">.</span>color <span class="token operator">=</span> n<span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>character<span class="token punctuation">,</span>          <span class="token function">c</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialStyles<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x<span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y<span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>lifeSpan<span class="token operator">--</span><span class="token punctuation">,</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"translate3d("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">"px,"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">"px,0) scale("</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lifeSpan <span class="token operator">/</span> <span class="token number">120</span> <span class="token operator">+</span> <span class="token string">")"</span>      <span class="token punctuation">}</span>      <span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">die</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">in</span> i<span class="token punctuation">)</span>          t<span class="token punctuation">.</span>style<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">[</span>n<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"#D61C59"</span><span class="token punctuation">,</span> <span class="token string">"#E7D84B"</span><span class="token punctuation">,</span> <span class="token string">"#1B8798"</span><span class="token punctuation">]</span>    <span class="token punctuation">,</span> d <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth    <span class="token punctuation">,</span> u <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token literal-property property">x</span><span class="token operator">:</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token literal-property property">y</span><span class="token operator">:</span> d <span class="token operator">/</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、直接引入文件-1"><a href="#2、直接引入文件-1" class="headerlink" title="2、直接引入文件"></a>2、直接引入文件</h3><p>在文件 <code>themes\hexo-theme-matery\layout\layout.ejs</code> 的 <code>body</code> 标签里面 引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 鼠标移动特效 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/mouse_snow.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4、动态标签栏"><a href="#4、动态标签栏" class="headerlink" title="4、动态标签栏"></a>4、动态标签栏</h2><h3 id="1、直接引入文件"><a href="#1、直接引入文件" class="headerlink" title="1、直接引入文件"></a>1、直接引入文件</h3><p>在文件 <code>themes\hexo-theme-matery\layout\layout.ejs</code> 的 <code>body</code> 标签里面 引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 动态标签栏 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>  <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span> st<span class="token punctuation">;</span>   document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"爱我，别走！"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"咦，你来啦！"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
